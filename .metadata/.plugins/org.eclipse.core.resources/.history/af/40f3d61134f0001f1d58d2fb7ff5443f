
UART_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066ac  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080068ac  080068ac  000078ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006960  08006960  000081ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006960  08006960  00007960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006968  08006968  000081ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006968  08006968  00007968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800696c  0800696c  0000796c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006970  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  080069dc  0000806c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  08006a7c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001008  200001ac  08006b1c  000081ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200011b4  08006b1c  000081b4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000081ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000142c0  00000000  00000000  000081da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003073  00000000  00000000  0001c49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  0001f510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c2f  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a025  00000000  00000000  00021137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001449b  00000000  00000000  0004b15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc22e  00000000  00000000  0005f5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015b825  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004958  00000000  00000000  0015b868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  001601c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ac 	.word	0x200001ac
 800021c:	00000000 	.word	0x00000000
 8000220:	08006894 	.word	0x08006894

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b0 	.word	0x200001b0
 800023c:	08006894 	.word	0x08006894

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Flash_Erase>:

static uint32_t GetSector(uint32_t Address);
void Flash_Read_String(uint32_t Address, char *Buffer, uint32_t MaxLen);

void Flash_Erase(uint32_t Address)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	/* Unlock the Flash to enable the flash control register access */
	HAL_FLASH_Unlock();
 80005e8:	f001 fcbe 	bl	8001f68 <HAL_FLASH_Unlock>

	/* Get the 1st sector to erase */
	FirstSector = GetSector(Address);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f82b 	bl	8000648 <GetSector>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a10      	ldr	r2, [pc, #64]	@ (8000638 <Flash_Erase+0x58>)
 80005f6:	6013      	str	r3, [r2, #0]
	/* Choosing only 1 sector to erase as it sufficient enough to write our data*/
	NbOfSectors = 1;
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <Flash_Erase+0x5c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <Flash_Erase+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000604:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <Flash_Erase+0x60>)
 8000606:	2202      	movs	r2, #2
 8000608:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FirstSector;
 800060a:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <Flash_Erase+0x58>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a0c      	ldr	r2, [pc, #48]	@ (8000640 <Flash_Erase+0x60>)
 8000610:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = NbOfSectors;
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <Flash_Erase+0x5c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <Flash_Erase+0x60>)
 8000618:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800061a:	490a      	ldr	r1, [pc, #40]	@ (8000644 <Flash_Erase+0x64>)
 800061c:	4808      	ldr	r0, [pc, #32]	@ (8000640 <Flash_Erase+0x60>)
 800061e:	f001 fe05 	bl	800222c <HAL_FLASHEx_Erase>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <Flash_Erase+0x4c>
	{
		/*
      Error occurred while sector erase.
		 */
		/* Infinite loop */
		while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <Flash_Erase+0x48>
		{
		}
	}
	HAL_FLASH_Lock();
 800062c:	f001 fcbe 	bl	8001fac <HAL_FLASH_Lock>

}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200001c8 	.word	0x200001c8
 800063c:	200001cc 	.word	0x200001cc
 8000640:	200001d4 	.word	0x200001d4
 8000644:	200001d0 	.word	0x200001d0

08000648 <GetSector>:
 * @brief  Gets the sector of a given address
 * @param  None
 * @retval The sector of a given address
 */
static uint32_t GetSector(uint32_t Address)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	uint32_t sector = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]

	if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a40      	ldr	r2, [pc, #256]	@ (8000758 <GetSector+0x110>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d206      	bcs.n	800066a <GetSector+0x22>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000662:	d302      	bcc.n	800066a <GetSector+0x22>
	{
		sector = FLASH_SECTOR_0;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e06f      	b.n	800074a <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a3b      	ldr	r2, [pc, #236]	@ (800075c <GetSector+0x114>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d806      	bhi.n	8000680 <GetSector+0x38>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a38      	ldr	r2, [pc, #224]	@ (8000758 <GetSector+0x110>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d302      	bcc.n	8000680 <GetSector+0x38>
	{
		sector = FLASH_SECTOR_1;
 800067a:	2301      	movs	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e064      	b.n	800074a <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a37      	ldr	r2, [pc, #220]	@ (8000760 <GetSector+0x118>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d206      	bcs.n	8000696 <GetSector+0x4e>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a34      	ldr	r2, [pc, #208]	@ (800075c <GetSector+0x114>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d902      	bls.n	8000696 <GetSector+0x4e>
	{
		sector = FLASH_SECTOR_2;
 8000690:	2302      	movs	r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	e059      	b.n	800074a <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a32      	ldr	r2, [pc, #200]	@ (8000764 <GetSector+0x11c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d806      	bhi.n	80006ac <GetSector+0x64>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a2f      	ldr	r2, [pc, #188]	@ (8000760 <GetSector+0x118>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d302      	bcc.n	80006ac <GetSector+0x64>
	{
		sector = FLASH_SECTOR_3;
 80006a6:	2303      	movs	r3, #3
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e04e      	b.n	800074a <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000768 <GetSector+0x120>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d806      	bhi.n	80006c2 <GetSector+0x7a>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000764 <GetSector+0x11c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d902      	bls.n	80006c2 <GetSector+0x7a>
	{
		sector = FLASH_SECTOR_4;
 80006bc:	2304      	movs	r3, #4
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	e043      	b.n	800074a <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <GetSector+0x124>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d806      	bhi.n	80006d8 <GetSector+0x90>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a26      	ldr	r2, [pc, #152]	@ (8000768 <GetSector+0x120>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d902      	bls.n	80006d8 <GetSector+0x90>
	{
		sector = FLASH_SECTOR_5;
 80006d2:	2305      	movs	r3, #5
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e038      	b.n	800074a <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <GetSector+0x128>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d806      	bhi.n	80006ee <GetSector+0xa6>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a22      	ldr	r2, [pc, #136]	@ (800076c <GetSector+0x124>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d902      	bls.n	80006ee <GetSector+0xa6>
	{
		sector = FLASH_SECTOR_6;
 80006e8:	2306      	movs	r3, #6
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	e02d      	b.n	800074a <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80006f4:	d206      	bcs.n	8000704 <GetSector+0xbc>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000770 <GetSector+0x128>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d902      	bls.n	8000704 <GetSector+0xbc>
	{
		sector = FLASH_SECTOR_7;
 80006fe:	2307      	movs	r3, #7
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e022      	b.n	800074a <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <GetSector+0x12c>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d806      	bhi.n	800071a <GetSector+0xd2>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8000712:	d302      	bcc.n	800071a <GetSector+0xd2>
	{
		sector = FLASH_SECTOR_8;
 8000714:	2308      	movs	r3, #8
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e017      	b.n	800074a <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a16      	ldr	r2, [pc, #88]	@ (8000778 <GetSector+0x130>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d806      	bhi.n	8000730 <GetSector+0xe8>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <GetSector+0x12c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d902      	bls.n	8000730 <GetSector+0xe8>
	{
		sector = FLASH_SECTOR_9;
 800072a:	2309      	movs	r3, #9
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	e00c      	b.n	800074a <GetSector+0x102>
	}
	else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <GetSector+0x134>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d806      	bhi.n	8000746 <GetSector+0xfe>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a0f      	ldr	r2, [pc, #60]	@ (8000778 <GetSector+0x130>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d902      	bls.n	8000746 <GetSector+0xfe>
	{
		sector = FLASH_SECTOR_10;
 8000740:	230a      	movs	r3, #10
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	e001      	b.n	800074a <GetSector+0x102>
			  sector = FLASH_SECTOR_23;
		  }
#else
	else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
	{
		sector = FLASH_SECTOR_11;
 8000746:	230b      	movs	r3, #11
 8000748:	60fb      	str	r3, [r7, #12]
	}
#endif /* DUAL_BANK */
	return sector;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	08008000 	.word	0x08008000
 800075c:	0800ffff 	.word	0x0800ffff
 8000760:	08018000 	.word	0x08018000
 8000764:	0801ffff 	.word	0x0801ffff
 8000768:	0803ffff 	.word	0x0803ffff
 800076c:	0807ffff 	.word	0x0807ffff
 8000770:	080bffff 	.word	0x080bffff
 8000774:	0813ffff 	.word	0x0813ffff
 8000778:	0817ffff 	.word	0x0817ffff
 800077c:	081bffff 	.word	0x081bffff

08000780 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000786:	f000 fe20 	bl	80013ca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800078a:	f000 f8d1 	bl	8000930 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800078e:	f000 f9ed 	bl	8000b6c <MX_GPIO_Init>
	MX_ETH_Init();
 8000792:	f000 f93f 	bl	8000a14 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000796:	f000 f98b 	bl	8000ab0 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800079a:	f000 f9b9 	bl	8000b10 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */

	// Erase the required Sector
	Flash_Erase(FLASH_USER_START_ADDR);
 800079e:	4853      	ldr	r0, [pc, #332]	@ (80008ec <main+0x16c>)
 80007a0:	f7ff ff1e 	bl	80005e0 <Flash_Erase>

	// Start receiving UART data in interrupt mode
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer[rxIndex], 1);
 80007a4:	4b52      	ldr	r3, [pc, #328]	@ (80008f0 <main+0x170>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b52      	ldr	r3, [pc, #328]	@ (80008f4 <main+0x174>)
 80007ac:	4413      	add	r3, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4851      	ldr	r0, [pc, #324]	@ (80008f8 <main+0x178>)
 80007b4:	f003 fb6b 	bl	8003e8e <HAL_UART_Receive_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		elapsedTime = HAL_GetTick() - startTime;  // Time elapsed in ms
 80007b8:	f000 fe58 	bl	800146c <HAL_GetTick>
 80007bc:	4602      	mov	r2, r0
 80007be:	4b4f      	ldr	r3, [pc, #316]	@ (80008fc <main+0x17c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	4a4e      	ldr	r2, [pc, #312]	@ (8000900 <main+0x180>)
 80007c6:	6013      	str	r3, [r2, #0]

		if (elapsedTime >= 1000) {  // Every 1 second
 80007c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000900 <main+0x180>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007d0:	d32e      	bcc.n	8000830 <main+0xb0>
			// Calculate RX Speed
			uint32_t RxBitsTransferred = ByteRxCount * 8;
 80007d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000904 <main+0x184>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	60fb      	str	r3, [r7, #12]
			uint32_t RxBps = RxBitsTransferred * 1000 / elapsedTime;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007e0:	fb03 f202 	mul.w	r2, r3, r2
 80007e4:	4b46      	ldr	r3, [pc, #280]	@ (8000900 <main+0x180>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ec:	60bb      	str	r3, [r7, #8]
			printf("RX Data Rate: %lu bps\n", RxBps);
 80007ee:	68b9      	ldr	r1, [r7, #8]
 80007f0:	4845      	ldr	r0, [pc, #276]	@ (8000908 <main+0x188>)
 80007f2:	f005 f983 	bl	8005afc <iprintf>

			// Calculate TX Speed
			uint32_t TxBitsTransferred = ByteTxCount * 8;
 80007f6:	4b45      	ldr	r3, [pc, #276]	@ (800090c <main+0x18c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	607b      	str	r3, [r7, #4]
			uint32_t TxBps = TxBitsTransferred * 1000 / elapsedTime;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000804:	fb03 f202 	mul.w	r2, r3, r2
 8000808:	4b3d      	ldr	r3, [pc, #244]	@ (8000900 <main+0x180>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000810:	603b      	str	r3, [r7, #0]
			printf("TX Data Rate: %lu bps\n", TxBps);
 8000812:	6839      	ldr	r1, [r7, #0]
 8000814:	483e      	ldr	r0, [pc, #248]	@ (8000910 <main+0x190>)
 8000816:	f005 f971 	bl	8005afc <iprintf>

			// Reset counters for the next interval
			ByteRxCount = 0;
 800081a:	4b3a      	ldr	r3, [pc, #232]	@ (8000904 <main+0x184>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
			ByteTxCount = 0;
 8000820:	4b3a      	ldr	r3, [pc, #232]	@ (800090c <main+0x18c>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
			startTime = HAL_GetTick();
 8000826:	f000 fe21 	bl	800146c <HAL_GetTick>
 800082a:	4603      	mov	r3, r0
 800082c:	4a33      	ldr	r2, [pc, #204]	@ (80008fc <main+0x17c>)
 800082e:	6013      	str	r3, [r2, #0]
		}

		if (dataReceived) {
 8000830:	4b38      	ldr	r3, [pc, #224]	@ (8000914 <main+0x194>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0bf      	beq.n	80007b8 <main+0x38>
			printf("Reading back from Flash...\n");
 8000838:	4837      	ldr	r0, [pc, #220]	@ (8000918 <main+0x198>)
 800083a:	f005 f9c7 	bl	8005bcc <puts>

			// Reset Flash address for reading
			uint32_t readAddress = FLASH_USER_START_ADDR;
 800083e:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <main+0x16c>)
 8000840:	617b      	str	r3, [r7, #20]

			// Read data from Flash until null character or max buffer size
			for (int i = 0; i < BUFFER_SIZE - 1; i++) {
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	e012      	b.n	800086e <main+0xee>
				readBuffer[i] = *(char *)readAddress;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	7819      	ldrb	r1, [r3, #0]
 800084c:	4a33      	ldr	r2, [pc, #204]	@ (800091c <main+0x19c>)
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	4413      	add	r3, r2
 8000852:	460a      	mov	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
				readAddress++;
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]

				// Stop if null character is encountered
				if (readBuffer[i] == '\0') {
 800085c:	4a2f      	ldr	r2, [pc, #188]	@ (800091c <main+0x19c>)
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <main+0xfa>
			for (int i = 0; i < BUFFER_SIZE - 1; i++) {
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	3301      	adds	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8000874:	4293      	cmp	r3, r2
 8000876:	dde7      	ble.n	8000848 <main+0xc8>
 8000878:	e000      	b.n	800087c <main+0xfc>
					break;
 800087a:	bf00      	nop
				}
			}

			// Null-terminate the read string
			readBuffer[BUFFER_SIZE - 1] = '\0';
 800087c:	4b27      	ldr	r3, [pc, #156]	@ (800091c <main+0x19c>)
 800087e:	2200      	movs	r2, #0
 8000880:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

			// Send the read data back to PC
			printf("Sending back data to PC...\n");
 8000884:	4826      	ldr	r0, [pc, #152]	@ (8000920 <main+0x1a0>)
 8000886:	f005 f9a1 	bl	8005bcc <puts>
			HAL_UART_Transmit(&huart3, (uint8_t *)readBuffer, strlen(readBuffer), HAL_MAX_DELAY);
 800088a:	4824      	ldr	r0, [pc, #144]	@ (800091c <main+0x19c>)
 800088c:	f7ff fcd8 	bl	8000240 <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	4920      	ldr	r1, [pc, #128]	@ (800091c <main+0x19c>)
 800089a:	4817      	ldr	r0, [pc, #92]	@ (80008f8 <main+0x178>)
 800089c:	f003 fa6e 	bl	8003d7c <HAL_UART_Transmit>
			ByteTxCount += strlen(readBuffer);  // Increment TX count by the number of bytes transmitted
 80008a0:	481e      	ldr	r0, [pc, #120]	@ (800091c <main+0x19c>)
 80008a2:	f7ff fccd 	bl	8000240 <strlen>
 80008a6:	4602      	mov	r2, r0
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <main+0x18c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	4a17      	ldr	r2, [pc, #92]	@ (800090c <main+0x18c>)
 80008b0:	6013      	str	r3, [r2, #0]

			// Reset for the next transmission
			dataReceived = 0;
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <main+0x194>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
			flashAddress = FLASH_USER_START_ADDR;  // Reset flash address for next write
 80008b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <main+0x1a4>)
 80008ba:	4a0c      	ldr	r2, [pc, #48]	@ (80008ec <main+0x16c>)
 80008bc:	601a      	str	r2, [r3, #0]
			byteCount = 0;
 80008be:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <main+0x1a8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
			wordBuffer = 0;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <main+0x1ac>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
			rxIndex = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <main+0x170>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
			memset(rxBuffer, 0, sizeof(rxBuffer));
 80008d0:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 80008d4:	2100      	movs	r1, #0
 80008d6:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <main+0x174>)
 80008d8:	f005 fa58 	bl	8005d8c <memset>
			memset(readBuffer, 0, sizeof(readBuffer));
 80008dc:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 80008e0:	2100      	movs	r1, #0
 80008e2:	480e      	ldr	r0, [pc, #56]	@ (800091c <main+0x19c>)
 80008e4:	f005 fa52 	bl	8005d8c <memset>
		elapsedTime = HAL_GetTick() - startTime;  // Time elapsed in ms
 80008e8:	e766      	b.n	80007b8 <main+0x38>
 80008ea:	bf00      	nop
 80008ec:	08010000 	.word	0x08010000
 80008f0:	200009d0 	.word	0x200009d0
 80008f4:	200001e8 	.word	0x200001e8
 80008f8:	20000ad4 	.word	0x20000ad4
 80008fc:	200009dc 	.word	0x200009dc
 8000900:	200009e0 	.word	0x200009e0
 8000904:	200009d4 	.word	0x200009d4
 8000908:	080068ac 	.word	0x080068ac
 800090c:	200009d8 	.word	0x200009d8
 8000910:	080068c4 	.word	0x080068c4
 8000914:	200009d1 	.word	0x200009d1
 8000918:	080068dc 	.word	0x080068dc
 800091c:	200005dc 	.word	0x200005dc
 8000920:	080068f8 	.word	0x080068f8
 8000924:	20000000 	.word	0x20000000
 8000928:	200009e8 	.word	0x200009e8
 800092c:	200009e4 	.word	0x200009e4

08000930 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	@ 0x50
 8000934:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2234      	movs	r2, #52	@ 0x34
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f005 fa24 	bl	8005d8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000954:	f002 f868 	bl	8002a28 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000958:	4b2c      	ldr	r3, [pc, #176]	@ (8000a0c <SystemClock_Config+0xdc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a0c <SystemClock_Config+0xdc>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	@ 0x40
 8000964:	4b29      	ldr	r3, [pc, #164]	@ (8000a0c <SystemClock_Config+0xdc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000970:	4b27      	ldr	r3, [pc, #156]	@ (8000a10 <SystemClock_Config+0xe0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000978:	4a25      	ldr	r2, [pc, #148]	@ (8000a10 <SystemClock_Config+0xe0>)
 800097a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <SystemClock_Config+0xe0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000990:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000994:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800099e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 80009a4:	2360      	movs	r3, #96	@ 0x60
 80009a6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 f895 	bl	8002ae8 <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80009c4:	f000 f9fc 	bl	8000dc0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009c8:	f002 f83e 	bl	8002a48 <HAL_PWREx_EnableOverDrive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80009d2:	f000 f9f5 	bl	8000dc0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2103      	movs	r1, #3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fb26 	bl	8003044 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 80009fe:	f000 f9df 	bl	8000dc0 <Error_Handler>
	}
}
 8000a02:	bf00      	nop
 8000a04:	3750      	adds	r7, #80	@ 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <MX_ETH_Init+0x84>)
 8000a1a:	4a20      	ldr	r2, [pc, #128]	@ (8000a9c <MX_ETH_Init+0x88>)
 8000a1c:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_ETH_Init+0x8c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_ETH_Init+0x8c>)
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <MX_ETH_Init+0x8c>)
 8000a2c:	22e1      	movs	r2, #225	@ 0xe1
 8000a2e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_ETH_Init+0x8c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <MX_ETH_Init+0x8c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <MX_ETH_Init+0x8c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_ETH_Init+0x84>)
 8000a44:	4a16      	ldr	r2, [pc, #88]	@ (8000aa0 <MX_ETH_Init+0x8c>)
 8000a46:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a48:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <MX_ETH_Init+0x84>)
 8000a4a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a4e:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_ETH_Init+0x84>)
 8000a52:	4a14      	ldr	r2, [pc, #80]	@ (8000aa4 <MX_ETH_Init+0x90>)
 8000a54:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <MX_ETH_Init+0x84>)
 8000a58:	4a13      	ldr	r2, [pc, #76]	@ (8000aa8 <MX_ETH_Init+0x94>)
 8000a5a:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_ETH_Init+0x84>)
 8000a5e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a62:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <MX_ETH_Init+0x84>)
 8000a66:	f000 fed5 	bl	8001814 <HAL_ETH_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ETH_Init+0x60>
	{
		Error_Handler();
 8000a70:	f000 f9a6 	bl	8000dc0 <Error_Handler>
	}

	memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a74:	2238      	movs	r2, #56	@ 0x38
 8000a76:	2100      	movs	r1, #0
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <MX_ETH_Init+0x98>)
 8000a7a:	f005 f987 	bl	8005d8c <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_ETH_Init+0x98>)
 8000a80:	2221      	movs	r2, #33	@ 0x21
 8000a82:	601a      	str	r2, [r3, #0]
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_ETH_Init+0x98>)
 8000a86:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a8a:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <MX_ETH_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000a24 	.word	0x20000a24
 8000a9c:	40028000 	.word	0x40028000
 8000aa0:	2000103c 	.word	0x2000103c
 8000aa4:	2000010c 	.word	0x2000010c
 8000aa8:	2000006c 	.word	0x2000006c
 8000aac:	200009ec 	.word	0x200009ec

08000ab0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ab6:	4a15      	ldr	r2, [pc, #84]	@ (8000b0c <MX_USART3_UART_Init+0x5c>)
 8000ab8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 2400;
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000abc:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8000ac0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_USART3_UART_Init+0x58>)
 8000af4:	f003 f8f4 	bl	8003ce0 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8000afe:	f000 f95f 	bl	8000dc0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000ad4 	.word	0x20000ad4
 8000b0c:	40004800 	.word	0x40004800

08000b10 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b14:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b1a:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1e:	2206      	movs	r2, #6
 8000b20:	711a      	strb	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	71da      	strb	r2, [r3, #7]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	719a      	strb	r2, [r3, #6]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	725a      	strb	r2, [r3, #9]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	729a      	strb	r2, [r3, #10]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	72da      	strb	r2, [r3, #11]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b40:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	731a      	strb	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	739a      	strb	r2, [r3, #14]
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	73da      	strb	r2, [r3, #15]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b54:	f001 fe2d 	bl	80027b2 <HAL_PCD_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USB_OTG_FS_PCD_Init+0x52>
	{
		Error_Handler();
 8000b5e:	f000 f92f 	bl	8000dc0 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000b5c 	.word	0x20000b5c

08000b6c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	@ 0x30
 8000b70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b47      	ldr	r3, [pc, #284]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a46      	ldr	r2, [pc, #280]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b44      	ldr	r3, [pc, #272]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a40      	ldr	r2, [pc, #256]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b38      	ldr	r3, [pc, #224]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a34      	ldr	r2, [pc, #208]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b32      	ldr	r3, [pc, #200]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a2e      	ldr	r2, [pc, #184]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfa:	4b29      	ldr	r3, [pc, #164]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a28      	ldr	r2, [pc, #160]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <MX_GPIO_Init+0x134>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c18:	4822      	ldr	r0, [pc, #136]	@ (8000ca4 <MX_GPIO_Init+0x138>)
 8000c1a:	f001 fdb1 	bl	8002780 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2140      	movs	r1, #64	@ 0x40
 8000c22:	4821      	ldr	r0, [pc, #132]	@ (8000ca8 <MX_GPIO_Init+0x13c>)
 8000c24:	f001 fdac 	bl	8002780 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c32:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481b      	ldr	r0, [pc, #108]	@ (8000cac <MX_GPIO_Init+0x140>)
 8000c40:	f001 fbf2 	bl	8002428 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c44:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <MX_GPIO_Init+0x138>)
 8000c5e:	f001 fbe3 	bl	8002428 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c62:	2340      	movs	r3, #64	@ 0x40
 8000c64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	480b      	ldr	r0, [pc, #44]	@ (8000ca8 <MX_GPIO_Init+0x13c>)
 8000c7a:	f001 fbd5 	bl	8002428 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_GPIO_Init+0x13c>)
 8000c92:	f001 fbc9 	bl	8002428 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c96:	bf00      	nop
 8000c98:	3730      	adds	r7, #48	@ 0x30
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40021800 	.word	0x40021800
 8000cac:	40020800 	.word	0x40020800

08000cb0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {  // Check if it's USART3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a37      	ldr	r2, [pc, #220]	@ (8000d9c <HAL_UART_RxCpltCallback+0xec>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d165      	bne.n	8000d90 <HAL_UART_RxCpltCallback+0xe0>
		ByteRxCount++;  // Increment for each received byte
 8000cc4:	4b36      	ldr	r3, [pc, #216]	@ (8000da0 <HAL_UART_RxCpltCallback+0xf0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a35      	ldr	r2, [pc, #212]	@ (8000da0 <HAL_UART_RxCpltCallback+0xf0>)
 8000ccc:	6013      	str	r3, [r2, #0]

		// Check for end of transmission
		if (rxBuffer[rxIndex] == '\r') {  // End character detected
 8000cce:	4b35      	ldr	r3, [pc, #212]	@ (8000da4 <HAL_UART_RxCpltCallback+0xf4>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <HAL_UART_RxCpltCallback+0xf8>)
 8000cd6:	5c9b      	ldrb	r3, [r3, r2]
 8000cd8:	2b0d      	cmp	r3, #13
 8000cda:	d113      	bne.n	8000d04 <HAL_UART_RxCpltCallback+0x54>
			dataReceived = 1;
 8000cdc:	4b33      	ldr	r3, [pc, #204]	@ (8000dac <HAL_UART_RxCpltCallback+0xfc>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
			// Write the remaining bytes also to the flash ( less than 4 bytes)
			HAL_FLASH_Unlock();
 8000ce2:	f001 f941 	bl	8001f68 <HAL_FLASH_Unlock>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, wordBuffer);
 8000ce6:	4b32      	ldr	r3, [pc, #200]	@ (8000db0 <HAL_UART_RxCpltCallback+0x100>)
 8000ce8:	6819      	ldr	r1, [r3, #0]
 8000cea:	4b32      	ldr	r3, [pc, #200]	@ (8000db4 <HAL_UART_RxCpltCallback+0x104>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	4691      	mov	r9, r2
 8000cf4:	4642      	mov	r2, r8
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f001 f8d9 	bl	8001eb0 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8000cfe:	f001 f955 	bl	8001fac <HAL_FLASH_Lock>
 8000d02:	e035      	b.n	8000d70 <HAL_UART_RxCpltCallback+0xc0>
		} else {
			// Accumulate bytes to form a 32-bit word
			wordBuffer |= (rxBuffer[rxIndex] << (byteCount * 8));
 8000d04:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <HAL_UART_RxCpltCallback+0xf4>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b27      	ldr	r3, [pc, #156]	@ (8000da8 <HAL_UART_RxCpltCallback+0xf8>)
 8000d0c:	5c9b      	ldrb	r3, [r3, r2]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <HAL_UART_RxCpltCallback+0x108>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b25      	ldr	r3, [pc, #148]	@ (8000db4 <HAL_UART_RxCpltCallback+0x104>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	4a24      	ldr	r2, [pc, #144]	@ (8000db4 <HAL_UART_RxCpltCallback+0x104>)
 8000d24:	6013      	str	r3, [r2, #0]
			byteCount++;
 8000d26:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <HAL_UART_RxCpltCallback+0x108>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <HAL_UART_RxCpltCallback+0x108>)
 8000d30:	701a      	strb	r2, [r3, #0]

			if (byteCount == 4)  // If 4 bytes are accumulated
 8000d32:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <HAL_UART_RxCpltCallback+0x108>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d11a      	bne.n	8000d70 <HAL_UART_RxCpltCallback+0xc0>
			{
				// Write 32-bit word to flash
				HAL_FLASH_Unlock();
 8000d3a:	f001 f915 	bl	8001f68 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, wordBuffer);
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <HAL_UART_RxCpltCallback+0x100>)
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_UART_RxCpltCallback+0x104>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2200      	movs	r2, #0
 8000d48:	461c      	mov	r4, r3
 8000d4a:	4615      	mov	r5, r2
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	462b      	mov	r3, r5
 8000d50:	2002      	movs	r0, #2
 8000d52:	f001 f8ad 	bl	8001eb0 <HAL_FLASH_Program>
				HAL_FLASH_Lock();
 8000d56:	f001 f929 	bl	8001fac <HAL_FLASH_Lock>

				flashAddress += 4;  // Move to the next flash address (4*8 = 32 bit)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <HAL_UART_RxCpltCallback+0x100>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3304      	adds	r3, #4
 8000d60:	4a13      	ldr	r2, [pc, #76]	@ (8000db0 <HAL_UART_RxCpltCallback+0x100>)
 8000d62:	6013      	str	r3, [r2, #0]
				byteCount = 0;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_UART_RxCpltCallback+0x108>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
				wordBuffer = 0;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_UART_RxCpltCallback+0x104>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
			}
		}


		// Reset index and re-enable UART interrupt
		if (++rxIndex >= BUFFER_SIZE)
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_UART_RxCpltCallback+0xf4>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_UART_RxCpltCallback+0xf4>)
 8000d7a:	701a      	strb	r2, [r3, #0]
			rxIndex = 0;

		HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxBuffer[rxIndex], 1);
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <HAL_UART_RxCpltCallback+0xf4>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_UART_RxCpltCallback+0xf8>)
 8000d84:	4413      	add	r3, r2
 8000d86:	2201      	movs	r2, #1
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <HAL_UART_RxCpltCallback+0x10c>)
 8000d8c:	f003 f87f 	bl	8003e8e <HAL_UART_Receive_IT>
	}
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004800 	.word	0x40004800
 8000da0:	200009d4 	.word	0x200009d4
 8000da4:	200009d0 	.word	0x200009d0
 8000da8:	200001e8 	.word	0x200001e8
 8000dac:	200009d1 	.word	0x200009d1
 8000db0:	20000000 	.word	0x20000000
 8000db4:	200009e4 	.word	0x200009e4
 8000db8:	200009e8 	.word	0x200009e8
 8000dbc:	20000ad4 	.word	0x20000ad4

08000dc0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <HAL_MspInit+0x44>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_MspInit+0x44>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_MspInit+0x44>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_MspInit+0x44>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08e      	sub	sp, #56	@ 0x38
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a4e      	ldr	r2, [pc, #312]	@ (8000f6c <HAL_ETH_MspInit+0x158>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	f040 8096 	bne.w	8000f64 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e38:	4b4d      	ldr	r3, [pc, #308]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e44:	4b4a      	ldr	r3, [pc, #296]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e4c:	623b      	str	r3, [r7, #32]
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	4b47      	ldr	r3, [pc, #284]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	4a46      	ldr	r2, [pc, #280]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5c:	4b44      	ldr	r3, [pc, #272]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	4a40      	ldr	r2, [pc, #256]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e74:	4b3e      	ldr	r3, [pc, #248]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e80:	4b3b      	ldr	r3, [pc, #236]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	4a3a      	ldr	r2, [pc, #232]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8c:	4b38      	ldr	r3, [pc, #224]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b35      	ldr	r3, [pc, #212]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	4a34      	ldr	r2, [pc, #208]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a2e      	ldr	r2, [pc, #184]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	4a28      	ldr	r2, [pc, #160]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ee0:	2332      	movs	r3, #50	@ 0x32
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef0:	230b      	movs	r3, #11
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481e      	ldr	r0, [pc, #120]	@ (8000f74 <HAL_ETH_MspInit+0x160>)
 8000efc:	f001 fa94 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f00:	2386      	movs	r3, #134	@ 0x86
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f10:	230b      	movs	r3, #11
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4817      	ldr	r0, [pc, #92]	@ (8000f78 <HAL_ETH_MspInit+0x164>)
 8000f1c:	f001 fa84 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f32:	230b      	movs	r3, #11
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480f      	ldr	r0, [pc, #60]	@ (8000f7c <HAL_ETH_MspInit+0x168>)
 8000f3e:	f001 fa73 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f42:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f54:	230b      	movs	r3, #11
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <HAL_ETH_MspInit+0x16c>)
 8000f60:	f001 fa62 	bl	8002428 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f64:	bf00      	nop
 8000f66:	3738      	adds	r7, #56	@ 0x38
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40028000 	.word	0x40028000
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40021800 	.word	0x40021800

08000f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0ae      	sub	sp, #184	@ 0xb8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2290      	movs	r2, #144	@ 0x90
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 fef1 	bl	8005d8c <memset>
  if(huart->Instance==USART3)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a26      	ldr	r2, [pc, #152]	@ (8001048 <HAL_UART_MspInit+0xc4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d144      	bne.n	800103e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fa64 	bl	8003490 <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fce:	f7ff fef7 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <HAL_UART_MspInit+0xc8>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800104c <HAL_UART_MspInit+0xc8>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fde:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <HAL_UART_MspInit+0xc8>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	4b18      	ldr	r3, [pc, #96]	@ (800104c <HAL_UART_MspInit+0xc8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a17      	ldr	r2, [pc, #92]	@ (800104c <HAL_UART_MspInit+0xc8>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_UART_MspInit+0xc8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001002:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800101c:	2307      	movs	r3, #7
 800101e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001022:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001026:	4619      	mov	r1, r3
 8001028:	4809      	ldr	r0, [pc, #36]	@ (8001050 <HAL_UART_MspInit+0xcc>)
 800102a:	f001 f9fd 	bl	8002428 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2027      	movs	r0, #39	@ 0x27
 8001034:	f000 fb25 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001038:	2027      	movs	r0, #39	@ 0x27
 800103a:	f000 fb3e 	bl	80016ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800103e:	bf00      	nop
 8001040:	37b8      	adds	r7, #184	@ 0xb8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40004800 	.word	0x40004800
 800104c:	40023800 	.word	0x40023800
 8001050:	40020c00 	.word	0x40020c00

08001054 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0ae      	sub	sp, #184	@ 0xb8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2290      	movs	r2, #144	@ 0x90
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f004 fe89 	bl	8005d8c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001082:	d159      	bne.n	8001138 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001084:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001088:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4618      	mov	r0, r3
 8001096:	f002 f9fb 	bl	8003490 <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010a0:	f7ff fe8e 	bl	8000dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <HAL_PCD_MspInit+0xec>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	4a25      	ldr	r2, [pc, #148]	@ (8001140 <HAL_PCD_MspInit+0xec>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b0:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <HAL_PCD_MspInit+0xec>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010bc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80010c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010d6:	230a      	movs	r3, #10
 80010d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4818      	ldr	r0, [pc, #96]	@ (8001144 <HAL_PCD_MspInit+0xf0>)
 80010e4:	f001 f9a0 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001100:	4619      	mov	r1, r3
 8001102:	4810      	ldr	r0, [pc, #64]	@ (8001144 <HAL_PCD_MspInit+0xf0>)
 8001104:	f001 f990 	bl	8002428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001108:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <HAL_PCD_MspInit+0xec>)
 800110a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800110c:	4a0c      	ldr	r2, [pc, #48]	@ (8001140 <HAL_PCD_MspInit+0xec>)
 800110e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001112:	6353      	str	r3, [r2, #52]	@ 0x34
 8001114:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_PCD_MspInit+0xec>)
 8001116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <HAL_PCD_MspInit+0xec>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001124:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <HAL_PCD_MspInit+0xec>)
 8001126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112a:	6453      	str	r3, [r2, #68]	@ 0x44
 800112c:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <HAL_PCD_MspInit+0xec>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001138:	bf00      	nop
 800113a:	37b8      	adds	r7, #184	@ 0xb8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <NMI_Handler+0x4>

08001150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <MemManage_Handler+0x4>

08001160 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <UsageFault_Handler+0x4>

08001170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 f951 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <USART3_IRQHandler+0x10>)
 80011ae:	f002 feb3 	bl	8003f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000ad4 	.word	0x20000ad4

080011bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <ITM_SendChar+0x48>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <ITM_SendChar+0x48>)
 80011cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80011d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80011d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <ITM_SendChar+0x4c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <ITM_SendChar+0x4c>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80011de:	bf00      	nop
 80011e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f8      	beq.n	80011e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80011ee:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	6013      	str	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000edfc 	.word	0xe000edfc
 8001208:	e0000e00 	.word	0xe0000e00

0800120c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e00a      	b.n	8001234 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800121e:	f3af 8000 	nop.w
 8001222:	4601      	mov	r1, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	60ba      	str	r2, [r7, #8]
 800122a:	b2ca      	uxtb	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dbf0      	blt.n	800121e <_read+0x12>
  }

  return len;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e009      	b.n	800126c <_write+0x26>
  {
    //__io_putchar(*ptr++);

    ITM_SendChar(*ptr++);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffab 	bl	80011bc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf1      	blt.n	8001258 <_write+0x12>
  }
  return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_close>:

int _close(int file)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a6:	605a      	str	r2, [r3, #4]
  return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_isatty>:

int _isatty(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f0:	4a14      	ldr	r2, [pc, #80]	@ (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001318:	f004 fd86 	bl	8005e28 <__errno>
 800131c:	4603      	mov	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a05      	ldr	r2, [pc, #20]	@ (800134c <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20080000 	.word	0x20080000
 8001348:	00000400 	.word	0x00000400
 800134c:	20001044 	.word	0x20001044
 8001350:	200011b8 	.word	0x200011b8

08001354 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800137c:	f7ff ffea 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	@ (80013b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	@ (80013bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f004 fd45 	bl	8005e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff f9e9 	bl	8000780 <main>
  bx  lr    
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013bc:	08006970 	.word	0x08006970
  ldr r2, =_sbss
 80013c0:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 80013c4:	200011b4 	.word	0x200011b4

080013c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC_IRQHandler>

080013ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ce:	2003      	movs	r0, #3
 80013d0:	f000 f94c 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f000 f805 	bl	80013e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013da:	f7ff fcf7 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_InitTick+0x54>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_InitTick+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f967 	bl	80016d6 <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f000 f92f 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	@ (8001440 <HAL_InitTick+0x5c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000004 	.word	0x20000004
 800143c:	2000000c 	.word	0x2000000c
 8001440:	20000008 	.word	0x20000008

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_IncTick+0x20>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_IncTick+0x24>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <HAL_IncTick+0x24>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2000000c 	.word	0x2000000c
 8001468:	20001048 	.word	0x20001048

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	@ (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20001048 	.word	0x20001048

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff ffee 	bl	800146c <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d005      	beq.n	80014aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149e:	4b0a      	ldr	r3, [pc, #40]	@ (80014c8 <HAL_Delay+0x44>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014aa:	bf00      	nop
 80014ac:	f7ff ffde 	bl	800146c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d8f7      	bhi.n	80014ac <HAL_Delay+0x28>
  {
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000000c 	.word	0x2000000c

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <__NVIC_SetPriorityGrouping+0x40>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	@ (800150c <__NVIC_SetPriorityGrouping+0x40>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	05fa0000 	.word	0x05fa0000

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	@ (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db0b      	blt.n	800155a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f003 021f 	and.w	r2, r3, #31
 8001548:	4907      	ldr	r1, [pc, #28]	@ (8001568 <__NVIC_EnableIRQ+0x38>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	2001      	movs	r0, #1
 8001552:	fa00 f202 	lsl.w	r2, r0, r2
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	@ (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	@ (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	@ 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	@ 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f7ff ff8e 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff29 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff3e 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff8e 	bl	80015c0 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5d 	bl	800156c <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff31 	bl	8001530 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa2 	bl	8001628 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff feb6 	bl	800146c <HAL_GetTick>
 8001700:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d008      	beq.n	8001720 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2280      	movs	r2, #128	@ 0x80
 8001712:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e052      	b.n	80017c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0216 	bic.w	r2, r2, #22
 800172e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800173e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	2b00      	cmp	r3, #0
 8001746:	d103      	bne.n	8001750 <HAL_DMA_Abort+0x62>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800174c:	2b00      	cmp	r3, #0
 800174e:	d007      	beq.n	8001760 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0208 	bic.w	r2, r2, #8
 800175e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001770:	e013      	b.n	800179a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001772:	f7ff fe7b 	bl	800146c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b05      	cmp	r3, #5
 800177e:	d90c      	bls.n	800179a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2220      	movs	r2, #32
 8001784:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e015      	b.n	80017c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1e4      	bne.n	8001772 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ac:	223f      	movs	r2, #63	@ 0x3f
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d004      	beq.n	80017ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2280      	movs	r2, #128	@ 0x80
 80017e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e00c      	b.n	8001806 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2205      	movs	r2, #5
 80017f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e086      	b.n	8001934 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800182c:	2b00      	cmp	r3, #0
 800182e:	d106      	bne.n	800183e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2223      	movs	r2, #35	@ 0x23
 8001834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff faeb 	bl	8000e14 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <HAL_ETH_Init+0x128>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	4a3e      	ldr	r2, [pc, #248]	@ (800193c <HAL_ETH_Init+0x128>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001848:	6453      	str	r3, [r2, #68]	@ 0x44
 800184a:	4b3c      	ldr	r3, [pc, #240]	@ (800193c <HAL_ETH_Init+0x128>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001856:	4b3a      	ldr	r3, [pc, #232]	@ (8001940 <HAL_ETH_Init+0x12c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a39      	ldr	r2, [pc, #228]	@ (8001940 <HAL_ETH_Init+0x12c>)
 800185c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001860:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001862:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_ETH_Init+0x12c>)
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4935      	ldr	r1, [pc, #212]	@ (8001940 <HAL_ETH_Init+0x12c>)
 800186c:	4313      	orrs	r3, r2
 800186e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001870:	4b33      	ldr	r3, [pc, #204]	@ (8001940 <HAL_ETH_Init+0x12c>)
 8001872:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800188a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800188c:	f7ff fdee 	bl	800146c <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001892:	e011      	b.n	80018b8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001894:	f7ff fdea 	bl	800146c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018a2:	d909      	bls.n	80018b8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2204      	movs	r2, #4
 80018a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	22e0      	movs	r2, #224	@ 0xe0
 80018b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e03d      	b.n	8001934 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1e4      	bne.n	8001894 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f97a 	bl	8001bc4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fa25 	bl	8001d20 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fa7b 	bl	8001dd2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	461a      	mov	r2, r3
 80018e2:	2100      	movs	r1, #0
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f9e3 	bl	8001cb0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80018f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_ETH_Init+0x130>)
 8001908:	430b      	orrs	r3, r1
 800190a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800191e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2210      	movs	r2, #16
 800192e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	40013800 	.word	0x40013800
 8001944:	00020060 	.word	0x00020060

08001948 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4b53      	ldr	r3, [pc, #332]	@ (8001aac <ETH_SetMACConfig+0x164>)
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	7b9b      	ldrb	r3, [r3, #14]
 8001966:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	7c12      	ldrb	r2, [r2, #16]
 800196c:	2a00      	cmp	r2, #0
 800196e:	d102      	bne.n	8001976 <ETH_SetMACConfig+0x2e>
 8001970:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001974:	e000      	b.n	8001978 <ETH_SetMACConfig+0x30>
 8001976:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001978:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	7c52      	ldrb	r2, [r2, #17]
 800197e:	2a00      	cmp	r2, #0
 8001980:	d102      	bne.n	8001988 <ETH_SetMACConfig+0x40>
 8001982:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001986:	e000      	b.n	800198a <ETH_SetMACConfig+0x42>
 8001988:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800198a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001990:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	7fdb      	ldrb	r3, [r3, #31]
 8001996:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001998:	431a      	orrs	r2, r3
                        macconf->Speed |
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800199e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	7f92      	ldrb	r2, [r2, #30]
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	d102      	bne.n	80019ae <ETH_SetMACConfig+0x66>
 80019a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ac:	e000      	b.n	80019b0 <ETH_SetMACConfig+0x68>
 80019ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80019b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	7f1b      	ldrb	r3, [r3, #28]
 80019b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80019be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	791b      	ldrb	r3, [r3, #4]
 80019c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80019c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019ce:	2a00      	cmp	r2, #0
 80019d0:	d102      	bne.n	80019d8 <ETH_SetMACConfig+0x90>
 80019d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019d6:	e000      	b.n	80019da <ETH_SetMACConfig+0x92>
 80019d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80019da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	7bdb      	ldrb	r3, [r3, #15]
 80019e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80019e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80019f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80019f2:	4313      	orrs	r3, r2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7ff fd3a 	bl	8001484 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001a26:	4013      	ands	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a2e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	d101      	bne.n	8001a3e <ETH_SetMACConfig+0xf6>
 8001a3a:	2280      	movs	r2, #128	@ 0x80
 8001a3c:	e000      	b.n	8001a40 <ETH_SetMACConfig+0xf8>
 8001a3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a40:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001a4e:	2a01      	cmp	r2, #1
 8001a50:	d101      	bne.n	8001a56 <ETH_SetMACConfig+0x10e>
 8001a52:	2208      	movs	r2, #8
 8001a54:	e000      	b.n	8001a58 <ETH_SetMACConfig+0x110>
 8001a56:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a58:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001a60:	2a01      	cmp	r2, #1
 8001a62:	d101      	bne.n	8001a68 <ETH_SetMACConfig+0x120>
 8001a64:	2204      	movs	r2, #4
 8001a66:	e000      	b.n	8001a6a <ETH_SetMACConfig+0x122>
 8001a68:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001a72:	2a01      	cmp	r2, #1
 8001a74:	d101      	bne.n	8001a7a <ETH_SetMACConfig+0x132>
 8001a76:	2202      	movs	r2, #2
 8001a78:	e000      	b.n	8001a7c <ETH_SetMACConfig+0x134>
 8001a7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff fcf5 	bl	8001484 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	fd20810f 	.word	0xfd20810f

08001ab0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <ETH_SetDMAConfig+0x110>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7b1b      	ldrb	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <ETH_SetDMAConfig+0x2c>
 8001ad6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ada:	e000      	b.n	8001ade <ETH_SetDMAConfig+0x2e>
 8001adc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	7b5b      	ldrb	r3, [r3, #13]
 8001ae2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ae4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	7f52      	ldrb	r2, [r2, #29]
 8001aea:	2a00      	cmp	r2, #0
 8001aec:	d102      	bne.n	8001af4 <ETH_SetDMAConfig+0x44>
 8001aee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001af2:	e000      	b.n	8001af6 <ETH_SetDMAConfig+0x46>
 8001af4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001af6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7b9b      	ldrb	r3, [r3, #14]
 8001afc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001afe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	7f1b      	ldrb	r3, [r3, #28]
 8001b0a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b0c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	7f9b      	ldrb	r3, [r3, #30]
 8001b12:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b14:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b1a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b22:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b34:	461a      	mov	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff fc9c 	bl	8001484 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b54:	461a      	mov	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	791b      	ldrb	r3, [r3, #4]
 8001b5e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b64:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b6a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b70:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b78:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b7a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b80:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b82:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b88:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b96:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff fc6d 	bl	8001484 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	f8de3f23 	.word	0xf8de3f23

08001bc4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0a6      	sub	sp, #152	@ 0x98
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c06:	2300      	movs	r3, #0
 8001c08:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c30:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c3e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c42:	4619      	mov	r1, r3
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fe7f 	bl	8001948 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c76:	2301      	movs	r3, #1
 8001c78:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c7e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c80:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c84:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c8a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff05 	bl	8001ab0 <ETH_SetDMAConfig>
}
 8001ca6:	bf00      	nop
 8001ca8:	3798      	adds	r7, #152	@ 0x98
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3305      	adds	r3, #5
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	3204      	adds	r2, #4
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <ETH_MACAddressConfig+0x68>)
 8001cd2:	4413      	add	r3, r2
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3303      	adds	r3, #3
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	061a      	lsls	r2, r3, #24
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	041b      	lsls	r3, r3, #16
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	7812      	ldrb	r2, [r2, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <ETH_MACAddressConfig+0x6c>)
 8001d02:	4413      	add	r3, r2
 8001d04:	461a      	mov	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	6013      	str	r3, [r2, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40028040 	.word	0x40028040
 8001d1c:	40028044 	.word	0x40028044

08001d20 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e03e      	b.n	8001dac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68d9      	ldr	r1, [r3, #12]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	3206      	adds	r2, #6
 8001d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d80c      	bhi.n	8001d90 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68d9      	ldr	r1, [r3, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	e004      	b.n	8001d9a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	461a      	mov	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d9bd      	bls.n	8001d2e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc4:	611a      	str	r2, [r3, #16]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e048      	b.n	8001e72 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6919      	ldr	r1, [r3, #16]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	3212      	adds	r2, #18
 8001e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d80c      	bhi.n	8001e62 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6919      	ldr	r1, [r3, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	e004      	b.n	8001e6c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d9b3      	bls.n	8001de0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea2:	60da      	str	r2, [r3, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ec2:	4b27      	ldr	r3, [pc, #156]	@ (8001f60 <HAL_FLASH_Program+0xb0>)
 8001ec4:	7d1b      	ldrb	r3, [r3, #20]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_FLASH_Program+0x1e>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e043      	b.n	8001f56 <HAL_FLASH_Program+0xa6>
 8001ece:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <HAL_FLASH_Program+0xb0>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ed4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ed8:	f000 f878 	bl	8001fcc <FLASH_WaitForLastOperation>
 8001edc:	4603      	mov	r3, r0
 8001ede:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d133      	bne.n	8001f4e <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d823      	bhi.n	8001f34 <HAL_FLASH_Program+0x84>
 8001eec:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef4 <HAL_FLASH_Program+0x44>)
 8001eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef2:	bf00      	nop
 8001ef4:	08001f05 	.word	0x08001f05
 8001ef8:	08001f11 	.word	0x08001f11
 8001efc:	08001f1d 	.word	0x08001f1d
 8001f00:	08001f29 	.word	0x08001f29
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001f04:	783b      	ldrb	r3, [r7, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	68b8      	ldr	r0, [r7, #8]
 8001f0a:	f000 f921 	bl	8002150 <FLASH_Program_Byte>
        break;
 8001f0e:	e012      	b.n	8001f36 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001f10:	883b      	ldrh	r3, [r7, #0]
 8001f12:	4619      	mov	r1, r3
 8001f14:	68b8      	ldr	r0, [r7, #8]
 8001f16:	f000 f8f5 	bl	8002104 <FLASH_Program_HalfWord>
        break;
 8001f1a:	e00c      	b.n	8001f36 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	68b8      	ldr	r0, [r7, #8]
 8001f22:	f000 f8c9 	bl	80020b8 <FLASH_Program_Word>
        break;
 8001f26:	e006      	b.n	8001f36 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f2c:	68b8      	ldr	r0, [r7, #8]
 8001f2e:	f000 f88d 	bl	800204c <FLASH_Program_DoubleWord>
        break;
 8001f32:	e000      	b.n	8001f36 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8001f34:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f36:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f3a:	f000 f847 	bl	8001fcc <FLASH_WaitForLastOperation>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <HAL_FLASH_Program+0xb4>)
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <HAL_FLASH_Program+0xb4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f4e:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <HAL_FLASH_Program+0xb0>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	751a      	strb	r2, [r3, #20]

  return status;
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000104c 	.word	0x2000104c
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f72:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da0b      	bge.n	8001f92 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f7c:	4a09      	ldr	r2, [pc, #36]	@ (8001fa4 <HAL_FLASH_Unlock+0x3c>)
 8001f7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f80:	4b07      	ldr	r3, [pc, #28]	@ (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f82:	4a09      	ldr	r2, [pc, #36]	@ (8001fa8 <HAL_FLASH_Unlock+0x40>)
 8001f84:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_FLASH_Unlock+0x38>)
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da01      	bge.n	8001f92 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001f92:	79fb      	ldrb	r3, [r7, #7]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40023c00 	.word	0x40023c00
 8001fa4:	45670123 	.word	0x45670123
 8001fa8:	cdef89ab 	.word	0xcdef89ab

08001fac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_FLASH_Lock+0x1c>)
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_FLASH_Lock+0x1c>)
 8001fb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fba:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40023c00 	.word	0x40023c00

08001fcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <FLASH_WaitForLastOperation+0x78>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fde:	f7ff fa45 	bl	800146c <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001fe4:	e010      	b.n	8002008 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d00c      	beq.n	8002008 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <FLASH_WaitForLastOperation+0x38>
 8001ff4:	f7ff fa3a 	bl	800146c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d201      	bcs.n	8002008 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e019      	b.n	800203c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002008:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <FLASH_WaitForLastOperation+0x7c>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e8      	bne.n	8001fe6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002014:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <FLASH_WaitForLastOperation+0x7c>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002020:	f000 f8ba 	bl	8002198 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e009      	b.n	800203c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002028:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <FLASH_WaitForLastOperation+0x7c>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <FLASH_WaitForLastOperation+0x7c>)
 8002036:	2201      	movs	r2, #1
 8002038:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
  
}  
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	2000104c 	.word	0x2000104c
 8002048:	40023c00 	.word	0x40023c00

0800204c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002058:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <FLASH_Program_DoubleWord+0x68>)
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	4a15      	ldr	r2, [pc, #84]	@ (80020b4 <FLASH_Program_DoubleWord+0x68>)
 800205e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002064:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <FLASH_Program_DoubleWord+0x68>)
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <FLASH_Program_DoubleWord+0x68>)
 800206a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800206e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002070:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <FLASH_Program_DoubleWord+0x68>)
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	4a0f      	ldr	r2, [pc, #60]	@ (80020b4 <FLASH_Program_DoubleWord+0x68>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002082:	f3bf 8f6f 	isb	sy
}
 8002086:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	000a      	movs	r2, r1
 8002096:	2300      	movs	r3, #0
 8002098:	68f9      	ldr	r1, [r7, #12]
 800209a:	3104      	adds	r1, #4
 800209c:	4613      	mov	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020a0:	f3bf 8f4f 	dsb	sy
}
 80020a4:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80020c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <FLASH_Program_Word+0x48>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002100 <FLASH_Program_Word+0x48>)
 80020c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <FLASH_Program_Word+0x48>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002100 <FLASH_Program_Word+0x48>)
 80020d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <FLASH_Program_Word+0x48>)
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	4a08      	ldr	r2, [pc, #32]	@ (8002100 <FLASH_Program_Word+0x48>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80020ec:	f3bf 8f4f 	dsb	sy
}
 80020f0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023c00 	.word	0x40023c00

08002104 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <FLASH_Program_HalfWord+0x48>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <FLASH_Program_HalfWord+0x48>)
 8002116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800211a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <FLASH_Program_HalfWord+0x48>)
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <FLASH_Program_HalfWord+0x48>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002126:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <FLASH_Program_HalfWord+0x48>)
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	4a07      	ldr	r2, [pc, #28]	@ (800214c <FLASH_Program_HalfWord+0x48>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800213a:	f3bf 8f4f 	dsb	sy
}
 800213e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40023c00 	.word	0x40023c00

08002150 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800215c:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <FLASH_Program_Byte+0x44>)
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	4a0c      	ldr	r2, [pc, #48]	@ (8002194 <FLASH_Program_Byte+0x44>)
 8002162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002166:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002168:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <FLASH_Program_Byte+0x44>)
 800216a:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <FLASH_Program_Byte+0x44>)
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <FLASH_Program_Byte+0x44>)
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	4a07      	ldr	r2, [pc, #28]	@ (8002194 <FLASH_Program_Byte+0x44>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002182:	f3bf 8f4f 	dsb	sy
}
 8002186:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	40023c00 	.word	0x40023c00

08002198 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800219c:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <FLASH_SetErrorCode+0x8c>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80021a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002228 <FLASH_SetErrorCode+0x90>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002228 <FLASH_SetErrorCode+0x90>)
 80021b2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <FLASH_SetErrorCode+0x8c>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021c0:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <FLASH_SetErrorCode+0x90>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f043 0310 	orr.w	r3, r3, #16
 80021c8:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <FLASH_SetErrorCode+0x90>)
 80021ca:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <FLASH_SetErrorCode+0x8c>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021d8:	4b13      	ldr	r3, [pc, #76]	@ (8002228 <FLASH_SetErrorCode+0x90>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	4a11      	ldr	r2, [pc, #68]	@ (8002228 <FLASH_SetErrorCode+0x90>)
 80021e2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80021e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <FLASH_SetErrorCode+0x8c>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80021f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002228 <FLASH_SetErrorCode+0x90>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002228 <FLASH_SetErrorCode+0x90>)
 80021fa:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <FLASH_SetErrorCode+0x8c>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002208:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <FLASH_SetErrorCode+0x90>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	4a05      	ldr	r2, [pc, #20]	@ (8002228 <FLASH_SetErrorCode+0x90>)
 8002212:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <FLASH_SetErrorCode+0x8c>)
 8002216:	22f2      	movs	r2, #242	@ 0xf2
 8002218:	60da      	str	r2, [r3, #12]
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40023c00 	.word	0x40023c00
 8002228:	2000104c 	.word	0x2000104c

0800222c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800223e:	4b30      	ldr	r3, [pc, #192]	@ (8002300 <HAL_FLASHEx_Erase+0xd4>)
 8002240:	7d1b      	ldrb	r3, [r3, #20]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_FLASHEx_Erase+0x1e>
 8002246:	2302      	movs	r3, #2
 8002248:	e056      	b.n	80022f8 <HAL_FLASHEx_Erase+0xcc>
 800224a:	4b2d      	ldr	r3, [pc, #180]	@ (8002300 <HAL_FLASHEx_Erase+0xd4>)
 800224c:	2201      	movs	r2, #1
 800224e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002250:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002254:	f7ff feba 	bl	8001fcc <FLASH_WaitForLastOperation>
 8002258:	4603      	mov	r3, r0
 800225a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d146      	bne.n	80022f0 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d115      	bne.n	800229e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f000 f844 	bl	800230c <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002284:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002288:	f7ff fea0 	bl	8001fcc <FLASH_WaitForLastOperation>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002290:	4b1c      	ldr	r3, [pc, #112]	@ (8002304 <HAL_FLASHEx_Erase+0xd8>)
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	491b      	ldr	r1, [pc, #108]	@ (8002304 <HAL_FLASHEx_Erase+0xd8>)
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HAL_FLASHEx_Erase+0xdc>)
 8002298:	4013      	ands	r3, r2
 800229a:	610b      	str	r3, [r1, #16]
 800229c:	e028      	b.n	80022f0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	e01c      	b.n	80022e0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4619      	mov	r1, r3
 80022ae:	68b8      	ldr	r0, [r7, #8]
 80022b0:	f000 f868 	bl	8002384 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022b8:	f7ff fe88 	bl	8001fcc <FLASH_WaitForLastOperation>
 80022bc:	4603      	mov	r3, r0
 80022be:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80022c0:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <HAL_FLASHEx_Erase+0xd8>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002304 <HAL_FLASHEx_Erase+0xd8>)
 80022c6:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80022ca:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	601a      	str	r2, [r3, #0]
          break;
 80022d8:	e00a      	b.n	80022f0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3301      	adds	r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4413      	add	r3, r2
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d3da      	bcc.n	80022a6 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <HAL_FLASHEx_Erase+0xd4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	751a      	strb	r2, [r3, #20]

  return status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000104c 	.word	0x2000104c
 8002304:	40023c00 	.word	0x40023c00
 8002308:	ffff7ffb 	.word	0xffff7ffb

0800230c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8002318:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <FLASH_MassErase+0x74>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	4a18      	ldr	r2, [pc, #96]	@ (8002380 <FLASH_MassErase+0x74>)
 800231e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002322:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d107      	bne.n	800233a <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <FLASH_MassErase+0x74>)
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	4914      	ldr	r1, [pc, #80]	@ (8002380 <FLASH_MassErase+0x74>)
 8002330:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002334:	4313      	orrs	r3, r2
 8002336:	610b      	str	r3, [r1, #16]
 8002338:	e00f      	b.n	800235a <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d106      	bne.n	800234e <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <FLASH_MassErase+0x74>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	4a0e      	ldr	r2, [pc, #56]	@ (8002380 <FLASH_MassErase+0x74>)
 8002346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800234a:	6113      	str	r3, [r2, #16]
 800234c:	e005      	b.n	800235a <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 800234e:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <FLASH_MassErase+0x74>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	4a0b      	ldr	r2, [pc, #44]	@ (8002380 <FLASH_MassErase+0x74>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <FLASH_MassErase+0x74>)
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	4313      	orrs	r3, r2
 8002364:	4a06      	ldr	r2, [pc, #24]	@ (8002380 <FLASH_MassErase+0x74>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800236c:	f3bf 8f4f 	dsb	sy
}
 8002370:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00

08002384 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	e010      	b.n	80023c2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d103      	bne.n	80023ae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80023a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e009      	b.n	80023c2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d103      	bne.n	80023bc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80023b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	e002      	b.n	80023c2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80023bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023c0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b0b      	cmp	r3, #11
 80023c6:	d902      	bls.n	80023ce <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <FLASH_Erase_Sector+0xa0>)
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <FLASH_Erase_Sector+0xa0>)
 80023d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80023da:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <FLASH_Erase_Sector+0xa0>)
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	4911      	ldr	r1, [pc, #68]	@ (8002424 <FLASH_Erase_Sector+0xa0>)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80023e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <FLASH_Erase_Sector+0xa0>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002424 <FLASH_Erase_Sector+0xa0>)
 80023ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80023f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80023f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <FLASH_Erase_Sector+0xa0>)
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	4a09      	ldr	r2, [pc, #36]	@ (8002424 <FLASH_Erase_Sector+0xa0>)
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <FLASH_Erase_Sector+0xa0>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	4a06      	ldr	r2, [pc, #24]	@ (8002424 <FLASH_Erase_Sector+0xa0>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002410:	f3bf 8f4f 	dsb	sy
}
 8002414:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023c00 	.word	0x40023c00

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e175      	b.n	8002734 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	f040 8164 	bne.w	800272e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d005      	beq.n	800247e <HAL_GPIO_Init+0x56>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d130      	bne.n	80024e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0201 	and.w	r2, r3, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d017      	beq.n	800251c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d123      	bne.n	8002570 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	08da      	lsrs	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80be 	beq.w	800272e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	4b66      	ldr	r3, [pc, #408]	@ (800274c <HAL_GPIO_Init+0x324>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	4a65      	ldr	r2, [pc, #404]	@ (800274c <HAL_GPIO_Init+0x324>)
 80025b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025be:	4b63      	ldr	r3, [pc, #396]	@ (800274c <HAL_GPIO_Init+0x324>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025ca:	4a61      	ldr	r2, [pc, #388]	@ (8002750 <HAL_GPIO_Init+0x328>)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	3302      	adds	r3, #2
 80025d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	220f      	movs	r2, #15
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a58      	ldr	r2, [pc, #352]	@ (8002754 <HAL_GPIO_Init+0x32c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d037      	beq.n	8002666 <HAL_GPIO_Init+0x23e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a57      	ldr	r2, [pc, #348]	@ (8002758 <HAL_GPIO_Init+0x330>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d031      	beq.n	8002662 <HAL_GPIO_Init+0x23a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a56      	ldr	r2, [pc, #344]	@ (800275c <HAL_GPIO_Init+0x334>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d02b      	beq.n	800265e <HAL_GPIO_Init+0x236>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a55      	ldr	r2, [pc, #340]	@ (8002760 <HAL_GPIO_Init+0x338>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d025      	beq.n	800265a <HAL_GPIO_Init+0x232>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a54      	ldr	r2, [pc, #336]	@ (8002764 <HAL_GPIO_Init+0x33c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01f      	beq.n	8002656 <HAL_GPIO_Init+0x22e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a53      	ldr	r2, [pc, #332]	@ (8002768 <HAL_GPIO_Init+0x340>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d019      	beq.n	8002652 <HAL_GPIO_Init+0x22a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a52      	ldr	r2, [pc, #328]	@ (800276c <HAL_GPIO_Init+0x344>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_GPIO_Init+0x226>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a51      	ldr	r2, [pc, #324]	@ (8002770 <HAL_GPIO_Init+0x348>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00d      	beq.n	800264a <HAL_GPIO_Init+0x222>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a50      	ldr	r2, [pc, #320]	@ (8002774 <HAL_GPIO_Init+0x34c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <HAL_GPIO_Init+0x21e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4f      	ldr	r2, [pc, #316]	@ (8002778 <HAL_GPIO_Init+0x350>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_GPIO_Init+0x21a>
 800263e:	2309      	movs	r3, #9
 8002640:	e012      	b.n	8002668 <HAL_GPIO_Init+0x240>
 8002642:	230a      	movs	r3, #10
 8002644:	e010      	b.n	8002668 <HAL_GPIO_Init+0x240>
 8002646:	2308      	movs	r3, #8
 8002648:	e00e      	b.n	8002668 <HAL_GPIO_Init+0x240>
 800264a:	2307      	movs	r3, #7
 800264c:	e00c      	b.n	8002668 <HAL_GPIO_Init+0x240>
 800264e:	2306      	movs	r3, #6
 8002650:	e00a      	b.n	8002668 <HAL_GPIO_Init+0x240>
 8002652:	2305      	movs	r3, #5
 8002654:	e008      	b.n	8002668 <HAL_GPIO_Init+0x240>
 8002656:	2304      	movs	r3, #4
 8002658:	e006      	b.n	8002668 <HAL_GPIO_Init+0x240>
 800265a:	2303      	movs	r3, #3
 800265c:	e004      	b.n	8002668 <HAL_GPIO_Init+0x240>
 800265e:	2302      	movs	r3, #2
 8002660:	e002      	b.n	8002668 <HAL_GPIO_Init+0x240>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_GPIO_Init+0x240>
 8002666:	2300      	movs	r3, #0
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	f002 0203 	and.w	r2, r2, #3
 800266e:	0092      	lsls	r2, r2, #2
 8002670:	4093      	lsls	r3, r2
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002678:	4935      	ldr	r1, [pc, #212]	@ (8002750 <HAL_GPIO_Init+0x328>)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002686:	4b3d      	ldr	r3, [pc, #244]	@ (800277c <HAL_GPIO_Init+0x354>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026aa:	4a34      	ldr	r2, [pc, #208]	@ (800277c <HAL_GPIO_Init+0x354>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b0:	4b32      	ldr	r3, [pc, #200]	@ (800277c <HAL_GPIO_Init+0x354>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d4:	4a29      	ldr	r2, [pc, #164]	@ (800277c <HAL_GPIO_Init+0x354>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026da:	4b28      	ldr	r3, [pc, #160]	@ (800277c <HAL_GPIO_Init+0x354>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fe:	4a1f      	ldr	r2, [pc, #124]	@ (800277c <HAL_GPIO_Init+0x354>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002704:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <HAL_GPIO_Init+0x354>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002728:	4a14      	ldr	r2, [pc, #80]	@ (800277c <HAL_GPIO_Init+0x354>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b0f      	cmp	r3, #15
 8002738:	f67f ae86 	bls.w	8002448 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3724      	adds	r7, #36	@ 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40013800 	.word	0x40013800
 8002754:	40020000 	.word	0x40020000
 8002758:	40020400 	.word	0x40020400
 800275c:	40020800 	.word	0x40020800
 8002760:	40020c00 	.word	0x40020c00
 8002764:	40021000 	.word	0x40021000
 8002768:	40021400 	.word	0x40021400
 800276c:	40021800 	.word	0x40021800
 8002770:	40021c00 	.word	0x40021c00
 8002774:	40022000 	.word	0x40022000
 8002778:	40022400 	.word	0x40022400
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800279c:	e003      	b.n	80027a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	041a      	lsls	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	619a      	str	r2, [r3, #24]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af02      	add	r7, sp, #8
 80027b8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e108      	b.n	80029d6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fc38 	bl	8001054 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2203      	movs	r2, #3
 80027e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027f2:	d102      	bne.n	80027fa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 fe24 	bl	800544c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7c1a      	ldrb	r2, [r3, #16]
 800280c:	f88d 2000 	strb.w	r2, [sp]
 8002810:	3304      	adds	r3, #4
 8002812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002814:	f002 fdc0 	bl	8005398 <USB_CoreInit>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e0d5      	b.n	80029d6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fe1c 	bl	800546e <USB_SetCurrentMode>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0c6      	b.n	80029d6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002848:	2300      	movs	r3, #0
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e04a      	b.n	80028e4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	3315      	adds	r3, #21
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	3314      	adds	r3, #20
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	b298      	uxth	r0, r3
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	332e      	adds	r3, #46	@ 0x2e
 800288a:	4602      	mov	r2, r0
 800288c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3318      	adds	r3, #24
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	331c      	adds	r3, #28
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3320      	adds	r3, #32
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3324      	adds	r3, #36	@ 0x24
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	3301      	adds	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	791b      	ldrb	r3, [r3, #4]
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d3af      	bcc.n	800284e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	e044      	b.n	800297e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	3301      	adds	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	791b      	ldrb	r3, [r3, #4]
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	429a      	cmp	r2, r3
 8002986:	d3b5      	bcc.n	80028f4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7c1a      	ldrb	r2, [r3, #16]
 8002990:	f88d 2000 	strb.w	r2, [sp]
 8002994:	3304      	adds	r3, #4
 8002996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002998:	f002 fdb6 	bl	8005508 <USB_DevInit>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e013      	b.n	80029d6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7b1b      	ldrb	r3, [r3, #12]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d102      	bne.n	80029ca <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f80b 	bl	80029e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f002 ff71 	bl	80058b6 <USB_DevDisconnect>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a0e:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	10000003 	.word	0x10000003

08002a28 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a04      	ldr	r2, [pc, #16]	@ (8002a44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40007000 	.word	0x40007000

08002a48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b23      	ldr	r3, [pc, #140]	@ (8002ae0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	4a22      	ldr	r2, [pc, #136]	@ (8002ae0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a76:	f7fe fcf9 	bl	800146c <HAL_GetTick>
 8002a7a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a7c:	e009      	b.n	8002a92 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a7e:	f7fe fcf5 	bl	800146c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a8c:	d901      	bls.n	8002a92 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e022      	b.n	8002ad8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a92:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002aa0:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aaa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aac:	f7fe fcde 	bl	800146c <HAL_GetTick>
 8002ab0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ab2:	e009      	b.n	8002ac8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ab4:	f7fe fcda 	bl	800146c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ac2:	d901      	bls.n	8002ac8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e007      	b.n	8002ad8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ad4:	d1ee      	bne.n	8002ab4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e29b      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8087 	beq.w	8002c1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b0c:	4b96      	ldr	r3, [pc, #600]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d00c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b18:	4b93      	ldr	r3, [pc, #588]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d112      	bne.n	8002b4a <HAL_RCC_OscConfig+0x62>
 8002b24:	4b90      	ldr	r3, [pc, #576]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b30:	d10b      	bne.n	8002b4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b32:	4b8d      	ldr	r3, [pc, #564]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d06c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x130>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d168      	bne.n	8002c18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e275      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x7a>
 8002b54:	4b84      	ldr	r3, [pc, #528]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a83      	ldr	r2, [pc, #524]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e02e      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x9c>
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	4b7c      	ldr	r3, [pc, #496]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7b      	ldr	r2, [pc, #492]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e01d      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xc0>
 8002b8e:	4b76      	ldr	r3, [pc, #472]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a75      	ldr	r2, [pc, #468]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b73      	ldr	r3, [pc, #460]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a72      	ldr	r2, [pc, #456]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0xd8>
 8002ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a6e      	ldr	r2, [pc, #440]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b6c      	ldr	r3, [pc, #432]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fc50 	bl	800146c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fc4c 	bl	800146c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e229      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b61      	ldr	r3, [pc, #388]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xe8>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fc3c 	bl	800146c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fc38 	bl	800146c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e215      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	4b57      	ldr	r3, [pc, #348]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x110>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d069      	beq.n	8002cfa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c26:	4b50      	ldr	r3, [pc, #320]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c32:	4b4d      	ldr	r3, [pc, #308]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d11c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x190>
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	4b47      	ldr	r3, [pc, #284]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e1e9      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b41      	ldr	r3, [pc, #260]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	493d      	ldr	r1, [pc, #244]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	e040      	b.n	8002cfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c80:	4b39      	ldr	r3, [pc, #228]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a38      	ldr	r2, [pc, #224]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fbee 	bl	800146c <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe fbea 	bl	800146c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1c7      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	4b30      	ldr	r3, [pc, #192]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4929      	ldr	r1, [pc, #164]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
 8002cc6:	e018      	b.n	8002cfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc8:	4b27      	ldr	r3, [pc, #156]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fbca 	bl	800146c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7fe fbc6 	bl	800146c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e1a3      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	4b1e      	ldr	r3, [pc, #120]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d038      	beq.n	8002d78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d019      	beq.n	8002d42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0e:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d12:	4a15      	ldr	r2, [pc, #84]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fba7 	bl	800146c <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d22:	f7fe fba3 	bl	800146c <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e180      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x23a>
 8002d40:	e01a      	b.n	8002d78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d42:	4b09      	ldr	r3, [pc, #36]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d46:	4a08      	ldr	r2, [pc, #32]	@ (8002d68 <HAL_RCC_OscConfig+0x280>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fb8d 	bl	800146c <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe fb89 	bl	800146c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d903      	bls.n	8002d6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e166      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
 8002d68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	4b92      	ldr	r3, [pc, #584]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a4 	beq.w	8002ece <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d86:	4b8c      	ldr	r3, [pc, #560]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	4b89      	ldr	r3, [pc, #548]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4a88      	ldr	r2, [pc, #544]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9e:	4b86      	ldr	r3, [pc, #536]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002daa:	2301      	movs	r3, #1
 8002dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dae:	4b83      	ldr	r3, [pc, #524]	@ (8002fbc <HAL_RCC_OscConfig+0x4d4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d118      	bne.n	8002dec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dba:	4b80      	ldr	r3, [pc, #512]	@ (8002fbc <HAL_RCC_OscConfig+0x4d4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7f      	ldr	r2, [pc, #508]	@ (8002fbc <HAL_RCC_OscConfig+0x4d4>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fb51 	bl	800146c <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dce:	f7fe fb4d 	bl	800146c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b64      	cmp	r3, #100	@ 0x64
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e12a      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de0:	4b76      	ldr	r3, [pc, #472]	@ (8002fbc <HAL_RCC_OscConfig+0x4d4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x31a>
 8002df4:	4b70      	ldr	r3, [pc, #448]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df8:	4a6f      	ldr	r2, [pc, #444]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e00:	e02d      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x33c>
 8002e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	4a6a      	ldr	r2, [pc, #424]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e16:	4b68      	ldr	r3, [pc, #416]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	4a67      	ldr	r2, [pc, #412]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e22:	e01c      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCC_OscConfig+0x35e>
 8002e2c:	4b62      	ldr	r3, [pc, #392]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e30:	4a61      	ldr	r2, [pc, #388]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e38:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e44:	e00b      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
 8002e46:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4a:	4a5b      	ldr	r2, [pc, #364]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e52:	4b59      	ldr	r3, [pc, #356]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e56:	4a58      	ldr	r2, [pc, #352]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d015      	beq.n	8002e92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e66:	f7fe fb01 	bl	800146c <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fafd 	bl	800146c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0d8      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ee      	beq.n	8002e6e <HAL_RCC_OscConfig+0x386>
 8002e90:	e014      	b.n	8002ebc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fe faeb 	bl	800146c <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe fae7 	bl	800146c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0c2      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb0:	4b41      	ldr	r3, [pc, #260]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ee      	bne.n	8002e9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d105      	bne.n	8002ece <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80ae 	beq.w	8003034 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed8:	4b37      	ldr	r3, [pc, #220]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d06d      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d14b      	bne.n	8002f84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eec:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a31      	ldr	r2, [pc, #196]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fab8 	bl	800146c <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe fab4 	bl	800146c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e091      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	4b29      	ldr	r3, [pc, #164]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	019b      	lsls	r3, r3, #6
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	3b01      	subs	r3, #1
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	071b      	lsls	r3, r3, #28
 8002f4a:	491b      	ldr	r1, [pc, #108]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f50:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a18      	ldr	r2, [pc, #96]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002f56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fa86 	bl	800146c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe fa82 	bl	800146c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e05f      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f76:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x47c>
 8002f82:	e057      	b.n	8003034 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002f8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fa6c 	bl	800146c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe fa68 	bl	800146c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e045      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <HAL_RCC_OscConfig+0x4d0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x4b0>
 8002fb6:	e03d      	b.n	8003034 <HAL_RCC_OscConfig+0x54c>
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <HAL_RCC_OscConfig+0x558>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d030      	beq.n	8003030 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d129      	bne.n	8003030 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d122      	bne.n	8003030 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ff6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d119      	bne.n	8003030 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	3b01      	subs	r3, #1
 800300a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d10f      	bne.n	8003030 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d107      	bne.n	8003030 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800

08003044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0d0      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b6a      	ldr	r3, [pc, #424]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d910      	bls.n	800308c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b67      	ldr	r3, [pc, #412]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 020f 	bic.w	r2, r3, #15
 8003072:	4965      	ldr	r1, [pc, #404]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	4b63      	ldr	r3, [pc, #396]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0b8      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a4:	4b59      	ldr	r3, [pc, #356]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4a58      	ldr	r2, [pc, #352]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80030aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030bc:	4b53      	ldr	r3, [pc, #332]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	4a52      	ldr	r2, [pc, #328]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c8:	4b50      	ldr	r3, [pc, #320]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	494d      	ldr	r1, [pc, #308]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d040      	beq.n	8003168 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	4b47      	ldr	r3, [pc, #284]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d115      	bne.n	8003126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e07f      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	4b41      	ldr	r3, [pc, #260]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e073      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003116:	4b3d      	ldr	r3, [pc, #244]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06b      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003126:	4b39      	ldr	r3, [pc, #228]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4936      	ldr	r1, [pc, #216]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fe f998 	bl	800146c <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	e00a      	b.n	8003156 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f7fe f994 	bl	800146c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e053      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	4b2d      	ldr	r3, [pc, #180]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 020c 	and.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	429a      	cmp	r2, r3
 8003166:	d1eb      	bne.n	8003140 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003168:	4b27      	ldr	r3, [pc, #156]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d210      	bcs.n	8003198 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b24      	ldr	r3, [pc, #144]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 020f 	bic.w	r2, r3, #15
 800317e:	4922      	ldr	r1, [pc, #136]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b20      	ldr	r3, [pc, #128]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e032      	b.n	80031fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a4:	4b19      	ldr	r3, [pc, #100]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4916      	ldr	r1, [pc, #88]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031c2:	4b12      	ldr	r3, [pc, #72]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	490e      	ldr	r1, [pc, #56]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031d6:	f000 f821 	bl	800321c <HAL_RCC_GetSysClockFreq>
 80031da:	4602      	mov	r2, r0
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	490a      	ldr	r1, [pc, #40]	@ (8003210 <HAL_RCC_ClockConfig+0x1cc>)
 80031e8:	5ccb      	ldrb	r3, [r1, r3]
 80031ea:	fa22 f303 	lsr.w	r3, r2, r3
 80031ee:	4a09      	ldr	r2, [pc, #36]	@ (8003214 <HAL_RCC_ClockConfig+0x1d0>)
 80031f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031f2:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <HAL_RCC_ClockConfig+0x1d4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe f8f4 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023c00 	.word	0x40023c00
 800320c:	40023800 	.word	0x40023800
 8003210:	08006914 	.word	0x08006914
 8003214:	20000004 	.word	0x20000004
 8003218:	20000008 	.word	0x20000008

0800321c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800321c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003220:	b094      	sub	sp, #80	@ 0x50
 8003222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	647b      	str	r3, [r7, #68]	@ 0x44
 8003228:	2300      	movs	r3, #0
 800322a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800322c:	2300      	movs	r3, #0
 800322e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003234:	4b79      	ldr	r3, [pc, #484]	@ (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b08      	cmp	r3, #8
 800323e:	d00d      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x40>
 8003240:	2b08      	cmp	r3, #8
 8003242:	f200 80e1 	bhi.w	8003408 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x34>
 800324a:	2b04      	cmp	r3, #4
 800324c:	d003      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x3a>
 800324e:	e0db      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4b73      	ldr	r3, [pc, #460]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x204>)
 8003252:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003254:	e0db      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003256:	4b73      	ldr	r3, [pc, #460]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x208>)
 8003258:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800325a:	e0d8      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800325c:	4b6f      	ldr	r3, [pc, #444]	@ (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003264:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003266:	4b6d      	ldr	r3, [pc, #436]	@ (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d063      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003272:	4b6a      	ldr	r3, [pc, #424]	@ (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	2200      	movs	r2, #0
 800327a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800327c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003284:	633b      	str	r3, [r7, #48]	@ 0x30
 8003286:	2300      	movs	r3, #0
 8003288:	637b      	str	r3, [r7, #52]	@ 0x34
 800328a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800328e:	4622      	mov	r2, r4
 8003290:	462b      	mov	r3, r5
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	0159      	lsls	r1, r3, #5
 800329c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a0:	0150      	lsls	r0, r2, #5
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4621      	mov	r1, r4
 80032a8:	1a51      	subs	r1, r2, r1
 80032aa:	6139      	str	r1, [r7, #16]
 80032ac:	4629      	mov	r1, r5
 80032ae:	eb63 0301 	sbc.w	r3, r3, r1
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032c0:	4659      	mov	r1, fp
 80032c2:	018b      	lsls	r3, r1, #6
 80032c4:	4651      	mov	r1, sl
 80032c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ca:	4651      	mov	r1, sl
 80032cc:	018a      	lsls	r2, r1, #6
 80032ce:	4651      	mov	r1, sl
 80032d0:	ebb2 0801 	subs.w	r8, r2, r1
 80032d4:	4659      	mov	r1, fp
 80032d6:	eb63 0901 	sbc.w	r9, r3, r1
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ee:	4690      	mov	r8, r2
 80032f0:	4699      	mov	r9, r3
 80032f2:	4623      	mov	r3, r4
 80032f4:	eb18 0303 	adds.w	r3, r8, r3
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	462b      	mov	r3, r5
 80032fc:	eb49 0303 	adc.w	r3, r9, r3
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800330e:	4629      	mov	r1, r5
 8003310:	024b      	lsls	r3, r1, #9
 8003312:	4621      	mov	r1, r4
 8003314:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003318:	4621      	mov	r1, r4
 800331a:	024a      	lsls	r2, r1, #9
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003322:	2200      	movs	r2, #0
 8003324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800332c:	f7fc ffe0 	bl	80002f0 <__aeabi_uldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4613      	mov	r3, r2
 8003336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003338:	e058      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333a:	4b38      	ldr	r3, [pc, #224]	@ (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	099b      	lsrs	r3, r3, #6
 8003340:	2200      	movs	r2, #0
 8003342:	4618      	mov	r0, r3
 8003344:	4611      	mov	r1, r2
 8003346:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003350:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003354:	4642      	mov	r2, r8
 8003356:	464b      	mov	r3, r9
 8003358:	f04f 0000 	mov.w	r0, #0
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	0159      	lsls	r1, r3, #5
 8003362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003366:	0150      	lsls	r0, r2, #5
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4641      	mov	r1, r8
 800336e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003372:	4649      	mov	r1, r9
 8003374:	eb63 0b01 	sbc.w	fp, r3, r1
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003384:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003388:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800338c:	ebb2 040a 	subs.w	r4, r2, sl
 8003390:	eb63 050b 	sbc.w	r5, r3, fp
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	00eb      	lsls	r3, r5, #3
 800339e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a2:	00e2      	lsls	r2, r4, #3
 80033a4:	4614      	mov	r4, r2
 80033a6:	461d      	mov	r5, r3
 80033a8:	4643      	mov	r3, r8
 80033aa:	18e3      	adds	r3, r4, r3
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	464b      	mov	r3, r9
 80033b0:	eb45 0303 	adc.w	r3, r5, r3
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c2:	4629      	mov	r1, r5
 80033c4:	028b      	lsls	r3, r1, #10
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033cc:	4621      	mov	r1, r4
 80033ce:	028a      	lsls	r2, r1, #10
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033d6:	2200      	movs	r2, #0
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	61fa      	str	r2, [r7, #28]
 80033dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e0:	f7fc ff86 	bl	80002f0 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <HAL_RCC_GetSysClockFreq+0x200>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003406:	e002      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x204>)
 800340a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800340c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003410:	4618      	mov	r0, r3
 8003412:	3750      	adds	r7, #80	@ 0x50
 8003414:	46bd      	mov	sp, r7
 8003416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	00f42400 	.word	0x00f42400
 8003424:	007a1200 	.word	0x007a1200

08003428 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <HAL_RCC_GetHCLKFreq+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000004 	.word	0x20000004

08003440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003444:	f7ff fff0 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	4903      	ldr	r1, [pc, #12]	@ (8003464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003456:	5ccb      	ldrb	r3, [r1, r3]
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40023800 	.word	0x40023800
 8003464:	08006924 	.word	0x08006924

08003468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800346c:	f7ff ffdc 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0b5b      	lsrs	r3, r3, #13
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	@ (800348c <HAL_RCC_GetPCLK2Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	08006924 	.word	0x08006924

08003490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d012      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034b8:	4b69      	ldr	r3, [pc, #420]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a68      	ldr	r2, [pc, #416]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80034c2:	6093      	str	r3, [r2, #8]
 80034c4:	4b66      	ldr	r3, [pc, #408]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034cc:	4964      	ldr	r1, [pc, #400]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034da:	2301      	movs	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d017      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f8:	4959      	ldr	r1, [pc, #356]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003504:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003508:	d101      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800350a:	2301      	movs	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d017      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003526:	4b4e      	ldr	r3, [pc, #312]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800352c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	494a      	ldr	r1, [pc, #296]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003544:	d101      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003546:	2301      	movs	r3, #1
 8003548:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 808b 	beq.w	800368a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b3a      	ldr	r3, [pc, #232]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	4a39      	ldr	r2, [pc, #228]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003580:	4b37      	ldr	r3, [pc, #220]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800358c:	4b35      	ldr	r3, [pc, #212]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a34      	ldr	r2, [pc, #208]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003598:	f7fd ff68 	bl	800146c <HAL_GetTick>
 800359c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a0:	f7fd ff64 	bl	800146c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e38f      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035be:	4b28      	ldr	r3, [pc, #160]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d035      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d02e      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035dc:	4b20      	ldr	r3, [pc, #128]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035fe:	4a18      	ldr	r2, [pc, #96]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003604:	4b16      	ldr	r3, [pc, #88]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d114      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fd ff2c 	bl	800146c <HAL_GetTick>
 8003614:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fd ff28 	bl	800146c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e351      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ee      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003642:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003646:	d111      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003654:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003656:	400b      	ands	r3, r1
 8003658:	4901      	ldr	r1, [pc, #4]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
 800365e:	e00b      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003660:	40023800 	.word	0x40023800
 8003664:	40007000 	.word	0x40007000
 8003668:	0ffffcff 	.word	0x0ffffcff
 800366c:	4bac      	ldr	r3, [pc, #688]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4aab      	ldr	r2, [pc, #684]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003672:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003676:	6093      	str	r3, [r2, #8]
 8003678:	4ba9      	ldr	r3, [pc, #676]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003684:	49a6      	ldr	r1, [pc, #664]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003686:	4313      	orrs	r3, r2
 8003688:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b00      	cmp	r3, #0
 8003694:	d010      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003696:	4ba2      	ldr	r3, [pc, #648]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800369c:	4aa0      	ldr	r2, [pc, #640]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80036a6:	4b9e      	ldr	r3, [pc, #632]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	499b      	ldr	r1, [pc, #620]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c4:	4b96      	ldr	r3, [pc, #600]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036d2:	4993      	ldr	r1, [pc, #588]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036e6:	4b8e      	ldr	r3, [pc, #568]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f4:	498a      	ldr	r1, [pc, #552]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003708:	4b85      	ldr	r3, [pc, #532]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003716:	4982      	ldr	r1, [pc, #520]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800372a:	4b7d      	ldr	r3, [pc, #500]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003730:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	4979      	ldr	r1, [pc, #484]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800374c:	4b74      	ldr	r3, [pc, #464]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	f023 0203 	bic.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375a:	4971      	ldr	r1, [pc, #452]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800376e:	4b6c      	ldr	r3, [pc, #432]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003774:	f023 020c 	bic.w	r2, r3, #12
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800377c:	4968      	ldr	r1, [pc, #416]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003790:	4b63      	ldr	r3, [pc, #396]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379e:	4960      	ldr	r1, [pc, #384]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c0:	4957      	ldr	r1, [pc, #348]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037d4:	4b52      	ldr	r3, [pc, #328]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e2:	494f      	ldr	r1, [pc, #316]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	4946      	ldr	r1, [pc, #280]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003818:	4b41      	ldr	r3, [pc, #260]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003826:	493e      	ldr	r1, [pc, #248]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800383a:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003848:	4935      	ldr	r1, [pc, #212]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800385c:	4b30      	ldr	r3, [pc, #192]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800386a:	492d      	ldr	r1, [pc, #180]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d011      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800387e:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003884:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800388c:	4924      	ldr	r1, [pc, #144]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800389c:	d101      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038ae:	2301      	movs	r3, #1
 80038b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038be:	4b18      	ldr	r3, [pc, #96]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038cc:	4914      	ldr	r1, [pc, #80]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f0:	490b      	ldr	r1, [pc, #44]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00f      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003904:	4b06      	ldr	r3, [pc, #24]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003914:	4902      	ldr	r1, [pc, #8]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003930:	4b8a      	ldr	r3, [pc, #552]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003932:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003936:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003940:	4986      	ldr	r1, [pc, #536]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003954:	4b81      	ldr	r3, [pc, #516]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800395a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003964:	497d      	ldr	r1, [pc, #500]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d006      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80d6 	beq.w	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003980:	4b76      	ldr	r3, [pc, #472]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a75      	ldr	r2, [pc, #468]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003986:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800398a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fd fd6e 	bl	800146c <HAL_GetTick>
 8003990:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003994:	f7fd fd6a 	bl	800146c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	@ 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e195      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d021      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d11d      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039c6:	4b65      	ldr	r3, [pc, #404]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039d4:	4b61      	ldr	r3, [pc, #388]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039da:	0e1b      	lsrs	r3, r3, #24
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	019a      	lsls	r2, r3, #6
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	071b      	lsls	r3, r3, #28
 80039fa:	4958      	ldr	r1, [pc, #352]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d02e      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a2c:	d129      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a3c:	4b47      	ldr	r3, [pc, #284]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a42:	0f1b      	lsrs	r3, r3, #28
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	019a      	lsls	r2, r3, #6
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	071b      	lsls	r3, r3, #28
 8003a62:	493e      	ldr	r1, [pc, #248]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a70:	f023 021f 	bic.w	r2, r3, #31
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	4938      	ldr	r1, [pc, #224]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01d      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a8e:	4b33      	ldr	r3, [pc, #204]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a94:	0e1b      	lsrs	r3, r3, #24
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa2:	0f1b      	lsrs	r3, r3, #28
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	019a      	lsls	r2, r3, #6
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	431a      	orrs	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	071b      	lsls	r3, r3, #28
 8003ac2:	4926      	ldr	r1, [pc, #152]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d011      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	019a      	lsls	r2, r3, #6
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	071b      	lsls	r3, r3, #28
 8003af2:	491a      	ldr	r1, [pc, #104]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003afa:	4b18      	ldr	r3, [pc, #96]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a17      	ldr	r2, [pc, #92]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b06:	f7fd fcb1 	bl	800146c <HAL_GetTick>
 8003b0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b0e:	f7fd fcad 	bl	800146c <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b64      	cmp	r3, #100	@ 0x64
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e0d8      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b20:	4b0e      	ldr	r3, [pc, #56]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	f040 80ce 	bne.w	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b34:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a08      	ldr	r2, [pc, #32]	@ (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b40:	f7fd fc94 	bl	800146c <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b46:	e00b      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b48:	f7fd fc90 	bl	800146c <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	@ 0x64
 8003b54:	d904      	bls.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e0bb      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b60:	4b5e      	ldr	r3, [pc, #376]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b6c:	d0ec      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d02e      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d12a      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b96:	4b51      	ldr	r3, [pc, #324]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003baa:	0f1b      	lsrs	r3, r3, #28
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	019a      	lsls	r2, r3, #6
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	061b      	lsls	r3, r3, #24
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	071b      	lsls	r3, r3, #28
 8003bca:	4944      	ldr	r1, [pc, #272]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bd2:	4b42      	ldr	r3, [pc, #264]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bd8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	3b01      	subs	r3, #1
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	493d      	ldr	r1, [pc, #244]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d022      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c00:	d11d      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c02:	4b36      	ldr	r3, [pc, #216]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c08:	0e1b      	lsrs	r3, r3, #24
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c10:	4b32      	ldr	r3, [pc, #200]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c16:	0f1b      	lsrs	r3, r3, #28
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	019a      	lsls	r2, r3, #6
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	061b      	lsls	r3, r3, #24
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	071b      	lsls	r3, r3, #28
 8003c36:	4929      	ldr	r1, [pc, #164]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d028      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c4a:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c50:	0e1b      	lsrs	r3, r3, #24
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c58:	4b20      	ldr	r3, [pc, #128]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	019a      	lsls	r2, r3, #6
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	431a      	orrs	r2, r3
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	071b      	lsls	r3, r3, #28
 8003c7e:	4917      	ldr	r1, [pc, #92]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c86:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	4911      	ldr	r1, [pc, #68]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fd fbe0 	bl	800146c <HAL_GetTick>
 8003cac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cb0:	f7fd fbdc 	bl	800146c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	@ 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e007      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cc2:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cce:	d1ef      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e040      	b.n	8003d74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd f93e 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	@ 0x24
 8003d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fe6c 	bl	8004a04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fc05 	bl	800453c <UART_SetConfig>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e01b      	b.n	8003d74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 feeb 	bl	8004b48 <UART_CheckIdleState>
 8003d72:	4603      	mov	r3, r0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	@ 0x28
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d177      	bne.n	8003e84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_UART_Transmit+0x24>
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e070      	b.n	8003e86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2221      	movs	r2, #33	@ 0x21
 8003db0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003db2:	f7fd fb5b 	bl	800146c <HAL_GetTick>
 8003db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd0:	d108      	bne.n	8003de4 <HAL_UART_Transmit+0x68>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	e003      	b.n	8003dec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dec:	e02f      	b.n	8003e4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2200      	movs	r2, #0
 8003df6:	2180      	movs	r1, #128	@ 0x80
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 ff4d 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e03b      	b.n	8003e86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	3302      	adds	r3, #2
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	e007      	b.n	8003e3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1c9      	bne.n	8003dee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2140      	movs	r1, #64	@ 0x40
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 ff17 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e005      	b.n	8003e86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08a      	sub	sp, #40	@ 0x28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d132      	bne.n	8003f0c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_UART_Receive_IT+0x24>
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e02b      	b.n	8003f0e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d018      	beq.n	8003efc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	69f9      	ldr	r1, [r7, #28]
 8003eee:	6a3a      	ldr	r2, [r7, #32]
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e6      	bne.n	8003eca <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 ff36 	bl	8004d74 <UART_Start_Receive_IT>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	e000      	b.n	8003f0e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	@ 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b0ba      	sub	sp, #232	@ 0xe8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f42:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f46:	4013      	ands	r3, r2
 8003f48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d115      	bne.n	8003f80 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00f      	beq.n	8003f80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 82ac 	beq.w	80044ce <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
      }
      return;
 8003f7e:	e2a6      	b.n	80044ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8117 	beq.w	80041b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f9a:	4b85      	ldr	r3, [pc, #532]	@ (80041b0 <HAL_UART_IRQHandler+0x298>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 810a 	beq.w	80041b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d011      	beq.n	8003fd4 <HAL_UART_IRQHandler+0xbc>
 8003fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00b      	beq.n	8003fd4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fca:	f043 0201 	orr.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d011      	beq.n	8004004 <HAL_UART_IRQHandler+0xec>
 8003fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00b      	beq.n	8004004 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ffa:	f043 0204 	orr.w	r2, r3, #4
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d011      	beq.n	8004034 <HAL_UART_IRQHandler+0x11c>
 8004010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2204      	movs	r2, #4
 8004022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402a:	f043 0202 	orr.w	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800404c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004050:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00b      	beq.n	8004070 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2208      	movs	r2, #8
 800405e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004066:	f043 0208 	orr.w	r2, r3, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004078:	2b00      	cmp	r3, #0
 800407a:	d012      	beq.n	80040a2 <HAL_UART_IRQHandler+0x18a>
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004098:	f043 0220 	orr.w	r2, r3, #32
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8212 	beq.w	80044d2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b40      	cmp	r3, #64	@ 0x40
 80040ec:	d005      	beq.n	80040fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d04f      	beq.n	800419a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 ff00 	bl	8004f00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410a:	2b40      	cmp	r3, #64	@ 0x40
 800410c:	d141      	bne.n	8004192 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3308      	adds	r3, #8
 8004114:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004124:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800412c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3308      	adds	r3, #8
 8004136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800413a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800413e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1d9      	bne.n	800410e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	2b00      	cmp	r3, #0
 8004160:	d013      	beq.n	800418a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004166:	4a13      	ldr	r2, [pc, #76]	@ (80041b4 <HAL_UART_IRQHandler+0x29c>)
 8004168:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fb2d 	bl	80017ce <HAL_DMA_Abort_IT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d017      	beq.n	80041aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800417e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004184:	4610      	mov	r0, r2
 8004186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004188:	e00f      	b.n	80041aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f9b6 	bl	80044fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004190:	e00b      	b.n	80041aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f9b2 	bl	80044fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004198:	e007      	b.n	80041aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f9ae 	bl	80044fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80041a8:	e193      	b.n	80044d2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041aa:	bf00      	nop
    return;
 80041ac:	e191      	b.n	80044d2 <HAL_UART_IRQHandler+0x5ba>
 80041ae:	bf00      	nop
 80041b0:	04000120 	.word	0x04000120
 80041b4:	08004fc9 	.word	0x08004fc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f040 814c 	bne.w	800445a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8145 	beq.w	800445a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 813e 	beq.w	800445a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2210      	movs	r2, #16
 80041e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f0:	2b40      	cmp	r3, #64	@ 0x40
 80041f2:	f040 80b6 	bne.w	8004362 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004202:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8165 	beq.w	80044d6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004216:	429a      	cmp	r2, r3
 8004218:	f080 815d 	bcs.w	80044d6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004222:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004230:	f000 8086 	beq.w	8004340 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004248:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800424c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800425e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004262:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800426a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1da      	bne.n	8004234 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3308      	adds	r3, #8
 8004284:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800428e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3308      	adds	r3, #8
 800429e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e1      	bne.n	800427e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3308      	adds	r3, #8
 80042c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e3      	bne.n	80042ba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800430e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004310:	f023 0310 	bic.w	r3, r3, #16
 8004314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004322:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004324:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004328:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e4      	bne.n	8004300 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd f9d7 	bl	80016ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004352:	b29b      	uxth	r3, r3
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	b29b      	uxth	r3, r3
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8d8 	bl	8004510 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004360:	e0b9      	b.n	80044d6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800436e:	b29b      	uxth	r3, r3
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80ab 	beq.w	80044da <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80a6 	beq.w	80044da <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800439c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e4      	bne.n	800438e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	623b      	str	r3, [r7, #32]
   return(result);
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3308      	adds	r3, #8
 80043e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80043ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e3      	bne.n	80043c4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	e853 3f00 	ldrex	r3, [r3]
 800441c:	60fb      	str	r3, [r7, #12]
   return(result);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f023 0310 	bic.w	r3, r3, #16
 8004424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	69b9      	ldr	r1, [r7, #24]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	617b      	str	r3, [r7, #20]
   return(result);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e4      	bne.n	8004410 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800444c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004450:	4619      	mov	r1, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f85c 	bl	8004510 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004458:	e03f      	b.n	80044da <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800445a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00e      	beq.n	8004484 <HAL_UART_IRQHandler+0x56c>
 8004466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800446a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800447a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f853 	bl	8004528 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004482:	e02d      	b.n	80044e0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00e      	beq.n	80044ae <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01c      	beq.n	80044de <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
    }
    return;
 80044ac:	e017      	b.n	80044de <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d012      	beq.n	80044e0 <HAL_UART_IRQHandler+0x5c8>
 80044ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00c      	beq.n	80044e0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fd94 	bl	8004ff4 <UART_EndTransmit_IT>
    return;
 80044cc:	e008      	b.n	80044e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80044ce:	bf00      	nop
 80044d0:	e006      	b.n	80044e0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80044d2:	bf00      	nop
 80044d4:	e004      	b.n	80044e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80044de:	bf00      	nop
  }

}
 80044e0:	37e8      	adds	r7, #232	@ 0xe8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop

080044e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4ba6      	ldr	r3, [pc, #664]	@ (8004800 <UART_SetConfig+0x2c4>)
 8004568:	4013      	ands	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	6979      	ldr	r1, [r7, #20]
 8004570:	430b      	orrs	r3, r1
 8004572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a94      	ldr	r2, [pc, #592]	@ (8004804 <UART_SetConfig+0x2c8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d120      	bne.n	80045fa <UART_SetConfig+0xbe>
 80045b8:	4b93      	ldr	r3, [pc, #588]	@ (8004808 <UART_SetConfig+0x2cc>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d816      	bhi.n	80045f4 <UART_SetConfig+0xb8>
 80045c6:	a201      	add	r2, pc, #4	@ (adr r2, 80045cc <UART_SetConfig+0x90>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	080045dd 	.word	0x080045dd
 80045d0:	080045e9 	.word	0x080045e9
 80045d4:	080045e3 	.word	0x080045e3
 80045d8:	080045ef 	.word	0x080045ef
 80045dc:	2301      	movs	r3, #1
 80045de:	77fb      	strb	r3, [r7, #31]
 80045e0:	e150      	b.n	8004884 <UART_SetConfig+0x348>
 80045e2:	2302      	movs	r3, #2
 80045e4:	77fb      	strb	r3, [r7, #31]
 80045e6:	e14d      	b.n	8004884 <UART_SetConfig+0x348>
 80045e8:	2304      	movs	r3, #4
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	e14a      	b.n	8004884 <UART_SetConfig+0x348>
 80045ee:	2308      	movs	r3, #8
 80045f0:	77fb      	strb	r3, [r7, #31]
 80045f2:	e147      	b.n	8004884 <UART_SetConfig+0x348>
 80045f4:	2310      	movs	r3, #16
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	e144      	b.n	8004884 <UART_SetConfig+0x348>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a83      	ldr	r2, [pc, #524]	@ (800480c <UART_SetConfig+0x2d0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d132      	bne.n	800466a <UART_SetConfig+0x12e>
 8004604:	4b80      	ldr	r3, [pc, #512]	@ (8004808 <UART_SetConfig+0x2cc>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d828      	bhi.n	8004664 <UART_SetConfig+0x128>
 8004612:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <UART_SetConfig+0xdc>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	0800464d 	.word	0x0800464d
 800461c:	08004665 	.word	0x08004665
 8004620:	08004665 	.word	0x08004665
 8004624:	08004665 	.word	0x08004665
 8004628:	08004659 	.word	0x08004659
 800462c:	08004665 	.word	0x08004665
 8004630:	08004665 	.word	0x08004665
 8004634:	08004665 	.word	0x08004665
 8004638:	08004653 	.word	0x08004653
 800463c:	08004665 	.word	0x08004665
 8004640:	08004665 	.word	0x08004665
 8004644:	08004665 	.word	0x08004665
 8004648:	0800465f 	.word	0x0800465f
 800464c:	2300      	movs	r3, #0
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e118      	b.n	8004884 <UART_SetConfig+0x348>
 8004652:	2302      	movs	r3, #2
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e115      	b.n	8004884 <UART_SetConfig+0x348>
 8004658:	2304      	movs	r3, #4
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e112      	b.n	8004884 <UART_SetConfig+0x348>
 800465e:	2308      	movs	r3, #8
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e10f      	b.n	8004884 <UART_SetConfig+0x348>
 8004664:	2310      	movs	r3, #16
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e10c      	b.n	8004884 <UART_SetConfig+0x348>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a68      	ldr	r2, [pc, #416]	@ (8004810 <UART_SetConfig+0x2d4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d120      	bne.n	80046b6 <UART_SetConfig+0x17a>
 8004674:	4b64      	ldr	r3, [pc, #400]	@ (8004808 <UART_SetConfig+0x2cc>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800467e:	2b30      	cmp	r3, #48	@ 0x30
 8004680:	d013      	beq.n	80046aa <UART_SetConfig+0x16e>
 8004682:	2b30      	cmp	r3, #48	@ 0x30
 8004684:	d814      	bhi.n	80046b0 <UART_SetConfig+0x174>
 8004686:	2b20      	cmp	r3, #32
 8004688:	d009      	beq.n	800469e <UART_SetConfig+0x162>
 800468a:	2b20      	cmp	r3, #32
 800468c:	d810      	bhi.n	80046b0 <UART_SetConfig+0x174>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <UART_SetConfig+0x15c>
 8004692:	2b10      	cmp	r3, #16
 8004694:	d006      	beq.n	80046a4 <UART_SetConfig+0x168>
 8004696:	e00b      	b.n	80046b0 <UART_SetConfig+0x174>
 8004698:	2300      	movs	r3, #0
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e0f2      	b.n	8004884 <UART_SetConfig+0x348>
 800469e:	2302      	movs	r3, #2
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e0ef      	b.n	8004884 <UART_SetConfig+0x348>
 80046a4:	2304      	movs	r3, #4
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e0ec      	b.n	8004884 <UART_SetConfig+0x348>
 80046aa:	2308      	movs	r3, #8
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e0e9      	b.n	8004884 <UART_SetConfig+0x348>
 80046b0:	2310      	movs	r3, #16
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e0e6      	b.n	8004884 <UART_SetConfig+0x348>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a56      	ldr	r2, [pc, #344]	@ (8004814 <UART_SetConfig+0x2d8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d120      	bne.n	8004702 <UART_SetConfig+0x1c6>
 80046c0:	4b51      	ldr	r3, [pc, #324]	@ (8004808 <UART_SetConfig+0x2cc>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80046cc:	d013      	beq.n	80046f6 <UART_SetConfig+0x1ba>
 80046ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80046d0:	d814      	bhi.n	80046fc <UART_SetConfig+0x1c0>
 80046d2:	2b80      	cmp	r3, #128	@ 0x80
 80046d4:	d009      	beq.n	80046ea <UART_SetConfig+0x1ae>
 80046d6:	2b80      	cmp	r3, #128	@ 0x80
 80046d8:	d810      	bhi.n	80046fc <UART_SetConfig+0x1c0>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <UART_SetConfig+0x1a8>
 80046de:	2b40      	cmp	r3, #64	@ 0x40
 80046e0:	d006      	beq.n	80046f0 <UART_SetConfig+0x1b4>
 80046e2:	e00b      	b.n	80046fc <UART_SetConfig+0x1c0>
 80046e4:	2300      	movs	r3, #0
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e0cc      	b.n	8004884 <UART_SetConfig+0x348>
 80046ea:	2302      	movs	r3, #2
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e0c9      	b.n	8004884 <UART_SetConfig+0x348>
 80046f0:	2304      	movs	r3, #4
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e0c6      	b.n	8004884 <UART_SetConfig+0x348>
 80046f6:	2308      	movs	r3, #8
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e0c3      	b.n	8004884 <UART_SetConfig+0x348>
 80046fc:	2310      	movs	r3, #16
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e0c0      	b.n	8004884 <UART_SetConfig+0x348>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a44      	ldr	r2, [pc, #272]	@ (8004818 <UART_SetConfig+0x2dc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d125      	bne.n	8004758 <UART_SetConfig+0x21c>
 800470c:	4b3e      	ldr	r3, [pc, #248]	@ (8004808 <UART_SetConfig+0x2cc>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004716:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800471a:	d017      	beq.n	800474c <UART_SetConfig+0x210>
 800471c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004720:	d817      	bhi.n	8004752 <UART_SetConfig+0x216>
 8004722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004726:	d00b      	beq.n	8004740 <UART_SetConfig+0x204>
 8004728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800472c:	d811      	bhi.n	8004752 <UART_SetConfig+0x216>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <UART_SetConfig+0x1fe>
 8004732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004736:	d006      	beq.n	8004746 <UART_SetConfig+0x20a>
 8004738:	e00b      	b.n	8004752 <UART_SetConfig+0x216>
 800473a:	2300      	movs	r3, #0
 800473c:	77fb      	strb	r3, [r7, #31]
 800473e:	e0a1      	b.n	8004884 <UART_SetConfig+0x348>
 8004740:	2302      	movs	r3, #2
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e09e      	b.n	8004884 <UART_SetConfig+0x348>
 8004746:	2304      	movs	r3, #4
 8004748:	77fb      	strb	r3, [r7, #31]
 800474a:	e09b      	b.n	8004884 <UART_SetConfig+0x348>
 800474c:	2308      	movs	r3, #8
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e098      	b.n	8004884 <UART_SetConfig+0x348>
 8004752:	2310      	movs	r3, #16
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e095      	b.n	8004884 <UART_SetConfig+0x348>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2f      	ldr	r2, [pc, #188]	@ (800481c <UART_SetConfig+0x2e0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d125      	bne.n	80047ae <UART_SetConfig+0x272>
 8004762:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <UART_SetConfig+0x2cc>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800476c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004770:	d017      	beq.n	80047a2 <UART_SetConfig+0x266>
 8004772:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004776:	d817      	bhi.n	80047a8 <UART_SetConfig+0x26c>
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800477c:	d00b      	beq.n	8004796 <UART_SetConfig+0x25a>
 800477e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004782:	d811      	bhi.n	80047a8 <UART_SetConfig+0x26c>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <UART_SetConfig+0x254>
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800478c:	d006      	beq.n	800479c <UART_SetConfig+0x260>
 800478e:	e00b      	b.n	80047a8 <UART_SetConfig+0x26c>
 8004790:	2301      	movs	r3, #1
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e076      	b.n	8004884 <UART_SetConfig+0x348>
 8004796:	2302      	movs	r3, #2
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e073      	b.n	8004884 <UART_SetConfig+0x348>
 800479c:	2304      	movs	r3, #4
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e070      	b.n	8004884 <UART_SetConfig+0x348>
 80047a2:	2308      	movs	r3, #8
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e06d      	b.n	8004884 <UART_SetConfig+0x348>
 80047a8:	2310      	movs	r3, #16
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e06a      	b.n	8004884 <UART_SetConfig+0x348>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <UART_SetConfig+0x2e4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d138      	bne.n	800482a <UART_SetConfig+0x2ee>
 80047b8:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <UART_SetConfig+0x2cc>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80047c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047c6:	d017      	beq.n	80047f8 <UART_SetConfig+0x2bc>
 80047c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047cc:	d82a      	bhi.n	8004824 <UART_SetConfig+0x2e8>
 80047ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d2:	d00b      	beq.n	80047ec <UART_SetConfig+0x2b0>
 80047d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d8:	d824      	bhi.n	8004824 <UART_SetConfig+0x2e8>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <UART_SetConfig+0x2aa>
 80047de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e2:	d006      	beq.n	80047f2 <UART_SetConfig+0x2b6>
 80047e4:	e01e      	b.n	8004824 <UART_SetConfig+0x2e8>
 80047e6:	2300      	movs	r3, #0
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e04b      	b.n	8004884 <UART_SetConfig+0x348>
 80047ec:	2302      	movs	r3, #2
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e048      	b.n	8004884 <UART_SetConfig+0x348>
 80047f2:	2304      	movs	r3, #4
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e045      	b.n	8004884 <UART_SetConfig+0x348>
 80047f8:	2308      	movs	r3, #8
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e042      	b.n	8004884 <UART_SetConfig+0x348>
 80047fe:	bf00      	nop
 8004800:	efff69f3 	.word	0xefff69f3
 8004804:	40011000 	.word	0x40011000
 8004808:	40023800 	.word	0x40023800
 800480c:	40004400 	.word	0x40004400
 8004810:	40004800 	.word	0x40004800
 8004814:	40004c00 	.word	0x40004c00
 8004818:	40005000 	.word	0x40005000
 800481c:	40011400 	.word	0x40011400
 8004820:	40007800 	.word	0x40007800
 8004824:	2310      	movs	r3, #16
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e02c      	b.n	8004884 <UART_SetConfig+0x348>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a72      	ldr	r2, [pc, #456]	@ (80049f8 <UART_SetConfig+0x4bc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d125      	bne.n	8004880 <UART_SetConfig+0x344>
 8004834:	4b71      	ldr	r3, [pc, #452]	@ (80049fc <UART_SetConfig+0x4c0>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800483e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004842:	d017      	beq.n	8004874 <UART_SetConfig+0x338>
 8004844:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004848:	d817      	bhi.n	800487a <UART_SetConfig+0x33e>
 800484a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800484e:	d00b      	beq.n	8004868 <UART_SetConfig+0x32c>
 8004850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004854:	d811      	bhi.n	800487a <UART_SetConfig+0x33e>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <UART_SetConfig+0x326>
 800485a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800485e:	d006      	beq.n	800486e <UART_SetConfig+0x332>
 8004860:	e00b      	b.n	800487a <UART_SetConfig+0x33e>
 8004862:	2300      	movs	r3, #0
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e00d      	b.n	8004884 <UART_SetConfig+0x348>
 8004868:	2302      	movs	r3, #2
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e00a      	b.n	8004884 <UART_SetConfig+0x348>
 800486e:	2304      	movs	r3, #4
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e007      	b.n	8004884 <UART_SetConfig+0x348>
 8004874:	2308      	movs	r3, #8
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e004      	b.n	8004884 <UART_SetConfig+0x348>
 800487a:	2310      	movs	r3, #16
 800487c:	77fb      	strb	r3, [r7, #31]
 800487e:	e001      	b.n	8004884 <UART_SetConfig+0x348>
 8004880:	2310      	movs	r3, #16
 8004882:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488c:	d15b      	bne.n	8004946 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800488e:	7ffb      	ldrb	r3, [r7, #31]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d828      	bhi.n	80048e6 <UART_SetConfig+0x3aa>
 8004894:	a201      	add	r2, pc, #4	@ (adr r2, 800489c <UART_SetConfig+0x360>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	080048e7 	.word	0x080048e7
 80048ac:	080048d7 	.word	0x080048d7
 80048b0:	080048e7 	.word	0x080048e7
 80048b4:	080048e7 	.word	0x080048e7
 80048b8:	080048e7 	.word	0x080048e7
 80048bc:	080048df 	.word	0x080048df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c0:	f7fe fdbe 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 80048c4:	61b8      	str	r0, [r7, #24]
        break;
 80048c6:	e013      	b.n	80048f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c8:	f7fe fdce 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 80048cc:	61b8      	str	r0, [r7, #24]
        break;
 80048ce:	e00f      	b.n	80048f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004a00 <UART_SetConfig+0x4c4>)
 80048d2:	61bb      	str	r3, [r7, #24]
        break;
 80048d4:	e00c      	b.n	80048f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d6:	f7fe fca1 	bl	800321c <HAL_RCC_GetSysClockFreq>
 80048da:	61b8      	str	r0, [r7, #24]
        break;
 80048dc:	e008      	b.n	80048f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048e2:	61bb      	str	r3, [r7, #24]
        break;
 80048e4:	e004      	b.n	80048f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	77bb      	strb	r3, [r7, #30]
        break;
 80048ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d074      	beq.n	80049e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	005a      	lsls	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	441a      	add	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	fbb2 f3f3 	udiv	r3, r2, r3
 800490a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b0f      	cmp	r3, #15
 8004910:	d916      	bls.n	8004940 <UART_SetConfig+0x404>
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004918:	d212      	bcs.n	8004940 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f023 030f 	bic.w	r3, r3, #15
 8004922:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	b29b      	uxth	r3, r3
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	b29a      	uxth	r2, r3
 8004930:	89fb      	ldrh	r3, [r7, #14]
 8004932:	4313      	orrs	r3, r2
 8004934:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	89fa      	ldrh	r2, [r7, #14]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	e04f      	b.n	80049e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	77bb      	strb	r3, [r7, #30]
 8004944:	e04c      	b.n	80049e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004946:	7ffb      	ldrb	r3, [r7, #31]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d828      	bhi.n	800499e <UART_SetConfig+0x462>
 800494c:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <UART_SetConfig+0x418>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004979 	.word	0x08004979
 8004958:	08004981 	.word	0x08004981
 800495c:	08004989 	.word	0x08004989
 8004960:	0800499f 	.word	0x0800499f
 8004964:	0800498f 	.word	0x0800498f
 8004968:	0800499f 	.word	0x0800499f
 800496c:	0800499f 	.word	0x0800499f
 8004970:	0800499f 	.word	0x0800499f
 8004974:	08004997 	.word	0x08004997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004978:	f7fe fd62 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 800497c:	61b8      	str	r0, [r7, #24]
        break;
 800497e:	e013      	b.n	80049a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004980:	f7fe fd72 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 8004984:	61b8      	str	r0, [r7, #24]
        break;
 8004986:	e00f      	b.n	80049a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004988:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <UART_SetConfig+0x4c4>)
 800498a:	61bb      	str	r3, [r7, #24]
        break;
 800498c:	e00c      	b.n	80049a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800498e:	f7fe fc45 	bl	800321c <HAL_RCC_GetSysClockFreq>
 8004992:	61b8      	str	r0, [r7, #24]
        break;
 8004994:	e008      	b.n	80049a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800499a:	61bb      	str	r3, [r7, #24]
        break;
 800499c:	e004      	b.n	80049a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	77bb      	strb	r3, [r7, #30]
        break;
 80049a6:	bf00      	nop
    }

    if (pclk != 0U)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d018      	beq.n	80049e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	085a      	lsrs	r2, r3, #1
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	441a      	add	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b0f      	cmp	r3, #15
 80049c6:	d909      	bls.n	80049dc <UART_SetConfig+0x4a0>
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ce:	d205      	bcs.n	80049dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	e001      	b.n	80049e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40007c00 	.word	0x40007c00
 80049fc:	40023800 	.word	0x40023800
 8004a00:	00f42400 	.word	0x00f42400

08004a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01a      	beq.n	8004b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b02:	d10a      	bne.n	8004b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	605a      	str	r2, [r3, #4]
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b098      	sub	sp, #96	@ 0x60
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b58:	f7fc fc88 	bl	800146c <HAL_GetTick>
 8004b5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d12e      	bne.n	8004bca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b74:	2200      	movs	r2, #0
 8004b76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f88c 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d021      	beq.n	8004bca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ba6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e6      	bne.n	8004b86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e062      	b.n	8004c90 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d149      	bne.n	8004c6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be0:	2200      	movs	r2, #0
 8004be2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f856 	bl	8004c98 <UART_WaitOnFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d03c      	beq.n	8004c6c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e6      	bne.n	8004bf2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	e853 3f00 	ldrex	r3, [r3]
 8004c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3308      	adds	r3, #8
 8004c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c44:	61fa      	str	r2, [r7, #28]
 8004c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	69b9      	ldr	r1, [r7, #24]
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	617b      	str	r3, [r7, #20]
   return(result);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e5      	bne.n	8004c24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e011      	b.n	8004c90 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3758      	adds	r7, #88	@ 0x58
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca8:	e04f      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d04b      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb2:	f7fc fbdb 	bl	800146c <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e04e      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d037      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b80      	cmp	r3, #128	@ 0x80
 8004cde:	d034      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b40      	cmp	r3, #64	@ 0x40
 8004ce4:	d031      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d110      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f8ff 	bl	8004f00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2208      	movs	r2, #8
 8004d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e029      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d24:	d111      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f8e5 	bl	8004f00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e00f      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4013      	ands	r3, r2
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d0a0      	beq.n	8004caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b097      	sub	sp, #92	@ 0x5c
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da6:	d10e      	bne.n	8004dc6 <UART_Start_Receive_IT+0x52>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <UART_Start_Receive_IT+0x48>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004db6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dba:	e02d      	b.n	8004e18 <UART_Start_Receive_IT+0xa4>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	22ff      	movs	r2, #255	@ 0xff
 8004dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dc4:	e028      	b.n	8004e18 <UART_Start_Receive_IT+0xa4>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10d      	bne.n	8004dea <UART_Start_Receive_IT+0x76>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <UART_Start_Receive_IT+0x6c>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	22ff      	movs	r2, #255	@ 0xff
 8004dda:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dde:	e01b      	b.n	8004e18 <UART_Start_Receive_IT+0xa4>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	227f      	movs	r2, #127	@ 0x7f
 8004de4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004de8:	e016      	b.n	8004e18 <UART_Start_Receive_IT+0xa4>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004df2:	d10d      	bne.n	8004e10 <UART_Start_Receive_IT+0x9c>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <UART_Start_Receive_IT+0x92>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	227f      	movs	r2, #127	@ 0x7f
 8004e00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e04:	e008      	b.n	8004e18 <UART_Start_Receive_IT+0xa4>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	223f      	movs	r2, #63	@ 0x3f
 8004e0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e0e:	e003      	b.n	8004e18 <UART_Start_Receive_IT+0xa4>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2222      	movs	r2, #34	@ 0x22
 8004e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e48:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e4a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e64:	d107      	bne.n	8004e76 <UART_Start_Receive_IT+0x102>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d103      	bne.n	8004e76 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a21      	ldr	r2, [pc, #132]	@ (8004ef8 <UART_Start_Receive_IT+0x184>)
 8004e72:	669a      	str	r2, [r3, #104]	@ 0x68
 8004e74:	e002      	b.n	8004e7c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a20      	ldr	r2, [pc, #128]	@ (8004efc <UART_Start_Receive_IT+0x188>)
 8004e7a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d019      	beq.n	8004eb8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ea4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e6      	bne.n	8004e84 <UART_Start_Receive_IT+0x110>
 8004eb6:	e018      	b.n	8004eea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f043 0320 	orr.w	r3, r3, #32
 8004ecc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ed6:	623b      	str	r3, [r7, #32]
 8004ed8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	69f9      	ldr	r1, [r7, #28]
 8004edc:	6a3a      	ldr	r2, [r7, #32]
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e6      	bne.n	8004eb8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	375c      	adds	r7, #92	@ 0x5c
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	080051f1 	.word	0x080051f1
 8004efc:	08005049 	.word	0x08005049

08004f00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b095      	sub	sp, #84	@ 0x54
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f26:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f28:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e6      	bne.n	8004f08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d118      	bne.n	8004fa8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f023 0310 	bic.w	r3, r3, #16
 8004f8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6979      	ldr	r1, [r7, #20]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e6      	bne.n	8004f76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fbc:	bf00      	nop
 8004fbe:	3754      	adds	r7, #84	@ 0x54
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff fa88 	bl	80044fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	60bb      	str	r3, [r7, #8]
   return(result);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	6979      	ldr	r1, [r7, #20]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	613b      	str	r3, [r7, #16]
   return(result);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e6      	bne.n	8004ffc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fa54 	bl	80044e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005040:	bf00      	nop
 8005042:	3720      	adds	r7, #32
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b09c      	sub	sp, #112	@ 0x70
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005056:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005060:	2b22      	cmp	r3, #34	@ 0x22
 8005062:	f040 80b9 	bne.w	80051d8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005070:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005074:	b2d9      	uxtb	r1, r3
 8005076:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800507a:	b2da      	uxtb	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005080:	400a      	ands	r2, r1
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f040 809c 	bne.w	80051e8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e6      	bne.n	80050b0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3308      	adds	r3, #8
 80050e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005102:	647a      	str	r2, [r7, #68]	@ 0x44
 8005104:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005108:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e5      	bne.n	80050e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d018      	beq.n	800516a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	623b      	str	r3, [r7, #32]
   return(result);
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800514c:	663b      	str	r3, [r7, #96]	@ 0x60
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005156:	633b      	str	r3, [r7, #48]	@ 0x30
 8005158:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800515c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e6      	bne.n	8005138 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800516e:	2b01      	cmp	r3, #1
 8005170:	d12e      	bne.n	80051d0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	60fb      	str	r3, [r7, #12]
   return(result);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f023 0310 	bic.w	r3, r3, #16
 800518c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	69b9      	ldr	r1, [r7, #24]
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	617b      	str	r3, [r7, #20]
   return(result);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e6      	bne.n	8005178 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d103      	bne.n	80051c0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2210      	movs	r2, #16
 80051be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051c6:	4619      	mov	r1, r3
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff f9a1 	bl	8004510 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051ce:	e00b      	b.n	80051e8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7fb fd6d 	bl	8000cb0 <HAL_UART_RxCpltCallback>
}
 80051d6:	e007      	b.n	80051e8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0208 	orr.w	r2, r2, #8
 80051e6:	619a      	str	r2, [r3, #24]
}
 80051e8:	bf00      	nop
 80051ea:	3770      	adds	r7, #112	@ 0x70
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b09c      	sub	sp, #112	@ 0x70
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005208:	2b22      	cmp	r3, #34	@ 0x22
 800520a:	f040 80b9 	bne.w	8005380 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800521e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005222:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005226:	4013      	ands	r3, r2
 8005228:	b29a      	uxth	r2, r3
 800522a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800522c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005232:	1c9a      	adds	r2, r3, #2
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	f040 809c 	bne.w	8005390 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800526c:	667b      	str	r3, [r7, #100]	@ 0x64
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005276:	657b      	str	r3, [r7, #84]	@ 0x54
 8005278:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800527c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e6      	bne.n	8005258 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3308      	adds	r3, #8
 8005290:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3308      	adds	r3, #8
 80052a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80052ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e5      	bne.n	800528a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d018      	beq.n	8005312 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005300:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e6      	bne.n	80052e0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005316:	2b01      	cmp	r3, #1
 8005318:	d12e      	bne.n	8005378 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	60bb      	str	r3, [r7, #8]
   return(result);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f023 0310 	bic.w	r3, r3, #16
 8005334:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6979      	ldr	r1, [r7, #20]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	613b      	str	r3, [r7, #16]
   return(result);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e6      	bne.n	8005320 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b10      	cmp	r3, #16
 800535e:	d103      	bne.n	8005368 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2210      	movs	r2, #16
 8005366:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff f8cd 	bl	8004510 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005376:	e00b      	b.n	8005390 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fb fc99 	bl	8000cb0 <HAL_UART_RxCpltCallback>
}
 800537e:	e007      	b.n	8005390 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0208 	orr.w	r2, r2, #8
 800538e:	619a      	str	r2, [r3, #24]
}
 8005390:	bf00      	nop
 8005392:	3770      	adds	r7, #112	@ 0x70
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005398:	b084      	sub	sp, #16
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	f107 001c 	add.w	r0, r7, #28
 80053a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d121      	bne.n	80053f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	4b21      	ldr	r3, [pc, #132]	@ (8005448 <USB_CoreInit+0xb0>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d105      	bne.n	80053ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa92 	bl	8005914 <USB_CoreReset>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
 80053f4:	e010      	b.n	8005418 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fa86 	bl	8005914 <USB_CoreReset>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005410:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005418:	7fbb      	ldrb	r3, [r7, #30]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d10b      	bne.n	8005436 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f043 0206 	orr.w	r2, r3, #6
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f043 0220 	orr.w	r2, r3, #32
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005442:	b004      	add	sp, #16
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	ffbdffbf 	.word	0xffbdffbf

0800544c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f023 0201 	bic.w	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d115      	bne.n	80054bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800549c:	200a      	movs	r0, #10
 800549e:	f7fb fff1 	bl	8001484 <HAL_Delay>
      ms += 10U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	330a      	adds	r3, #10
 80054a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa25 	bl	80058f8 <USB_GetMode>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d01e      	beq.n	80054f2 <USB_SetCurrentMode+0x84>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80054b8:	d9f0      	bls.n	800549c <USB_SetCurrentMode+0x2e>
 80054ba:	e01a      	b.n	80054f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d115      	bne.n	80054ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054ce:	200a      	movs	r0, #10
 80054d0:	f7fb ffd8 	bl	8001484 <HAL_Delay>
      ms += 10U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	330a      	adds	r3, #10
 80054d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fa0c 	bl	80058f8 <USB_GetMode>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <USB_SetCurrentMode+0x84>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80054ea:	d9f0      	bls.n	80054ce <USB_SetCurrentMode+0x60>
 80054ec:	e001      	b.n	80054f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e005      	b.n	80054fe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80054f6:	d101      	bne.n	80054fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005508:	b084      	sub	sp, #16
 800550a:	b580      	push	{r7, lr}
 800550c:	b086      	sub	sp, #24
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	e009      	b.n	800553c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	3340      	adds	r3, #64	@ 0x40
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	2200      	movs	r2, #0
 8005534:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	3301      	adds	r3, #1
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b0e      	cmp	r3, #14
 8005540:	d9f2      	bls.n	8005528 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005542:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005546:	2b00      	cmp	r3, #0
 8005548:	d11c      	bne.n	8005584 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005558:	f043 0302 	orr.w	r3, r3, #2
 800555c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005562:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e005      	b.n	8005590 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005596:	461a      	mov	r2, r3
 8005598:	2300      	movs	r3, #0
 800559a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800559c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10d      	bne.n	80055c0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d104      	bne.n	80055b6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055ac:	2100      	movs	r1, #0
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f968 	bl	8005884 <USB_SetDevSpeed>
 80055b4:	e008      	b.n	80055c8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055b6:	2101      	movs	r1, #1
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f963 	bl	8005884 <USB_SetDevSpeed>
 80055be:	e003      	b.n	80055c8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055c0:	2103      	movs	r1, #3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f95e 	bl	8005884 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055c8:	2110      	movs	r1, #16
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8fa 	bl	80057c4 <USB_FlushTxFifo>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f924 	bl	8005828 <USB_FlushRxFifo>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f0:	461a      	mov	r2, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fc:	461a      	mov	r2, r3
 80055fe:	2300      	movs	r3, #0
 8005600:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005608:	461a      	mov	r2, r3
 800560a:	2300      	movs	r3, #0
 800560c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	e043      	b.n	800569c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800562a:	d118      	bne.n	800565e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563e:	461a      	mov	r2, r3
 8005640:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e013      	b.n	8005670 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005654:	461a      	mov	r2, r3
 8005656:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	e008      	b.n	8005670 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800566a:	461a      	mov	r2, r3
 800566c:	2300      	movs	r3, #0
 800566e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567c:	461a      	mov	r2, r3
 800567e:	2300      	movs	r3, #0
 8005680:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568e:	461a      	mov	r2, r3
 8005690:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005694:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	3301      	adds	r3, #1
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056a0:	461a      	mov	r2, r3
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d3b5      	bcc.n	8005614 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	e043      	b.n	8005736 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056c4:	d118      	bne.n	80056f8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d8:	461a      	mov	r2, r3
 80056da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	e013      	b.n	800570a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ee:	461a      	mov	r2, r3
 80056f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e008      	b.n	800570a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005704:	461a      	mov	r2, r3
 8005706:	2300      	movs	r3, #0
 8005708:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005716:	461a      	mov	r2, r3
 8005718:	2300      	movs	r3, #0
 800571a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005728:	461a      	mov	r2, r3
 800572a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800572e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	3301      	adds	r3, #1
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800573a:	461a      	mov	r2, r3
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4293      	cmp	r3, r2
 8005740:	d3b5      	bcc.n	80056ae <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005754:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005762:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005764:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f043 0210 	orr.w	r2, r3, #16
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	4b0f      	ldr	r3, [pc, #60]	@ (80057bc <USB_DevInit+0x2b4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005784:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f043 0208 	orr.w	r2, r3, #8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005798:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	4b06      	ldr	r3, [pc, #24]	@ (80057c0 <USB_DevInit+0x2b8>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b8:	b004      	add	sp, #16
 80057ba:	4770      	bx	lr
 80057bc:	803c3800 	.word	0x803c3800
 80057c0:	40000004 	.word	0x40000004

080057c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3301      	adds	r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057de:	d901      	bls.n	80057e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e01b      	b.n	800581c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	daf2      	bge.n	80057d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	019b      	lsls	r3, r3, #6
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005808:	d901      	bls.n	800580e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e006      	b.n	800581c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b20      	cmp	r3, #32
 8005818:	d0f0      	beq.n	80057fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005840:	d901      	bls.n	8005846 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e018      	b.n	8005878 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	daf2      	bge.n	8005834 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2210      	movs	r2, #16
 8005856:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005864:	d901      	bls.n	800586a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e006      	b.n	8005878 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b10      	cmp	r3, #16
 8005874:	d0f0      	beq.n	8005858 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058a4:	4313      	orrs	r3, r2
 80058a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80058d0:	f023 0303 	bic.w	r3, r3, #3
 80058d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058e4:	f043 0302 	orr.w	r3, r3, #2
 80058e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	f003 0301 	and.w	r3, r3, #1
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800592c:	d901      	bls.n	8005932 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e01b      	b.n	800596a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	daf2      	bge.n	8005920 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f043 0201 	orr.w	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3301      	adds	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005956:	d901      	bls.n	800595c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e006      	b.n	800596a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b01      	cmp	r3, #1
 8005966:	d0f0      	beq.n	800594a <USB_CoreReset+0x36>

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <std>:
 8005978:	2300      	movs	r3, #0
 800597a:	b510      	push	{r4, lr}
 800597c:	4604      	mov	r4, r0
 800597e:	e9c0 3300 	strd	r3, r3, [r0]
 8005982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005986:	6083      	str	r3, [r0, #8]
 8005988:	8181      	strh	r1, [r0, #12]
 800598a:	6643      	str	r3, [r0, #100]	@ 0x64
 800598c:	81c2      	strh	r2, [r0, #14]
 800598e:	6183      	str	r3, [r0, #24]
 8005990:	4619      	mov	r1, r3
 8005992:	2208      	movs	r2, #8
 8005994:	305c      	adds	r0, #92	@ 0x5c
 8005996:	f000 f9f9 	bl	8005d8c <memset>
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <std+0x58>)
 800599c:	6263      	str	r3, [r4, #36]	@ 0x24
 800599e:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <std+0x5c>)
 80059a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <std+0x60>)
 80059a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059a6:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <std+0x64>)
 80059a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80059aa:	4b0d      	ldr	r3, [pc, #52]	@ (80059e0 <std+0x68>)
 80059ac:	6224      	str	r4, [r4, #32]
 80059ae:	429c      	cmp	r4, r3
 80059b0:	d006      	beq.n	80059c0 <std+0x48>
 80059b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059b6:	4294      	cmp	r4, r2
 80059b8:	d002      	beq.n	80059c0 <std+0x48>
 80059ba:	33d0      	adds	r3, #208	@ 0xd0
 80059bc:	429c      	cmp	r4, r3
 80059be:	d105      	bne.n	80059cc <std+0x54>
 80059c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c8:	f000 ba58 	b.w	8005e7c <__retarget_lock_init_recursive>
 80059cc:	bd10      	pop	{r4, pc}
 80059ce:	bf00      	nop
 80059d0:	08005bdd 	.word	0x08005bdd
 80059d4:	08005bff 	.word	0x08005bff
 80059d8:	08005c37 	.word	0x08005c37
 80059dc:	08005c5b 	.word	0x08005c5b
 80059e0:	20001068 	.word	0x20001068

080059e4 <stdio_exit_handler>:
 80059e4:	4a02      	ldr	r2, [pc, #8]	@ (80059f0 <stdio_exit_handler+0xc>)
 80059e6:	4903      	ldr	r1, [pc, #12]	@ (80059f4 <stdio_exit_handler+0x10>)
 80059e8:	4803      	ldr	r0, [pc, #12]	@ (80059f8 <stdio_exit_handler+0x14>)
 80059ea:	f000 b869 	b.w	8005ac0 <_fwalk_sglue>
 80059ee:	bf00      	nop
 80059f0:	20000010 	.word	0x20000010
 80059f4:	0800671d 	.word	0x0800671d
 80059f8:	20000020 	.word	0x20000020

080059fc <cleanup_stdio>:
 80059fc:	6841      	ldr	r1, [r0, #4]
 80059fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <cleanup_stdio+0x34>)
 8005a00:	4299      	cmp	r1, r3
 8005a02:	b510      	push	{r4, lr}
 8005a04:	4604      	mov	r4, r0
 8005a06:	d001      	beq.n	8005a0c <cleanup_stdio+0x10>
 8005a08:	f000 fe88 	bl	800671c <_fflush_r>
 8005a0c:	68a1      	ldr	r1, [r4, #8]
 8005a0e:	4b09      	ldr	r3, [pc, #36]	@ (8005a34 <cleanup_stdio+0x38>)
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d002      	beq.n	8005a1a <cleanup_stdio+0x1e>
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 fe81 	bl	800671c <_fflush_r>
 8005a1a:	68e1      	ldr	r1, [r4, #12]
 8005a1c:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <cleanup_stdio+0x3c>)
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	d004      	beq.n	8005a2c <cleanup_stdio+0x30>
 8005a22:	4620      	mov	r0, r4
 8005a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a28:	f000 be78 	b.w	800671c <_fflush_r>
 8005a2c:	bd10      	pop	{r4, pc}
 8005a2e:	bf00      	nop
 8005a30:	20001068 	.word	0x20001068
 8005a34:	200010d0 	.word	0x200010d0
 8005a38:	20001138 	.word	0x20001138

08005a3c <global_stdio_init.part.0>:
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <global_stdio_init.part.0+0x30>)
 8005a40:	4c0b      	ldr	r4, [pc, #44]	@ (8005a70 <global_stdio_init.part.0+0x34>)
 8005a42:	4a0c      	ldr	r2, [pc, #48]	@ (8005a74 <global_stdio_init.part.0+0x38>)
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	4620      	mov	r0, r4
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2104      	movs	r1, #4
 8005a4c:	f7ff ff94 	bl	8005978 <std>
 8005a50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a54:	2201      	movs	r2, #1
 8005a56:	2109      	movs	r1, #9
 8005a58:	f7ff ff8e 	bl	8005978 <std>
 8005a5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a60:	2202      	movs	r2, #2
 8005a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a66:	2112      	movs	r1, #18
 8005a68:	f7ff bf86 	b.w	8005978 <std>
 8005a6c:	200011a0 	.word	0x200011a0
 8005a70:	20001068 	.word	0x20001068
 8005a74:	080059e5 	.word	0x080059e5

08005a78 <__sfp_lock_acquire>:
 8005a78:	4801      	ldr	r0, [pc, #4]	@ (8005a80 <__sfp_lock_acquire+0x8>)
 8005a7a:	f000 ba00 	b.w	8005e7e <__retarget_lock_acquire_recursive>
 8005a7e:	bf00      	nop
 8005a80:	200011a9 	.word	0x200011a9

08005a84 <__sfp_lock_release>:
 8005a84:	4801      	ldr	r0, [pc, #4]	@ (8005a8c <__sfp_lock_release+0x8>)
 8005a86:	f000 b9fb 	b.w	8005e80 <__retarget_lock_release_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	200011a9 	.word	0x200011a9

08005a90 <__sinit>:
 8005a90:	b510      	push	{r4, lr}
 8005a92:	4604      	mov	r4, r0
 8005a94:	f7ff fff0 	bl	8005a78 <__sfp_lock_acquire>
 8005a98:	6a23      	ldr	r3, [r4, #32]
 8005a9a:	b11b      	cbz	r3, 8005aa4 <__sinit+0x14>
 8005a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa0:	f7ff bff0 	b.w	8005a84 <__sfp_lock_release>
 8005aa4:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <__sinit+0x28>)
 8005aa6:	6223      	str	r3, [r4, #32]
 8005aa8:	4b04      	ldr	r3, [pc, #16]	@ (8005abc <__sinit+0x2c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f5      	bne.n	8005a9c <__sinit+0xc>
 8005ab0:	f7ff ffc4 	bl	8005a3c <global_stdio_init.part.0>
 8005ab4:	e7f2      	b.n	8005a9c <__sinit+0xc>
 8005ab6:	bf00      	nop
 8005ab8:	080059fd 	.word	0x080059fd
 8005abc:	200011a0 	.word	0x200011a0

08005ac0 <_fwalk_sglue>:
 8005ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac4:	4607      	mov	r7, r0
 8005ac6:	4688      	mov	r8, r1
 8005ac8:	4614      	mov	r4, r2
 8005aca:	2600      	movs	r6, #0
 8005acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ad4:	d505      	bpl.n	8005ae2 <_fwalk_sglue+0x22>
 8005ad6:	6824      	ldr	r4, [r4, #0]
 8005ad8:	2c00      	cmp	r4, #0
 8005ada:	d1f7      	bne.n	8005acc <_fwalk_sglue+0xc>
 8005adc:	4630      	mov	r0, r6
 8005ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ae2:	89ab      	ldrh	r3, [r5, #12]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d907      	bls.n	8005af8 <_fwalk_sglue+0x38>
 8005ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aec:	3301      	adds	r3, #1
 8005aee:	d003      	beq.n	8005af8 <_fwalk_sglue+0x38>
 8005af0:	4629      	mov	r1, r5
 8005af2:	4638      	mov	r0, r7
 8005af4:	47c0      	blx	r8
 8005af6:	4306      	orrs	r6, r0
 8005af8:	3568      	adds	r5, #104	@ 0x68
 8005afa:	e7e9      	b.n	8005ad0 <_fwalk_sglue+0x10>

08005afc <iprintf>:
 8005afc:	b40f      	push	{r0, r1, r2, r3}
 8005afe:	b507      	push	{r0, r1, r2, lr}
 8005b00:	4906      	ldr	r1, [pc, #24]	@ (8005b1c <iprintf+0x20>)
 8005b02:	ab04      	add	r3, sp, #16
 8005b04:	6808      	ldr	r0, [r1, #0]
 8005b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b0a:	6881      	ldr	r1, [r0, #8]
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	f000 fadb 	bl	80060c8 <_vfiprintf_r>
 8005b12:	b003      	add	sp, #12
 8005b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b18:	b004      	add	sp, #16
 8005b1a:	4770      	bx	lr
 8005b1c:	2000001c 	.word	0x2000001c

08005b20 <_puts_r>:
 8005b20:	6a03      	ldr	r3, [r0, #32]
 8005b22:	b570      	push	{r4, r5, r6, lr}
 8005b24:	6884      	ldr	r4, [r0, #8]
 8005b26:	4605      	mov	r5, r0
 8005b28:	460e      	mov	r6, r1
 8005b2a:	b90b      	cbnz	r3, 8005b30 <_puts_r+0x10>
 8005b2c:	f7ff ffb0 	bl	8005a90 <__sinit>
 8005b30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b32:	07db      	lsls	r3, r3, #31
 8005b34:	d405      	bmi.n	8005b42 <_puts_r+0x22>
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	0598      	lsls	r0, r3, #22
 8005b3a:	d402      	bmi.n	8005b42 <_puts_r+0x22>
 8005b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b3e:	f000 f99e 	bl	8005e7e <__retarget_lock_acquire_recursive>
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	0719      	lsls	r1, r3, #28
 8005b46:	d502      	bpl.n	8005b4e <_puts_r+0x2e>
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d135      	bne.n	8005bba <_puts_r+0x9a>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 f8c5 	bl	8005ce0 <__swsetup_r>
 8005b56:	b380      	cbz	r0, 8005bba <_puts_r+0x9a>
 8005b58:	f04f 35ff 	mov.w	r5, #4294967295
 8005b5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b5e:	07da      	lsls	r2, r3, #31
 8005b60:	d405      	bmi.n	8005b6e <_puts_r+0x4e>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	059b      	lsls	r3, r3, #22
 8005b66:	d402      	bmi.n	8005b6e <_puts_r+0x4e>
 8005b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b6a:	f000 f989 	bl	8005e80 <__retarget_lock_release_recursive>
 8005b6e:	4628      	mov	r0, r5
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	da04      	bge.n	8005b80 <_puts_r+0x60>
 8005b76:	69a2      	ldr	r2, [r4, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	dc17      	bgt.n	8005bac <_puts_r+0x8c>
 8005b7c:	290a      	cmp	r1, #10
 8005b7e:	d015      	beq.n	8005bac <_puts_r+0x8c>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	6022      	str	r2, [r4, #0]
 8005b86:	7019      	strb	r1, [r3, #0]
 8005b88:	68a3      	ldr	r3, [r4, #8]
 8005b8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	60a3      	str	r3, [r4, #8]
 8005b92:	2900      	cmp	r1, #0
 8005b94:	d1ed      	bne.n	8005b72 <_puts_r+0x52>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da11      	bge.n	8005bbe <_puts_r+0x9e>
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	210a      	movs	r1, #10
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 f85f 	bl	8005c62 <__swbuf_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d0d7      	beq.n	8005b58 <_puts_r+0x38>
 8005ba8:	250a      	movs	r5, #10
 8005baa:	e7d7      	b.n	8005b5c <_puts_r+0x3c>
 8005bac:	4622      	mov	r2, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 f857 	bl	8005c62 <__swbuf_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d1e7      	bne.n	8005b88 <_puts_r+0x68>
 8005bb8:	e7ce      	b.n	8005b58 <_puts_r+0x38>
 8005bba:	3e01      	subs	r6, #1
 8005bbc:	e7e4      	b.n	8005b88 <_puts_r+0x68>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	6022      	str	r2, [r4, #0]
 8005bc4:	220a      	movs	r2, #10
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	e7ee      	b.n	8005ba8 <_puts_r+0x88>
	...

08005bcc <puts>:
 8005bcc:	4b02      	ldr	r3, [pc, #8]	@ (8005bd8 <puts+0xc>)
 8005bce:	4601      	mov	r1, r0
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	f7ff bfa5 	b.w	8005b20 <_puts_r>
 8005bd6:	bf00      	nop
 8005bd8:	2000001c 	.word	0x2000001c

08005bdc <__sread>:
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	460c      	mov	r4, r1
 8005be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be4:	f000 f8fc 	bl	8005de0 <_read_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	bfab      	itete	ge
 8005bec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bee:	89a3      	ldrhlt	r3, [r4, #12]
 8005bf0:	181b      	addge	r3, r3, r0
 8005bf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bf6:	bfac      	ite	ge
 8005bf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bfa:	81a3      	strhlt	r3, [r4, #12]
 8005bfc:	bd10      	pop	{r4, pc}

08005bfe <__swrite>:
 8005bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c02:	461f      	mov	r7, r3
 8005c04:	898b      	ldrh	r3, [r1, #12]
 8005c06:	05db      	lsls	r3, r3, #23
 8005c08:	4605      	mov	r5, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	d505      	bpl.n	8005c1c <__swrite+0x1e>
 8005c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c14:	2302      	movs	r3, #2
 8005c16:	2200      	movs	r2, #0
 8005c18:	f000 f8d0 	bl	8005dbc <_lseek_r>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	4632      	mov	r2, r6
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c32:	f000 b8e7 	b.w	8005e04 <_write_r>

08005c36 <__sseek>:
 8005c36:	b510      	push	{r4, lr}
 8005c38:	460c      	mov	r4, r1
 8005c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3e:	f000 f8bd 	bl	8005dbc <_lseek_r>
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	bf15      	itete	ne
 8005c48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c52:	81a3      	strheq	r3, [r4, #12]
 8005c54:	bf18      	it	ne
 8005c56:	81a3      	strhne	r3, [r4, #12]
 8005c58:	bd10      	pop	{r4, pc}

08005c5a <__sclose>:
 8005c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5e:	f000 b89d 	b.w	8005d9c <_close_r>

08005c62 <__swbuf_r>:
 8005c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c64:	460e      	mov	r6, r1
 8005c66:	4614      	mov	r4, r2
 8005c68:	4605      	mov	r5, r0
 8005c6a:	b118      	cbz	r0, 8005c74 <__swbuf_r+0x12>
 8005c6c:	6a03      	ldr	r3, [r0, #32]
 8005c6e:	b90b      	cbnz	r3, 8005c74 <__swbuf_r+0x12>
 8005c70:	f7ff ff0e 	bl	8005a90 <__sinit>
 8005c74:	69a3      	ldr	r3, [r4, #24]
 8005c76:	60a3      	str	r3, [r4, #8]
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	071a      	lsls	r2, r3, #28
 8005c7c:	d501      	bpl.n	8005c82 <__swbuf_r+0x20>
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	b943      	cbnz	r3, 8005c94 <__swbuf_r+0x32>
 8005c82:	4621      	mov	r1, r4
 8005c84:	4628      	mov	r0, r5
 8005c86:	f000 f82b 	bl	8005ce0 <__swsetup_r>
 8005c8a:	b118      	cbz	r0, 8005c94 <__swbuf_r+0x32>
 8005c8c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c90:	4638      	mov	r0, r7
 8005c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	6922      	ldr	r2, [r4, #16]
 8005c98:	1a98      	subs	r0, r3, r2
 8005c9a:	6963      	ldr	r3, [r4, #20]
 8005c9c:	b2f6      	uxtb	r6, r6
 8005c9e:	4283      	cmp	r3, r0
 8005ca0:	4637      	mov	r7, r6
 8005ca2:	dc05      	bgt.n	8005cb0 <__swbuf_r+0x4e>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fd38 	bl	800671c <_fflush_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d1ed      	bne.n	8005c8c <__swbuf_r+0x2a>
 8005cb0:	68a3      	ldr	r3, [r4, #8]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	60a3      	str	r3, [r4, #8]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	6022      	str	r2, [r4, #0]
 8005cbc:	701e      	strb	r6, [r3, #0]
 8005cbe:	6962      	ldr	r2, [r4, #20]
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d004      	beq.n	8005cd0 <__swbuf_r+0x6e>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	07db      	lsls	r3, r3, #31
 8005cca:	d5e1      	bpl.n	8005c90 <__swbuf_r+0x2e>
 8005ccc:	2e0a      	cmp	r6, #10
 8005cce:	d1df      	bne.n	8005c90 <__swbuf_r+0x2e>
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f000 fd22 	bl	800671c <_fflush_r>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d0d9      	beq.n	8005c90 <__swbuf_r+0x2e>
 8005cdc:	e7d6      	b.n	8005c8c <__swbuf_r+0x2a>
	...

08005ce0 <__swsetup_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4b29      	ldr	r3, [pc, #164]	@ (8005d88 <__swsetup_r+0xa8>)
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	460c      	mov	r4, r1
 8005cea:	b118      	cbz	r0, 8005cf4 <__swsetup_r+0x14>
 8005cec:	6a03      	ldr	r3, [r0, #32]
 8005cee:	b90b      	cbnz	r3, 8005cf4 <__swsetup_r+0x14>
 8005cf0:	f7ff fece 	bl	8005a90 <__sinit>
 8005cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf8:	0719      	lsls	r1, r3, #28
 8005cfa:	d422      	bmi.n	8005d42 <__swsetup_r+0x62>
 8005cfc:	06da      	lsls	r2, r3, #27
 8005cfe:	d407      	bmi.n	8005d10 <__swsetup_r+0x30>
 8005d00:	2209      	movs	r2, #9
 8005d02:	602a      	str	r2, [r5, #0]
 8005d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d08:	81a3      	strh	r3, [r4, #12]
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	e033      	b.n	8005d78 <__swsetup_r+0x98>
 8005d10:	0758      	lsls	r0, r3, #29
 8005d12:	d512      	bpl.n	8005d3a <__swsetup_r+0x5a>
 8005d14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d16:	b141      	cbz	r1, 8005d2a <__swsetup_r+0x4a>
 8005d18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d1c:	4299      	cmp	r1, r3
 8005d1e:	d002      	beq.n	8005d26 <__swsetup_r+0x46>
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f8af 	bl	8005e84 <_free_r>
 8005d26:	2300      	movs	r3, #0
 8005d28:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	2300      	movs	r3, #0
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f043 0308 	orr.w	r3, r3, #8
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	b94b      	cbnz	r3, 8005d5a <__swsetup_r+0x7a>
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d50:	d003      	beq.n	8005d5a <__swsetup_r+0x7a>
 8005d52:	4621      	mov	r1, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 fd2f 	bl	80067b8 <__smakebuf_r>
 8005d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d5e:	f013 0201 	ands.w	r2, r3, #1
 8005d62:	d00a      	beq.n	8005d7a <__swsetup_r+0x9a>
 8005d64:	2200      	movs	r2, #0
 8005d66:	60a2      	str	r2, [r4, #8]
 8005d68:	6962      	ldr	r2, [r4, #20]
 8005d6a:	4252      	negs	r2, r2
 8005d6c:	61a2      	str	r2, [r4, #24]
 8005d6e:	6922      	ldr	r2, [r4, #16]
 8005d70:	b942      	cbnz	r2, 8005d84 <__swsetup_r+0xa4>
 8005d72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d76:	d1c5      	bne.n	8005d04 <__swsetup_r+0x24>
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	0799      	lsls	r1, r3, #30
 8005d7c:	bf58      	it	pl
 8005d7e:	6962      	ldrpl	r2, [r4, #20]
 8005d80:	60a2      	str	r2, [r4, #8]
 8005d82:	e7f4      	b.n	8005d6e <__swsetup_r+0x8e>
 8005d84:	2000      	movs	r0, #0
 8005d86:	e7f7      	b.n	8005d78 <__swsetup_r+0x98>
 8005d88:	2000001c 	.word	0x2000001c

08005d8c <memset>:
 8005d8c:	4402      	add	r2, r0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d100      	bne.n	8005d96 <memset+0xa>
 8005d94:	4770      	bx	lr
 8005d96:	f803 1b01 	strb.w	r1, [r3], #1
 8005d9a:	e7f9      	b.n	8005d90 <memset+0x4>

08005d9c <_close_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d06      	ldr	r5, [pc, #24]	@ (8005db8 <_close_r+0x1c>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fb fa69 	bl	800127e <_close>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_close_r+0x1a>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_close_r+0x1a>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	200011a4 	.word	0x200011a4

08005dbc <_lseek_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d07      	ldr	r5, [pc, #28]	@ (8005ddc <_lseek_r+0x20>)
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	4608      	mov	r0, r1
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	602a      	str	r2, [r5, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f7fb fa7e 	bl	80012cc <_lseek>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_lseek_r+0x1e>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_lseek_r+0x1e>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	200011a4 	.word	0x200011a4

08005de0 <_read_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d07      	ldr	r5, [pc, #28]	@ (8005e00 <_read_r+0x20>)
 8005de4:	4604      	mov	r4, r0
 8005de6:	4608      	mov	r0, r1
 8005de8:	4611      	mov	r1, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7fb fa0c 	bl	800120c <_read>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_read_r+0x1e>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_read_r+0x1e>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	200011a4 	.word	0x200011a4

08005e04 <_write_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d07      	ldr	r5, [pc, #28]	@ (8005e24 <_write_r+0x20>)
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	602a      	str	r2, [r5, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fb fa17 	bl	8001246 <_write>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_write_r+0x1e>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_write_r+0x1e>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	200011a4 	.word	0x200011a4

08005e28 <__errno>:
 8005e28:	4b01      	ldr	r3, [pc, #4]	@ (8005e30 <__errno+0x8>)
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	2000001c 	.word	0x2000001c

08005e34 <__libc_init_array>:
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	4d0d      	ldr	r5, [pc, #52]	@ (8005e6c <__libc_init_array+0x38>)
 8005e38:	4c0d      	ldr	r4, [pc, #52]	@ (8005e70 <__libc_init_array+0x3c>)
 8005e3a:	1b64      	subs	r4, r4, r5
 8005e3c:	10a4      	asrs	r4, r4, #2
 8005e3e:	2600      	movs	r6, #0
 8005e40:	42a6      	cmp	r6, r4
 8005e42:	d109      	bne.n	8005e58 <__libc_init_array+0x24>
 8005e44:	4d0b      	ldr	r5, [pc, #44]	@ (8005e74 <__libc_init_array+0x40>)
 8005e46:	4c0c      	ldr	r4, [pc, #48]	@ (8005e78 <__libc_init_array+0x44>)
 8005e48:	f000 fd24 	bl	8006894 <_init>
 8005e4c:	1b64      	subs	r4, r4, r5
 8005e4e:	10a4      	asrs	r4, r4, #2
 8005e50:	2600      	movs	r6, #0
 8005e52:	42a6      	cmp	r6, r4
 8005e54:	d105      	bne.n	8005e62 <__libc_init_array+0x2e>
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
 8005e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e5c:	4798      	blx	r3
 8005e5e:	3601      	adds	r6, #1
 8005e60:	e7ee      	b.n	8005e40 <__libc_init_array+0xc>
 8005e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e66:	4798      	blx	r3
 8005e68:	3601      	adds	r6, #1
 8005e6a:	e7f2      	b.n	8005e52 <__libc_init_array+0x1e>
 8005e6c:	08006968 	.word	0x08006968
 8005e70:	08006968 	.word	0x08006968
 8005e74:	08006968 	.word	0x08006968
 8005e78:	0800696c 	.word	0x0800696c

08005e7c <__retarget_lock_init_recursive>:
 8005e7c:	4770      	bx	lr

08005e7e <__retarget_lock_acquire_recursive>:
 8005e7e:	4770      	bx	lr

08005e80 <__retarget_lock_release_recursive>:
 8005e80:	4770      	bx	lr
	...

08005e84 <_free_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4605      	mov	r5, r0
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d041      	beq.n	8005f10 <_free_r+0x8c>
 8005e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e90:	1f0c      	subs	r4, r1, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bfb8      	it	lt
 8005e96:	18e4      	addlt	r4, r4, r3
 8005e98:	f000 f8e0 	bl	800605c <__malloc_lock>
 8005e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f14 <_free_r+0x90>)
 8005e9e:	6813      	ldr	r3, [r2, #0]
 8005ea0:	b933      	cbnz	r3, 8005eb0 <_free_r+0x2c>
 8005ea2:	6063      	str	r3, [r4, #4]
 8005ea4:	6014      	str	r4, [r2, #0]
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eac:	f000 b8dc 	b.w	8006068 <__malloc_unlock>
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d908      	bls.n	8005ec6 <_free_r+0x42>
 8005eb4:	6820      	ldr	r0, [r4, #0]
 8005eb6:	1821      	adds	r1, r4, r0
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	bf01      	itttt	eq
 8005ebc:	6819      	ldreq	r1, [r3, #0]
 8005ebe:	685b      	ldreq	r3, [r3, #4]
 8005ec0:	1809      	addeq	r1, r1, r0
 8005ec2:	6021      	streq	r1, [r4, #0]
 8005ec4:	e7ed      	b.n	8005ea2 <_free_r+0x1e>
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	b10b      	cbz	r3, 8005ed0 <_free_r+0x4c>
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	d9fa      	bls.n	8005ec6 <_free_r+0x42>
 8005ed0:	6811      	ldr	r1, [r2, #0]
 8005ed2:	1850      	adds	r0, r2, r1
 8005ed4:	42a0      	cmp	r0, r4
 8005ed6:	d10b      	bne.n	8005ef0 <_free_r+0x6c>
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	4401      	add	r1, r0
 8005edc:	1850      	adds	r0, r2, r1
 8005ede:	4283      	cmp	r3, r0
 8005ee0:	6011      	str	r1, [r2, #0]
 8005ee2:	d1e0      	bne.n	8005ea6 <_free_r+0x22>
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	6053      	str	r3, [r2, #4]
 8005eea:	4408      	add	r0, r1
 8005eec:	6010      	str	r0, [r2, #0]
 8005eee:	e7da      	b.n	8005ea6 <_free_r+0x22>
 8005ef0:	d902      	bls.n	8005ef8 <_free_r+0x74>
 8005ef2:	230c      	movs	r3, #12
 8005ef4:	602b      	str	r3, [r5, #0]
 8005ef6:	e7d6      	b.n	8005ea6 <_free_r+0x22>
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	1821      	adds	r1, r4, r0
 8005efc:	428b      	cmp	r3, r1
 8005efe:	bf04      	itt	eq
 8005f00:	6819      	ldreq	r1, [r3, #0]
 8005f02:	685b      	ldreq	r3, [r3, #4]
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	bf04      	itt	eq
 8005f08:	1809      	addeq	r1, r1, r0
 8005f0a:	6021      	streq	r1, [r4, #0]
 8005f0c:	6054      	str	r4, [r2, #4]
 8005f0e:	e7ca      	b.n	8005ea6 <_free_r+0x22>
 8005f10:	bd38      	pop	{r3, r4, r5, pc}
 8005f12:	bf00      	nop
 8005f14:	200011b0 	.word	0x200011b0

08005f18 <sbrk_aligned>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005f58 <sbrk_aligned+0x40>)
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	6831      	ldr	r1, [r6, #0]
 8005f20:	4605      	mov	r5, r0
 8005f22:	b911      	cbnz	r1, 8005f2a <sbrk_aligned+0x12>
 8005f24:	f000 fca6 	bl	8006874 <_sbrk_r>
 8005f28:	6030      	str	r0, [r6, #0]
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f000 fca1 	bl	8006874 <_sbrk_r>
 8005f32:	1c43      	adds	r3, r0, #1
 8005f34:	d103      	bne.n	8005f3e <sbrk_aligned+0x26>
 8005f36:	f04f 34ff 	mov.w	r4, #4294967295
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
 8005f3e:	1cc4      	adds	r4, r0, #3
 8005f40:	f024 0403 	bic.w	r4, r4, #3
 8005f44:	42a0      	cmp	r0, r4
 8005f46:	d0f8      	beq.n	8005f3a <sbrk_aligned+0x22>
 8005f48:	1a21      	subs	r1, r4, r0
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f000 fc92 	bl	8006874 <_sbrk_r>
 8005f50:	3001      	adds	r0, #1
 8005f52:	d1f2      	bne.n	8005f3a <sbrk_aligned+0x22>
 8005f54:	e7ef      	b.n	8005f36 <sbrk_aligned+0x1e>
 8005f56:	bf00      	nop
 8005f58:	200011ac 	.word	0x200011ac

08005f5c <_malloc_r>:
 8005f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f60:	1ccd      	adds	r5, r1, #3
 8005f62:	f025 0503 	bic.w	r5, r5, #3
 8005f66:	3508      	adds	r5, #8
 8005f68:	2d0c      	cmp	r5, #12
 8005f6a:	bf38      	it	cc
 8005f6c:	250c      	movcc	r5, #12
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	4606      	mov	r6, r0
 8005f72:	db01      	blt.n	8005f78 <_malloc_r+0x1c>
 8005f74:	42a9      	cmp	r1, r5
 8005f76:	d904      	bls.n	8005f82 <_malloc_r+0x26>
 8005f78:	230c      	movs	r3, #12
 8005f7a:	6033      	str	r3, [r6, #0]
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006058 <_malloc_r+0xfc>
 8005f86:	f000 f869 	bl	800605c <__malloc_lock>
 8005f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f8e:	461c      	mov	r4, r3
 8005f90:	bb44      	cbnz	r4, 8005fe4 <_malloc_r+0x88>
 8005f92:	4629      	mov	r1, r5
 8005f94:	4630      	mov	r0, r6
 8005f96:	f7ff ffbf 	bl	8005f18 <sbrk_aligned>
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	d158      	bne.n	8006052 <_malloc_r+0xf6>
 8005fa0:	f8d8 4000 	ldr.w	r4, [r8]
 8005fa4:	4627      	mov	r7, r4
 8005fa6:	2f00      	cmp	r7, #0
 8005fa8:	d143      	bne.n	8006032 <_malloc_r+0xd6>
 8005faa:	2c00      	cmp	r4, #0
 8005fac:	d04b      	beq.n	8006046 <_malloc_r+0xea>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	eb04 0903 	add.w	r9, r4, r3
 8005fb8:	f000 fc5c 	bl	8006874 <_sbrk_r>
 8005fbc:	4581      	cmp	r9, r0
 8005fbe:	d142      	bne.n	8006046 <_malloc_r+0xea>
 8005fc0:	6821      	ldr	r1, [r4, #0]
 8005fc2:	1a6d      	subs	r5, r5, r1
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f7ff ffa6 	bl	8005f18 <sbrk_aligned>
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d03a      	beq.n	8006046 <_malloc_r+0xea>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	442b      	add	r3, r5
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	bb62      	cbnz	r2, 8006038 <_malloc_r+0xdc>
 8005fde:	f8c8 7000 	str.w	r7, [r8]
 8005fe2:	e00f      	b.n	8006004 <_malloc_r+0xa8>
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	1b52      	subs	r2, r2, r5
 8005fe8:	d420      	bmi.n	800602c <_malloc_r+0xd0>
 8005fea:	2a0b      	cmp	r2, #11
 8005fec:	d917      	bls.n	800601e <_malloc_r+0xc2>
 8005fee:	1961      	adds	r1, r4, r5
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	6025      	str	r5, [r4, #0]
 8005ff4:	bf18      	it	ne
 8005ff6:	6059      	strne	r1, [r3, #4]
 8005ff8:	6863      	ldr	r3, [r4, #4]
 8005ffa:	bf08      	it	eq
 8005ffc:	f8c8 1000 	streq.w	r1, [r8]
 8006000:	5162      	str	r2, [r4, r5]
 8006002:	604b      	str	r3, [r1, #4]
 8006004:	4630      	mov	r0, r6
 8006006:	f000 f82f 	bl	8006068 <__malloc_unlock>
 800600a:	f104 000b 	add.w	r0, r4, #11
 800600e:	1d23      	adds	r3, r4, #4
 8006010:	f020 0007 	bic.w	r0, r0, #7
 8006014:	1ac2      	subs	r2, r0, r3
 8006016:	bf1c      	itt	ne
 8006018:	1a1b      	subne	r3, r3, r0
 800601a:	50a3      	strne	r3, [r4, r2]
 800601c:	e7af      	b.n	8005f7e <_malloc_r+0x22>
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	42a3      	cmp	r3, r4
 8006022:	bf0c      	ite	eq
 8006024:	f8c8 2000 	streq.w	r2, [r8]
 8006028:	605a      	strne	r2, [r3, #4]
 800602a:	e7eb      	b.n	8006004 <_malloc_r+0xa8>
 800602c:	4623      	mov	r3, r4
 800602e:	6864      	ldr	r4, [r4, #4]
 8006030:	e7ae      	b.n	8005f90 <_malloc_r+0x34>
 8006032:	463c      	mov	r4, r7
 8006034:	687f      	ldr	r7, [r7, #4]
 8006036:	e7b6      	b.n	8005fa6 <_malloc_r+0x4a>
 8006038:	461a      	mov	r2, r3
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	42a3      	cmp	r3, r4
 800603e:	d1fb      	bne.n	8006038 <_malloc_r+0xdc>
 8006040:	2300      	movs	r3, #0
 8006042:	6053      	str	r3, [r2, #4]
 8006044:	e7de      	b.n	8006004 <_malloc_r+0xa8>
 8006046:	230c      	movs	r3, #12
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	4630      	mov	r0, r6
 800604c:	f000 f80c 	bl	8006068 <__malloc_unlock>
 8006050:	e794      	b.n	8005f7c <_malloc_r+0x20>
 8006052:	6005      	str	r5, [r0, #0]
 8006054:	e7d6      	b.n	8006004 <_malloc_r+0xa8>
 8006056:	bf00      	nop
 8006058:	200011b0 	.word	0x200011b0

0800605c <__malloc_lock>:
 800605c:	4801      	ldr	r0, [pc, #4]	@ (8006064 <__malloc_lock+0x8>)
 800605e:	f7ff bf0e 	b.w	8005e7e <__retarget_lock_acquire_recursive>
 8006062:	bf00      	nop
 8006064:	200011a8 	.word	0x200011a8

08006068 <__malloc_unlock>:
 8006068:	4801      	ldr	r0, [pc, #4]	@ (8006070 <__malloc_unlock+0x8>)
 800606a:	f7ff bf09 	b.w	8005e80 <__retarget_lock_release_recursive>
 800606e:	bf00      	nop
 8006070:	200011a8 	.word	0x200011a8

08006074 <__sfputc_r>:
 8006074:	6893      	ldr	r3, [r2, #8]
 8006076:	3b01      	subs	r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	b410      	push	{r4}
 800607c:	6093      	str	r3, [r2, #8]
 800607e:	da08      	bge.n	8006092 <__sfputc_r+0x1e>
 8006080:	6994      	ldr	r4, [r2, #24]
 8006082:	42a3      	cmp	r3, r4
 8006084:	db01      	blt.n	800608a <__sfputc_r+0x16>
 8006086:	290a      	cmp	r1, #10
 8006088:	d103      	bne.n	8006092 <__sfputc_r+0x1e>
 800608a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800608e:	f7ff bde8 	b.w	8005c62 <__swbuf_r>
 8006092:	6813      	ldr	r3, [r2, #0]
 8006094:	1c58      	adds	r0, r3, #1
 8006096:	6010      	str	r0, [r2, #0]
 8006098:	7019      	strb	r1, [r3, #0]
 800609a:	4608      	mov	r0, r1
 800609c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <__sfputs_r>:
 80060a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a4:	4606      	mov	r6, r0
 80060a6:	460f      	mov	r7, r1
 80060a8:	4614      	mov	r4, r2
 80060aa:	18d5      	adds	r5, r2, r3
 80060ac:	42ac      	cmp	r4, r5
 80060ae:	d101      	bne.n	80060b4 <__sfputs_r+0x12>
 80060b0:	2000      	movs	r0, #0
 80060b2:	e007      	b.n	80060c4 <__sfputs_r+0x22>
 80060b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b8:	463a      	mov	r2, r7
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ffda 	bl	8006074 <__sfputc_r>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d1f3      	bne.n	80060ac <__sfputs_r+0xa>
 80060c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060c8 <_vfiprintf_r>:
 80060c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060cc:	460d      	mov	r5, r1
 80060ce:	b09d      	sub	sp, #116	@ 0x74
 80060d0:	4614      	mov	r4, r2
 80060d2:	4698      	mov	r8, r3
 80060d4:	4606      	mov	r6, r0
 80060d6:	b118      	cbz	r0, 80060e0 <_vfiprintf_r+0x18>
 80060d8:	6a03      	ldr	r3, [r0, #32]
 80060da:	b90b      	cbnz	r3, 80060e0 <_vfiprintf_r+0x18>
 80060dc:	f7ff fcd8 	bl	8005a90 <__sinit>
 80060e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060e2:	07d9      	lsls	r1, r3, #31
 80060e4:	d405      	bmi.n	80060f2 <_vfiprintf_r+0x2a>
 80060e6:	89ab      	ldrh	r3, [r5, #12]
 80060e8:	059a      	lsls	r2, r3, #22
 80060ea:	d402      	bmi.n	80060f2 <_vfiprintf_r+0x2a>
 80060ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060ee:	f7ff fec6 	bl	8005e7e <__retarget_lock_acquire_recursive>
 80060f2:	89ab      	ldrh	r3, [r5, #12]
 80060f4:	071b      	lsls	r3, r3, #28
 80060f6:	d501      	bpl.n	80060fc <_vfiprintf_r+0x34>
 80060f8:	692b      	ldr	r3, [r5, #16]
 80060fa:	b99b      	cbnz	r3, 8006124 <_vfiprintf_r+0x5c>
 80060fc:	4629      	mov	r1, r5
 80060fe:	4630      	mov	r0, r6
 8006100:	f7ff fdee 	bl	8005ce0 <__swsetup_r>
 8006104:	b170      	cbz	r0, 8006124 <_vfiprintf_r+0x5c>
 8006106:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006108:	07dc      	lsls	r4, r3, #31
 800610a:	d504      	bpl.n	8006116 <_vfiprintf_r+0x4e>
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	b01d      	add	sp, #116	@ 0x74
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	0598      	lsls	r0, r3, #22
 800611a:	d4f7      	bmi.n	800610c <_vfiprintf_r+0x44>
 800611c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800611e:	f7ff feaf 	bl	8005e80 <__retarget_lock_release_recursive>
 8006122:	e7f3      	b.n	800610c <_vfiprintf_r+0x44>
 8006124:	2300      	movs	r3, #0
 8006126:	9309      	str	r3, [sp, #36]	@ 0x24
 8006128:	2320      	movs	r3, #32
 800612a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800612e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006132:	2330      	movs	r3, #48	@ 0x30
 8006134:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062e4 <_vfiprintf_r+0x21c>
 8006138:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800613c:	f04f 0901 	mov.w	r9, #1
 8006140:	4623      	mov	r3, r4
 8006142:	469a      	mov	sl, r3
 8006144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006148:	b10a      	cbz	r2, 800614e <_vfiprintf_r+0x86>
 800614a:	2a25      	cmp	r2, #37	@ 0x25
 800614c:	d1f9      	bne.n	8006142 <_vfiprintf_r+0x7a>
 800614e:	ebba 0b04 	subs.w	fp, sl, r4
 8006152:	d00b      	beq.n	800616c <_vfiprintf_r+0xa4>
 8006154:	465b      	mov	r3, fp
 8006156:	4622      	mov	r2, r4
 8006158:	4629      	mov	r1, r5
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff ffa1 	bl	80060a2 <__sfputs_r>
 8006160:	3001      	adds	r0, #1
 8006162:	f000 80a7 	beq.w	80062b4 <_vfiprintf_r+0x1ec>
 8006166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006168:	445a      	add	r2, fp
 800616a:	9209      	str	r2, [sp, #36]	@ 0x24
 800616c:	f89a 3000 	ldrb.w	r3, [sl]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 809f 	beq.w	80062b4 <_vfiprintf_r+0x1ec>
 8006176:	2300      	movs	r3, #0
 8006178:	f04f 32ff 	mov.w	r2, #4294967295
 800617c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006180:	f10a 0a01 	add.w	sl, sl, #1
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	9307      	str	r3, [sp, #28]
 8006188:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800618c:	931a      	str	r3, [sp, #104]	@ 0x68
 800618e:	4654      	mov	r4, sl
 8006190:	2205      	movs	r2, #5
 8006192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006196:	4853      	ldr	r0, [pc, #332]	@ (80062e4 <_vfiprintf_r+0x21c>)
 8006198:	f7fa f85a 	bl	8000250 <memchr>
 800619c:	9a04      	ldr	r2, [sp, #16]
 800619e:	b9d8      	cbnz	r0, 80061d8 <_vfiprintf_r+0x110>
 80061a0:	06d1      	lsls	r1, r2, #27
 80061a2:	bf44      	itt	mi
 80061a4:	2320      	movmi	r3, #32
 80061a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061aa:	0713      	lsls	r3, r2, #28
 80061ac:	bf44      	itt	mi
 80061ae:	232b      	movmi	r3, #43	@ 0x2b
 80061b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061b4:	f89a 3000 	ldrb.w	r3, [sl]
 80061b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80061ba:	d015      	beq.n	80061e8 <_vfiprintf_r+0x120>
 80061bc:	9a07      	ldr	r2, [sp, #28]
 80061be:	4654      	mov	r4, sl
 80061c0:	2000      	movs	r0, #0
 80061c2:	f04f 0c0a 	mov.w	ip, #10
 80061c6:	4621      	mov	r1, r4
 80061c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061cc:	3b30      	subs	r3, #48	@ 0x30
 80061ce:	2b09      	cmp	r3, #9
 80061d0:	d94b      	bls.n	800626a <_vfiprintf_r+0x1a2>
 80061d2:	b1b0      	cbz	r0, 8006202 <_vfiprintf_r+0x13a>
 80061d4:	9207      	str	r2, [sp, #28]
 80061d6:	e014      	b.n	8006202 <_vfiprintf_r+0x13a>
 80061d8:	eba0 0308 	sub.w	r3, r0, r8
 80061dc:	fa09 f303 	lsl.w	r3, r9, r3
 80061e0:	4313      	orrs	r3, r2
 80061e2:	9304      	str	r3, [sp, #16]
 80061e4:	46a2      	mov	sl, r4
 80061e6:	e7d2      	b.n	800618e <_vfiprintf_r+0xc6>
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	1d19      	adds	r1, r3, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	9103      	str	r1, [sp, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bfbb      	ittet	lt
 80061f4:	425b      	neglt	r3, r3
 80061f6:	f042 0202 	orrlt.w	r2, r2, #2
 80061fa:	9307      	strge	r3, [sp, #28]
 80061fc:	9307      	strlt	r3, [sp, #28]
 80061fe:	bfb8      	it	lt
 8006200:	9204      	strlt	r2, [sp, #16]
 8006202:	7823      	ldrb	r3, [r4, #0]
 8006204:	2b2e      	cmp	r3, #46	@ 0x2e
 8006206:	d10a      	bne.n	800621e <_vfiprintf_r+0x156>
 8006208:	7863      	ldrb	r3, [r4, #1]
 800620a:	2b2a      	cmp	r3, #42	@ 0x2a
 800620c:	d132      	bne.n	8006274 <_vfiprintf_r+0x1ac>
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	1d1a      	adds	r2, r3, #4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	9203      	str	r2, [sp, #12]
 8006216:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800621a:	3402      	adds	r4, #2
 800621c:	9305      	str	r3, [sp, #20]
 800621e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062f4 <_vfiprintf_r+0x22c>
 8006222:	7821      	ldrb	r1, [r4, #0]
 8006224:	2203      	movs	r2, #3
 8006226:	4650      	mov	r0, sl
 8006228:	f7fa f812 	bl	8000250 <memchr>
 800622c:	b138      	cbz	r0, 800623e <_vfiprintf_r+0x176>
 800622e:	9b04      	ldr	r3, [sp, #16]
 8006230:	eba0 000a 	sub.w	r0, r0, sl
 8006234:	2240      	movs	r2, #64	@ 0x40
 8006236:	4082      	lsls	r2, r0
 8006238:	4313      	orrs	r3, r2
 800623a:	3401      	adds	r4, #1
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006242:	4829      	ldr	r0, [pc, #164]	@ (80062e8 <_vfiprintf_r+0x220>)
 8006244:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006248:	2206      	movs	r2, #6
 800624a:	f7fa f801 	bl	8000250 <memchr>
 800624e:	2800      	cmp	r0, #0
 8006250:	d03f      	beq.n	80062d2 <_vfiprintf_r+0x20a>
 8006252:	4b26      	ldr	r3, [pc, #152]	@ (80062ec <_vfiprintf_r+0x224>)
 8006254:	bb1b      	cbnz	r3, 800629e <_vfiprintf_r+0x1d6>
 8006256:	9b03      	ldr	r3, [sp, #12]
 8006258:	3307      	adds	r3, #7
 800625a:	f023 0307 	bic.w	r3, r3, #7
 800625e:	3308      	adds	r3, #8
 8006260:	9303      	str	r3, [sp, #12]
 8006262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006264:	443b      	add	r3, r7
 8006266:	9309      	str	r3, [sp, #36]	@ 0x24
 8006268:	e76a      	b.n	8006140 <_vfiprintf_r+0x78>
 800626a:	fb0c 3202 	mla	r2, ip, r2, r3
 800626e:	460c      	mov	r4, r1
 8006270:	2001      	movs	r0, #1
 8006272:	e7a8      	b.n	80061c6 <_vfiprintf_r+0xfe>
 8006274:	2300      	movs	r3, #0
 8006276:	3401      	adds	r4, #1
 8006278:	9305      	str	r3, [sp, #20]
 800627a:	4619      	mov	r1, r3
 800627c:	f04f 0c0a 	mov.w	ip, #10
 8006280:	4620      	mov	r0, r4
 8006282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006286:	3a30      	subs	r2, #48	@ 0x30
 8006288:	2a09      	cmp	r2, #9
 800628a:	d903      	bls.n	8006294 <_vfiprintf_r+0x1cc>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0c6      	beq.n	800621e <_vfiprintf_r+0x156>
 8006290:	9105      	str	r1, [sp, #20]
 8006292:	e7c4      	b.n	800621e <_vfiprintf_r+0x156>
 8006294:	fb0c 2101 	mla	r1, ip, r1, r2
 8006298:	4604      	mov	r4, r0
 800629a:	2301      	movs	r3, #1
 800629c:	e7f0      	b.n	8006280 <_vfiprintf_r+0x1b8>
 800629e:	ab03      	add	r3, sp, #12
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	462a      	mov	r2, r5
 80062a4:	4b12      	ldr	r3, [pc, #72]	@ (80062f0 <_vfiprintf_r+0x228>)
 80062a6:	a904      	add	r1, sp, #16
 80062a8:	4630      	mov	r0, r6
 80062aa:	f3af 8000 	nop.w
 80062ae:	4607      	mov	r7, r0
 80062b0:	1c78      	adds	r0, r7, #1
 80062b2:	d1d6      	bne.n	8006262 <_vfiprintf_r+0x19a>
 80062b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062b6:	07d9      	lsls	r1, r3, #31
 80062b8:	d405      	bmi.n	80062c6 <_vfiprintf_r+0x1fe>
 80062ba:	89ab      	ldrh	r3, [r5, #12]
 80062bc:	059a      	lsls	r2, r3, #22
 80062be:	d402      	bmi.n	80062c6 <_vfiprintf_r+0x1fe>
 80062c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062c2:	f7ff fddd 	bl	8005e80 <__retarget_lock_release_recursive>
 80062c6:	89ab      	ldrh	r3, [r5, #12]
 80062c8:	065b      	lsls	r3, r3, #25
 80062ca:	f53f af1f 	bmi.w	800610c <_vfiprintf_r+0x44>
 80062ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062d0:	e71e      	b.n	8006110 <_vfiprintf_r+0x48>
 80062d2:	ab03      	add	r3, sp, #12
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	462a      	mov	r2, r5
 80062d8:	4b05      	ldr	r3, [pc, #20]	@ (80062f0 <_vfiprintf_r+0x228>)
 80062da:	a904      	add	r1, sp, #16
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 f879 	bl	80063d4 <_printf_i>
 80062e2:	e7e4      	b.n	80062ae <_vfiprintf_r+0x1e6>
 80062e4:	0800692c 	.word	0x0800692c
 80062e8:	08006936 	.word	0x08006936
 80062ec:	00000000 	.word	0x00000000
 80062f0:	080060a3 	.word	0x080060a3
 80062f4:	08006932 	.word	0x08006932

080062f8 <_printf_common>:
 80062f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062fc:	4616      	mov	r6, r2
 80062fe:	4698      	mov	r8, r3
 8006300:	688a      	ldr	r2, [r1, #8]
 8006302:	690b      	ldr	r3, [r1, #16]
 8006304:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006308:	4293      	cmp	r3, r2
 800630a:	bfb8      	it	lt
 800630c:	4613      	movlt	r3, r2
 800630e:	6033      	str	r3, [r6, #0]
 8006310:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006314:	4607      	mov	r7, r0
 8006316:	460c      	mov	r4, r1
 8006318:	b10a      	cbz	r2, 800631e <_printf_common+0x26>
 800631a:	3301      	adds	r3, #1
 800631c:	6033      	str	r3, [r6, #0]
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	0699      	lsls	r1, r3, #26
 8006322:	bf42      	ittt	mi
 8006324:	6833      	ldrmi	r3, [r6, #0]
 8006326:	3302      	addmi	r3, #2
 8006328:	6033      	strmi	r3, [r6, #0]
 800632a:	6825      	ldr	r5, [r4, #0]
 800632c:	f015 0506 	ands.w	r5, r5, #6
 8006330:	d106      	bne.n	8006340 <_printf_common+0x48>
 8006332:	f104 0a19 	add.w	sl, r4, #25
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	6832      	ldr	r2, [r6, #0]
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	42ab      	cmp	r3, r5
 800633e:	dc26      	bgt.n	800638e <_printf_common+0x96>
 8006340:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006344:	6822      	ldr	r2, [r4, #0]
 8006346:	3b00      	subs	r3, #0
 8006348:	bf18      	it	ne
 800634a:	2301      	movne	r3, #1
 800634c:	0692      	lsls	r2, r2, #26
 800634e:	d42b      	bmi.n	80063a8 <_printf_common+0xb0>
 8006350:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006354:	4641      	mov	r1, r8
 8006356:	4638      	mov	r0, r7
 8006358:	47c8      	blx	r9
 800635a:	3001      	adds	r0, #1
 800635c:	d01e      	beq.n	800639c <_printf_common+0xa4>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	6922      	ldr	r2, [r4, #16]
 8006362:	f003 0306 	and.w	r3, r3, #6
 8006366:	2b04      	cmp	r3, #4
 8006368:	bf02      	ittt	eq
 800636a:	68e5      	ldreq	r5, [r4, #12]
 800636c:	6833      	ldreq	r3, [r6, #0]
 800636e:	1aed      	subeq	r5, r5, r3
 8006370:	68a3      	ldr	r3, [r4, #8]
 8006372:	bf0c      	ite	eq
 8006374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006378:	2500      	movne	r5, #0
 800637a:	4293      	cmp	r3, r2
 800637c:	bfc4      	itt	gt
 800637e:	1a9b      	subgt	r3, r3, r2
 8006380:	18ed      	addgt	r5, r5, r3
 8006382:	2600      	movs	r6, #0
 8006384:	341a      	adds	r4, #26
 8006386:	42b5      	cmp	r5, r6
 8006388:	d11a      	bne.n	80063c0 <_printf_common+0xc8>
 800638a:	2000      	movs	r0, #0
 800638c:	e008      	b.n	80063a0 <_printf_common+0xa8>
 800638e:	2301      	movs	r3, #1
 8006390:	4652      	mov	r2, sl
 8006392:	4641      	mov	r1, r8
 8006394:	4638      	mov	r0, r7
 8006396:	47c8      	blx	r9
 8006398:	3001      	adds	r0, #1
 800639a:	d103      	bne.n	80063a4 <_printf_common+0xac>
 800639c:	f04f 30ff 	mov.w	r0, #4294967295
 80063a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a4:	3501      	adds	r5, #1
 80063a6:	e7c6      	b.n	8006336 <_printf_common+0x3e>
 80063a8:	18e1      	adds	r1, r4, r3
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	2030      	movs	r0, #48	@ 0x30
 80063ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063b2:	4422      	add	r2, r4
 80063b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063bc:	3302      	adds	r3, #2
 80063be:	e7c7      	b.n	8006350 <_printf_common+0x58>
 80063c0:	2301      	movs	r3, #1
 80063c2:	4622      	mov	r2, r4
 80063c4:	4641      	mov	r1, r8
 80063c6:	4638      	mov	r0, r7
 80063c8:	47c8      	blx	r9
 80063ca:	3001      	adds	r0, #1
 80063cc:	d0e6      	beq.n	800639c <_printf_common+0xa4>
 80063ce:	3601      	adds	r6, #1
 80063d0:	e7d9      	b.n	8006386 <_printf_common+0x8e>
	...

080063d4 <_printf_i>:
 80063d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d8:	7e0f      	ldrb	r7, [r1, #24]
 80063da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063dc:	2f78      	cmp	r7, #120	@ 0x78
 80063de:	4691      	mov	r9, r2
 80063e0:	4680      	mov	r8, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	469a      	mov	sl, r3
 80063e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063ea:	d807      	bhi.n	80063fc <_printf_i+0x28>
 80063ec:	2f62      	cmp	r7, #98	@ 0x62
 80063ee:	d80a      	bhi.n	8006406 <_printf_i+0x32>
 80063f0:	2f00      	cmp	r7, #0
 80063f2:	f000 80d2 	beq.w	800659a <_printf_i+0x1c6>
 80063f6:	2f58      	cmp	r7, #88	@ 0x58
 80063f8:	f000 80b9 	beq.w	800656e <_printf_i+0x19a>
 80063fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006400:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006404:	e03a      	b.n	800647c <_printf_i+0xa8>
 8006406:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800640a:	2b15      	cmp	r3, #21
 800640c:	d8f6      	bhi.n	80063fc <_printf_i+0x28>
 800640e:	a101      	add	r1, pc, #4	@ (adr r1, 8006414 <_printf_i+0x40>)
 8006410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006414:	0800646d 	.word	0x0800646d
 8006418:	08006481 	.word	0x08006481
 800641c:	080063fd 	.word	0x080063fd
 8006420:	080063fd 	.word	0x080063fd
 8006424:	080063fd 	.word	0x080063fd
 8006428:	080063fd 	.word	0x080063fd
 800642c:	08006481 	.word	0x08006481
 8006430:	080063fd 	.word	0x080063fd
 8006434:	080063fd 	.word	0x080063fd
 8006438:	080063fd 	.word	0x080063fd
 800643c:	080063fd 	.word	0x080063fd
 8006440:	08006581 	.word	0x08006581
 8006444:	080064ab 	.word	0x080064ab
 8006448:	0800653b 	.word	0x0800653b
 800644c:	080063fd 	.word	0x080063fd
 8006450:	080063fd 	.word	0x080063fd
 8006454:	080065a3 	.word	0x080065a3
 8006458:	080063fd 	.word	0x080063fd
 800645c:	080064ab 	.word	0x080064ab
 8006460:	080063fd 	.word	0x080063fd
 8006464:	080063fd 	.word	0x080063fd
 8006468:	08006543 	.word	0x08006543
 800646c:	6833      	ldr	r3, [r6, #0]
 800646e:	1d1a      	adds	r2, r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6032      	str	r2, [r6, #0]
 8006474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006478:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800647c:	2301      	movs	r3, #1
 800647e:	e09d      	b.n	80065bc <_printf_i+0x1e8>
 8006480:	6833      	ldr	r3, [r6, #0]
 8006482:	6820      	ldr	r0, [r4, #0]
 8006484:	1d19      	adds	r1, r3, #4
 8006486:	6031      	str	r1, [r6, #0]
 8006488:	0606      	lsls	r6, r0, #24
 800648a:	d501      	bpl.n	8006490 <_printf_i+0xbc>
 800648c:	681d      	ldr	r5, [r3, #0]
 800648e:	e003      	b.n	8006498 <_printf_i+0xc4>
 8006490:	0645      	lsls	r5, r0, #25
 8006492:	d5fb      	bpl.n	800648c <_printf_i+0xb8>
 8006494:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006498:	2d00      	cmp	r5, #0
 800649a:	da03      	bge.n	80064a4 <_printf_i+0xd0>
 800649c:	232d      	movs	r3, #45	@ 0x2d
 800649e:	426d      	negs	r5, r5
 80064a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a4:	4859      	ldr	r0, [pc, #356]	@ (800660c <_printf_i+0x238>)
 80064a6:	230a      	movs	r3, #10
 80064a8:	e011      	b.n	80064ce <_printf_i+0xfa>
 80064aa:	6821      	ldr	r1, [r4, #0]
 80064ac:	6833      	ldr	r3, [r6, #0]
 80064ae:	0608      	lsls	r0, r1, #24
 80064b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80064b4:	d402      	bmi.n	80064bc <_printf_i+0xe8>
 80064b6:	0649      	lsls	r1, r1, #25
 80064b8:	bf48      	it	mi
 80064ba:	b2ad      	uxthmi	r5, r5
 80064bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80064be:	4853      	ldr	r0, [pc, #332]	@ (800660c <_printf_i+0x238>)
 80064c0:	6033      	str	r3, [r6, #0]
 80064c2:	bf14      	ite	ne
 80064c4:	230a      	movne	r3, #10
 80064c6:	2308      	moveq	r3, #8
 80064c8:	2100      	movs	r1, #0
 80064ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064ce:	6866      	ldr	r6, [r4, #4]
 80064d0:	60a6      	str	r6, [r4, #8]
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	bfa2      	ittt	ge
 80064d6:	6821      	ldrge	r1, [r4, #0]
 80064d8:	f021 0104 	bicge.w	r1, r1, #4
 80064dc:	6021      	strge	r1, [r4, #0]
 80064de:	b90d      	cbnz	r5, 80064e4 <_printf_i+0x110>
 80064e0:	2e00      	cmp	r6, #0
 80064e2:	d04b      	beq.n	800657c <_printf_i+0x1a8>
 80064e4:	4616      	mov	r6, r2
 80064e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80064ea:	fb03 5711 	mls	r7, r3, r1, r5
 80064ee:	5dc7      	ldrb	r7, [r0, r7]
 80064f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064f4:	462f      	mov	r7, r5
 80064f6:	42bb      	cmp	r3, r7
 80064f8:	460d      	mov	r5, r1
 80064fa:	d9f4      	bls.n	80064e6 <_printf_i+0x112>
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d10b      	bne.n	8006518 <_printf_i+0x144>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	07df      	lsls	r7, r3, #31
 8006504:	d508      	bpl.n	8006518 <_printf_i+0x144>
 8006506:	6923      	ldr	r3, [r4, #16]
 8006508:	6861      	ldr	r1, [r4, #4]
 800650a:	4299      	cmp	r1, r3
 800650c:	bfde      	ittt	le
 800650e:	2330      	movle	r3, #48	@ 0x30
 8006510:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006514:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006518:	1b92      	subs	r2, r2, r6
 800651a:	6122      	str	r2, [r4, #16]
 800651c:	f8cd a000 	str.w	sl, [sp]
 8006520:	464b      	mov	r3, r9
 8006522:	aa03      	add	r2, sp, #12
 8006524:	4621      	mov	r1, r4
 8006526:	4640      	mov	r0, r8
 8006528:	f7ff fee6 	bl	80062f8 <_printf_common>
 800652c:	3001      	adds	r0, #1
 800652e:	d14a      	bne.n	80065c6 <_printf_i+0x1f2>
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	b004      	add	sp, #16
 8006536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	4833      	ldr	r0, [pc, #204]	@ (8006610 <_printf_i+0x23c>)
 8006544:	2778      	movs	r7, #120	@ 0x78
 8006546:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	6831      	ldr	r1, [r6, #0]
 800654e:	061f      	lsls	r7, r3, #24
 8006550:	f851 5b04 	ldr.w	r5, [r1], #4
 8006554:	d402      	bmi.n	800655c <_printf_i+0x188>
 8006556:	065f      	lsls	r7, r3, #25
 8006558:	bf48      	it	mi
 800655a:	b2ad      	uxthmi	r5, r5
 800655c:	6031      	str	r1, [r6, #0]
 800655e:	07d9      	lsls	r1, r3, #31
 8006560:	bf44      	itt	mi
 8006562:	f043 0320 	orrmi.w	r3, r3, #32
 8006566:	6023      	strmi	r3, [r4, #0]
 8006568:	b11d      	cbz	r5, 8006572 <_printf_i+0x19e>
 800656a:	2310      	movs	r3, #16
 800656c:	e7ac      	b.n	80064c8 <_printf_i+0xf4>
 800656e:	4827      	ldr	r0, [pc, #156]	@ (800660c <_printf_i+0x238>)
 8006570:	e7e9      	b.n	8006546 <_printf_i+0x172>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	f023 0320 	bic.w	r3, r3, #32
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	e7f6      	b.n	800656a <_printf_i+0x196>
 800657c:	4616      	mov	r6, r2
 800657e:	e7bd      	b.n	80064fc <_printf_i+0x128>
 8006580:	6833      	ldr	r3, [r6, #0]
 8006582:	6825      	ldr	r5, [r4, #0]
 8006584:	6961      	ldr	r1, [r4, #20]
 8006586:	1d18      	adds	r0, r3, #4
 8006588:	6030      	str	r0, [r6, #0]
 800658a:	062e      	lsls	r6, r5, #24
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	d501      	bpl.n	8006594 <_printf_i+0x1c0>
 8006590:	6019      	str	r1, [r3, #0]
 8006592:	e002      	b.n	800659a <_printf_i+0x1c6>
 8006594:	0668      	lsls	r0, r5, #25
 8006596:	d5fb      	bpl.n	8006590 <_printf_i+0x1bc>
 8006598:	8019      	strh	r1, [r3, #0]
 800659a:	2300      	movs	r3, #0
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	4616      	mov	r6, r2
 80065a0:	e7bc      	b.n	800651c <_printf_i+0x148>
 80065a2:	6833      	ldr	r3, [r6, #0]
 80065a4:	1d1a      	adds	r2, r3, #4
 80065a6:	6032      	str	r2, [r6, #0]
 80065a8:	681e      	ldr	r6, [r3, #0]
 80065aa:	6862      	ldr	r2, [r4, #4]
 80065ac:	2100      	movs	r1, #0
 80065ae:	4630      	mov	r0, r6
 80065b0:	f7f9 fe4e 	bl	8000250 <memchr>
 80065b4:	b108      	cbz	r0, 80065ba <_printf_i+0x1e6>
 80065b6:	1b80      	subs	r0, r0, r6
 80065b8:	6060      	str	r0, [r4, #4]
 80065ba:	6863      	ldr	r3, [r4, #4]
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	2300      	movs	r3, #0
 80065c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065c4:	e7aa      	b.n	800651c <_printf_i+0x148>
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	4632      	mov	r2, r6
 80065ca:	4649      	mov	r1, r9
 80065cc:	4640      	mov	r0, r8
 80065ce:	47d0      	blx	sl
 80065d0:	3001      	adds	r0, #1
 80065d2:	d0ad      	beq.n	8006530 <_printf_i+0x15c>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	079b      	lsls	r3, r3, #30
 80065d8:	d413      	bmi.n	8006602 <_printf_i+0x22e>
 80065da:	68e0      	ldr	r0, [r4, #12]
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	4298      	cmp	r0, r3
 80065e0:	bfb8      	it	lt
 80065e2:	4618      	movlt	r0, r3
 80065e4:	e7a6      	b.n	8006534 <_printf_i+0x160>
 80065e6:	2301      	movs	r3, #1
 80065e8:	4632      	mov	r2, r6
 80065ea:	4649      	mov	r1, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	47d0      	blx	sl
 80065f0:	3001      	adds	r0, #1
 80065f2:	d09d      	beq.n	8006530 <_printf_i+0x15c>
 80065f4:	3501      	adds	r5, #1
 80065f6:	68e3      	ldr	r3, [r4, #12]
 80065f8:	9903      	ldr	r1, [sp, #12]
 80065fa:	1a5b      	subs	r3, r3, r1
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	dcf2      	bgt.n	80065e6 <_printf_i+0x212>
 8006600:	e7eb      	b.n	80065da <_printf_i+0x206>
 8006602:	2500      	movs	r5, #0
 8006604:	f104 0619 	add.w	r6, r4, #25
 8006608:	e7f5      	b.n	80065f6 <_printf_i+0x222>
 800660a:	bf00      	nop
 800660c:	0800693d 	.word	0x0800693d
 8006610:	0800694e 	.word	0x0800694e

08006614 <__sflush_r>:
 8006614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661c:	0716      	lsls	r6, r2, #28
 800661e:	4605      	mov	r5, r0
 8006620:	460c      	mov	r4, r1
 8006622:	d454      	bmi.n	80066ce <__sflush_r+0xba>
 8006624:	684b      	ldr	r3, [r1, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	dc02      	bgt.n	8006630 <__sflush_r+0x1c>
 800662a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800662c:	2b00      	cmp	r3, #0
 800662e:	dd48      	ble.n	80066c2 <__sflush_r+0xae>
 8006630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006632:	2e00      	cmp	r6, #0
 8006634:	d045      	beq.n	80066c2 <__sflush_r+0xae>
 8006636:	2300      	movs	r3, #0
 8006638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800663c:	682f      	ldr	r7, [r5, #0]
 800663e:	6a21      	ldr	r1, [r4, #32]
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	d030      	beq.n	80066a6 <__sflush_r+0x92>
 8006644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	0759      	lsls	r1, r3, #29
 800664a:	d505      	bpl.n	8006658 <__sflush_r+0x44>
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006652:	b10b      	cbz	r3, 8006658 <__sflush_r+0x44>
 8006654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	2300      	movs	r3, #0
 800665a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800665c:	6a21      	ldr	r1, [r4, #32]
 800665e:	4628      	mov	r0, r5
 8006660:	47b0      	blx	r6
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	d106      	bne.n	8006676 <__sflush_r+0x62>
 8006668:	6829      	ldr	r1, [r5, #0]
 800666a:	291d      	cmp	r1, #29
 800666c:	d82b      	bhi.n	80066c6 <__sflush_r+0xb2>
 800666e:	4a2a      	ldr	r2, [pc, #168]	@ (8006718 <__sflush_r+0x104>)
 8006670:	410a      	asrs	r2, r1
 8006672:	07d6      	lsls	r6, r2, #31
 8006674:	d427      	bmi.n	80066c6 <__sflush_r+0xb2>
 8006676:	2200      	movs	r2, #0
 8006678:	6062      	str	r2, [r4, #4]
 800667a:	04d9      	lsls	r1, r3, #19
 800667c:	6922      	ldr	r2, [r4, #16]
 800667e:	6022      	str	r2, [r4, #0]
 8006680:	d504      	bpl.n	800668c <__sflush_r+0x78>
 8006682:	1c42      	adds	r2, r0, #1
 8006684:	d101      	bne.n	800668a <__sflush_r+0x76>
 8006686:	682b      	ldr	r3, [r5, #0]
 8006688:	b903      	cbnz	r3, 800668c <__sflush_r+0x78>
 800668a:	6560      	str	r0, [r4, #84]	@ 0x54
 800668c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800668e:	602f      	str	r7, [r5, #0]
 8006690:	b1b9      	cbz	r1, 80066c2 <__sflush_r+0xae>
 8006692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006696:	4299      	cmp	r1, r3
 8006698:	d002      	beq.n	80066a0 <__sflush_r+0x8c>
 800669a:	4628      	mov	r0, r5
 800669c:	f7ff fbf2 	bl	8005e84 <_free_r>
 80066a0:	2300      	movs	r3, #0
 80066a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80066a4:	e00d      	b.n	80066c2 <__sflush_r+0xae>
 80066a6:	2301      	movs	r3, #1
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b0      	blx	r6
 80066ac:	4602      	mov	r2, r0
 80066ae:	1c50      	adds	r0, r2, #1
 80066b0:	d1c9      	bne.n	8006646 <__sflush_r+0x32>
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0c6      	beq.n	8006646 <__sflush_r+0x32>
 80066b8:	2b1d      	cmp	r3, #29
 80066ba:	d001      	beq.n	80066c0 <__sflush_r+0xac>
 80066bc:	2b16      	cmp	r3, #22
 80066be:	d11e      	bne.n	80066fe <__sflush_r+0xea>
 80066c0:	602f      	str	r7, [r5, #0]
 80066c2:	2000      	movs	r0, #0
 80066c4:	e022      	b.n	800670c <__sflush_r+0xf8>
 80066c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ca:	b21b      	sxth	r3, r3
 80066cc:	e01b      	b.n	8006706 <__sflush_r+0xf2>
 80066ce:	690f      	ldr	r7, [r1, #16]
 80066d0:	2f00      	cmp	r7, #0
 80066d2:	d0f6      	beq.n	80066c2 <__sflush_r+0xae>
 80066d4:	0793      	lsls	r3, r2, #30
 80066d6:	680e      	ldr	r6, [r1, #0]
 80066d8:	bf08      	it	eq
 80066da:	694b      	ldreq	r3, [r1, #20]
 80066dc:	600f      	str	r7, [r1, #0]
 80066de:	bf18      	it	ne
 80066e0:	2300      	movne	r3, #0
 80066e2:	eba6 0807 	sub.w	r8, r6, r7
 80066e6:	608b      	str	r3, [r1, #8]
 80066e8:	f1b8 0f00 	cmp.w	r8, #0
 80066ec:	dde9      	ble.n	80066c2 <__sflush_r+0xae>
 80066ee:	6a21      	ldr	r1, [r4, #32]
 80066f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066f2:	4643      	mov	r3, r8
 80066f4:	463a      	mov	r2, r7
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b0      	blx	r6
 80066fa:	2800      	cmp	r0, #0
 80066fc:	dc08      	bgt.n	8006710 <__sflush_r+0xfc>
 80066fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006706:	81a3      	strh	r3, [r4, #12]
 8006708:	f04f 30ff 	mov.w	r0, #4294967295
 800670c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006710:	4407      	add	r7, r0
 8006712:	eba8 0800 	sub.w	r8, r8, r0
 8006716:	e7e7      	b.n	80066e8 <__sflush_r+0xd4>
 8006718:	dfbffffe 	.word	0xdfbffffe

0800671c <_fflush_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	690b      	ldr	r3, [r1, #16]
 8006720:	4605      	mov	r5, r0
 8006722:	460c      	mov	r4, r1
 8006724:	b913      	cbnz	r3, 800672c <_fflush_r+0x10>
 8006726:	2500      	movs	r5, #0
 8006728:	4628      	mov	r0, r5
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	b118      	cbz	r0, 8006736 <_fflush_r+0x1a>
 800672e:	6a03      	ldr	r3, [r0, #32]
 8006730:	b90b      	cbnz	r3, 8006736 <_fflush_r+0x1a>
 8006732:	f7ff f9ad 	bl	8005a90 <__sinit>
 8006736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f3      	beq.n	8006726 <_fflush_r+0xa>
 800673e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006740:	07d0      	lsls	r0, r2, #31
 8006742:	d404      	bmi.n	800674e <_fflush_r+0x32>
 8006744:	0599      	lsls	r1, r3, #22
 8006746:	d402      	bmi.n	800674e <_fflush_r+0x32>
 8006748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800674a:	f7ff fb98 	bl	8005e7e <__retarget_lock_acquire_recursive>
 800674e:	4628      	mov	r0, r5
 8006750:	4621      	mov	r1, r4
 8006752:	f7ff ff5f 	bl	8006614 <__sflush_r>
 8006756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006758:	07da      	lsls	r2, r3, #31
 800675a:	4605      	mov	r5, r0
 800675c:	d4e4      	bmi.n	8006728 <_fflush_r+0xc>
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	059b      	lsls	r3, r3, #22
 8006762:	d4e1      	bmi.n	8006728 <_fflush_r+0xc>
 8006764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006766:	f7ff fb8b 	bl	8005e80 <__retarget_lock_release_recursive>
 800676a:	e7dd      	b.n	8006728 <_fflush_r+0xc>

0800676c <__swhatbuf_r>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	460c      	mov	r4, r1
 8006770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006774:	2900      	cmp	r1, #0
 8006776:	b096      	sub	sp, #88	@ 0x58
 8006778:	4615      	mov	r5, r2
 800677a:	461e      	mov	r6, r3
 800677c:	da0d      	bge.n	800679a <__swhatbuf_r+0x2e>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006784:	f04f 0100 	mov.w	r1, #0
 8006788:	bf14      	ite	ne
 800678a:	2340      	movne	r3, #64	@ 0x40
 800678c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006790:	2000      	movs	r0, #0
 8006792:	6031      	str	r1, [r6, #0]
 8006794:	602b      	str	r3, [r5, #0]
 8006796:	b016      	add	sp, #88	@ 0x58
 8006798:	bd70      	pop	{r4, r5, r6, pc}
 800679a:	466a      	mov	r2, sp
 800679c:	f000 f848 	bl	8006830 <_fstat_r>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	dbec      	blt.n	800677e <__swhatbuf_r+0x12>
 80067a4:	9901      	ldr	r1, [sp, #4]
 80067a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067ae:	4259      	negs	r1, r3
 80067b0:	4159      	adcs	r1, r3
 80067b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067b6:	e7eb      	b.n	8006790 <__swhatbuf_r+0x24>

080067b8 <__smakebuf_r>:
 80067b8:	898b      	ldrh	r3, [r1, #12]
 80067ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067bc:	079d      	lsls	r5, r3, #30
 80067be:	4606      	mov	r6, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	d507      	bpl.n	80067d4 <__smakebuf_r+0x1c>
 80067c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	6123      	str	r3, [r4, #16]
 80067cc:	2301      	movs	r3, #1
 80067ce:	6163      	str	r3, [r4, #20]
 80067d0:	b003      	add	sp, #12
 80067d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d4:	ab01      	add	r3, sp, #4
 80067d6:	466a      	mov	r2, sp
 80067d8:	f7ff ffc8 	bl	800676c <__swhatbuf_r>
 80067dc:	9f00      	ldr	r7, [sp, #0]
 80067de:	4605      	mov	r5, r0
 80067e0:	4639      	mov	r1, r7
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7ff fbba 	bl	8005f5c <_malloc_r>
 80067e8:	b948      	cbnz	r0, 80067fe <__smakebuf_r+0x46>
 80067ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ee:	059a      	lsls	r2, r3, #22
 80067f0:	d4ee      	bmi.n	80067d0 <__smakebuf_r+0x18>
 80067f2:	f023 0303 	bic.w	r3, r3, #3
 80067f6:	f043 0302 	orr.w	r3, r3, #2
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	e7e2      	b.n	80067c4 <__smakebuf_r+0xc>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	6020      	str	r0, [r4, #0]
 8006802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	9b01      	ldr	r3, [sp, #4]
 800680a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800680e:	b15b      	cbz	r3, 8006828 <__smakebuf_r+0x70>
 8006810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006814:	4630      	mov	r0, r6
 8006816:	f000 f81d 	bl	8006854 <_isatty_r>
 800681a:	b128      	cbz	r0, 8006828 <__smakebuf_r+0x70>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f023 0303 	bic.w	r3, r3, #3
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	431d      	orrs	r5, r3
 800682c:	81a5      	strh	r5, [r4, #12]
 800682e:	e7cf      	b.n	80067d0 <__smakebuf_r+0x18>

08006830 <_fstat_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d07      	ldr	r5, [pc, #28]	@ (8006850 <_fstat_r+0x20>)
 8006834:	2300      	movs	r3, #0
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	602b      	str	r3, [r5, #0]
 800683e:	f7fa fd2a 	bl	8001296 <_fstat>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d102      	bne.n	800684c <_fstat_r+0x1c>
 8006846:	682b      	ldr	r3, [r5, #0]
 8006848:	b103      	cbz	r3, 800684c <_fstat_r+0x1c>
 800684a:	6023      	str	r3, [r4, #0]
 800684c:	bd38      	pop	{r3, r4, r5, pc}
 800684e:	bf00      	nop
 8006850:	200011a4 	.word	0x200011a4

08006854 <_isatty_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d06      	ldr	r5, [pc, #24]	@ (8006870 <_isatty_r+0x1c>)
 8006858:	2300      	movs	r3, #0
 800685a:	4604      	mov	r4, r0
 800685c:	4608      	mov	r0, r1
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	f7fa fd29 	bl	80012b6 <_isatty>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d102      	bne.n	800686e <_isatty_r+0x1a>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	b103      	cbz	r3, 800686e <_isatty_r+0x1a>
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	bd38      	pop	{r3, r4, r5, pc}
 8006870:	200011a4 	.word	0x200011a4

08006874 <_sbrk_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d06      	ldr	r5, [pc, #24]	@ (8006890 <_sbrk_r+0x1c>)
 8006878:	2300      	movs	r3, #0
 800687a:	4604      	mov	r4, r0
 800687c:	4608      	mov	r0, r1
 800687e:	602b      	str	r3, [r5, #0]
 8006880:	f7fa fd32 	bl	80012e8 <_sbrk>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_sbrk_r+0x1a>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_sbrk_r+0x1a>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	200011a4 	.word	0x200011a4

08006894 <_init>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	bf00      	nop
 8006898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689a:	bc08      	pop	{r3}
 800689c:	469e      	mov	lr, r3
 800689e:	4770      	bx	lr

080068a0 <_fini>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	bf00      	nop
 80068a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	469e      	mov	lr, r3
 80068aa:	4770      	bx	lr
