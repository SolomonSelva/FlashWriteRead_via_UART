
UART_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004824  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a1c  08004a1c  00005a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a34  08004a34  0000614c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a3c  08004a3c  0000614c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a3c  08004a3c  00005a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a40  08004a40  00005a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004a50  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004af0  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006e0  2000014c  08004b90  0000614c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000082c  08004b90  0000682c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012285  00000000  00000000  0000617a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002983  00000000  00000000  000183ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e00  00000000  00000000  0001ad88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000abf  00000000  00000000  0001bb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002890d  00000000  00000000  0001c647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011b90  00000000  00000000  00044f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f94a0  00000000  00000000  00056ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014ff84  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000039f4  00000000  00000000  0014ffc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  001539bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004a04 	.word	0x08004a04

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004a04 	.word	0x08004a04

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800052c:	f3bf 8f4f 	dsb	sy
}
 8000530:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000532:	f3bf 8f6f 	isb	sy
}
 8000536:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <SCB_EnableICache+0x48>)
 800053a:	2200      	movs	r2, #0
 800053c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <SCB_EnableICache+0x48>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a07      	ldr	r2, [pc, #28]	@ (8000570 <SCB_EnableICache+0x48>)
 8000552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000556:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000558:	f3bf 8f4f 	dsb	sy
}
 800055c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055e:	f3bf 8f6f 	isb	sy
}
 8000562:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800057a:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <SCB_EnableDCache+0x84>)
 800057c:	2200      	movs	r2, #0
 800057e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000582:	f3bf 8f4f 	dsb	sy
}
 8000586:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000588:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <SCB_EnableDCache+0x84>)
 800058a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800058e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	0b5b      	lsrs	r3, r3, #13
 8000594:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000598:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	08db      	lsrs	r3, r3, #3
 800059e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005a2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	015a      	lsls	r2, r3, #5
 80005a8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80005ac:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b2:	4911      	ldr	r1, [pc, #68]	@ (80005f8 <SCB_EnableDCache+0x84>)
 80005b4:	4313      	orrs	r3, r2
 80005b6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	1e5a      	subs	r2, r3, #1
 80005be:	60ba      	str	r2, [r7, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1ef      	bne.n	80005a4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	60fa      	str	r2, [r7, #12]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1e5      	bne.n	800059a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ce:	f3bf 8f4f 	dsb	sy
}
 80005d2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005d4:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <SCB_EnableDCache+0x84>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <SCB_EnableDCache+0x84>)
 80005da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e6:	f3bf 8f6f 	isb	sy
}
 80005ea:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	00000000 	.word	0x00000000

08000600 <Erase_And_Write>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
void Erase_And_Write(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes */
  MPU_Config();
 8000604:	f000 f932 	bl	800086c <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8000608:	f000 f956 	bl	80008b8 <CPU_CACHE_Enable>
     */

  /* Initialize LED1, LED2 and LED3 */

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 800060c:	f001 fab2 	bl	8001b74 <HAL_FLASH_Unlock>
  /* Allow Access to option bytes sector */
  HAL_FLASH_OB_Unlock();
 8000610:	f001 fae2 	bl	8001bd8 <HAL_FLASH_OB_Unlock>
  /* Get the Dual bank configuration status */
  HAL_FLASHEx_OBGetConfig(&OBInit);
 8000614:	483c      	ldr	r0, [pc, #240]	@ (8000708 <Erase_And_Write+0x108>)
 8000616:	f001 fc9b 	bl	8001f50 <HAL_FLASHEx_OBGetConfig>
#if defined(DUAL_BANK)
  /* Turn on LED3 if FLASH is configured in Dual Bank mode */
  if((OBInit.USERConfig & OB_NDBANK_SINGLE_BANK) == OB_NDBANK_SINGLE_BANK)
#else
  /* Turn on LED3 if FLASH is configured in Single Bank mode */
  if((OBInit.USERConfig & OB_NDBANK_SINGLE_BANK) == OB_NDBANK_DUAL_BANK)
 800061a:	4b3b      	ldr	r3, [pc, #236]	@ (8000708 <Erase_And_Write+0x108>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000622:	2b00      	cmp	r3, #0
 8000624:	d101      	bne.n	800062a <Erase_And_Write+0x2a>
#endif
  {
    while(1)
 8000626:	bf00      	nop
 8000628:	e7fd      	b.n	8000626 <Erase_And_Write+0x26>

  /* Erase the user Flash area
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

  /* Get the 1st sector to erase */
  FirstSector = GetSector(FLASH_USER_START_ADDR);
 800062a:	4838      	ldr	r0, [pc, #224]	@ (800070c <Erase_And_Write+0x10c>)
 800062c:	f000 f882 	bl	8000734 <GetSector>
 8000630:	4603      	mov	r3, r0
 8000632:	4a37      	ldr	r2, [pc, #220]	@ (8000710 <Erase_And_Write+0x110>)
 8000634:	6013      	str	r3, [r2, #0]
  /* Get the number of sector to erase from 1st sector*/
  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 8000636:	4837      	ldr	r0, [pc, #220]	@ (8000714 <Erase_And_Write+0x114>)
 8000638:	f000 f87c 	bl	8000734 <GetSector>
 800063c:	4602      	mov	r2, r0
 800063e:	4b34      	ldr	r3, [pc, #208]	@ (8000710 <Erase_And_Write+0x110>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	3301      	adds	r3, #1
 8000646:	4a34      	ldr	r2, [pc, #208]	@ (8000718 <Erase_And_Write+0x118>)
 8000648:	6013      	str	r3, [r2, #0]
  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800064a:	4b34      	ldr	r3, [pc, #208]	@ (800071c <Erase_And_Write+0x11c>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000650:	4b32      	ldr	r3, [pc, #200]	@ (800071c <Erase_And_Write+0x11c>)
 8000652:	2202      	movs	r2, #2
 8000654:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = FirstSector;
 8000656:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <Erase_And_Write+0x110>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a30      	ldr	r2, [pc, #192]	@ (800071c <Erase_And_Write+0x11c>)
 800065c:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors     = NbOfSectors;
 800065e:	4b2e      	ldr	r3, [pc, #184]	@ (8000718 <Erase_And_Write+0x118>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a2e      	ldr	r2, [pc, #184]	@ (800071c <Erase_And_Write+0x11c>)
 8000664:	60d3      	str	r3, [r2, #12]

  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000666:	492e      	ldr	r1, [pc, #184]	@ (8000720 <Erase_And_Write+0x120>)
 8000668:	482c      	ldr	r0, [pc, #176]	@ (800071c <Erase_And_Write+0x11c>)
 800066a:	f001 fc01 	bl	8001e70 <HAL_FLASHEx_Erase>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <Erase_And_Write+0x78>
      User can add here some code to deal with this error.
      SECTORError will contain the faulty sector and then to know the code error on this sector,
      user can call function 'HAL_FLASH_GetError()'
    */
    /* Infinite loop */
    while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <Erase_And_Write+0x74>
  }

  /* Program the user Flash area word by word
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

  Address = FLASH_USER_START_ADDR;
 8000678:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <Erase_And_Write+0x124>)
 800067a:	4a24      	ldr	r2, [pc, #144]	@ (800070c <Erase_And_Write+0x10c>)
 800067c:	601a      	str	r2, [r3, #0]

  while (Address < FLASH_USER_END_ADDR)
 800067e:	e011      	b.n	80006a4 <Erase_And_Write+0xa4>
  {
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA_32) == HAL_OK)
 8000680:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <Erase_And_Write+0x124>)
 8000682:	6819      	ldr	r1, [r3, #0]
 8000684:	a31e      	add	r3, pc, #120	@ (adr r3, 8000700 <Erase_And_Write+0x100>)
 8000686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800068a:	2002      	movs	r0, #2
 800068c:	f001 fa16 	bl	8001abc <HAL_FLASH_Program>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d105      	bne.n	80006a2 <Erase_And_Write+0xa2>
    {
      Address = Address + 4;
 8000696:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <Erase_And_Write+0x124>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3304      	adds	r3, #4
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <Erase_And_Write+0x124>)
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	e000      	b.n	80006a4 <Erase_And_Write+0xa4>
    }
   else
    {
      /* Error occurred while writing data in Flash memory.
         User can add here some code to deal with this error */
      while (1)
 80006a2:	e7fe      	b.n	80006a2 <Erase_And_Write+0xa2>
  while (Address < FLASH_USER_END_ADDR)
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <Erase_And_Write+0x124>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000714 <Erase_And_Write+0x114>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d3e8      	bcc.n	8000680 <Erase_And_Write+0x80>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80006ae:	f001 fa83 	bl	8001bb8 <HAL_FLASH_Lock>

  /* Check if the programmed data is OK
      MemoryProgramStatus = 0: data programmed correctly
      MemoryProgramStatus != 0: number of words not programmed correctly ******/
  Address = FLASH_USER_START_ADDR;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <Erase_And_Write+0x124>)
 80006b4:	4a15      	ldr	r2, [pc, #84]	@ (800070c <Erase_And_Write+0x10c>)
 80006b6:	601a      	str	r2, [r3, #0]
  MemoryProgramStatus = 0x0;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <Erase_And_Write+0x128>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]

  while (Address < FLASH_USER_END_ADDR)
 80006be:	e013      	b.n	80006e8 <Erase_And_Write+0xe8>
  {
    data32 = *(__IO uint32_t *)Address;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <Erase_And_Write+0x124>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a19      	ldr	r2, [pc, #100]	@ (800072c <Erase_And_Write+0x12c>)
 80006c8:	6013      	str	r3, [r2, #0]

    if (data32 != DATA_32)
 80006ca:	4b18      	ldr	r3, [pc, #96]	@ (800072c <Erase_And_Write+0x12c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <Erase_And_Write+0x130>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d004      	beq.n	80006de <Erase_And_Write+0xde>
    {
      MemoryProgramStatus++;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <Erase_And_Write+0x128>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a13      	ldr	r2, [pc, #76]	@ (8000728 <Erase_And_Write+0x128>)
 80006dc:	6013      	str	r3, [r2, #0]
    }
    Address = Address + 4;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <Erase_And_Write+0x124>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3304      	adds	r3, #4
 80006e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000724 <Erase_And_Write+0x124>)
 80006e6:	6013      	str	r3, [r2, #0]
  while (Address < FLASH_USER_END_ADDR)
 80006e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <Erase_And_Write+0x124>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a09      	ldr	r2, [pc, #36]	@ (8000714 <Erase_And_Write+0x114>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d3e6      	bcc.n	80006c0 <Erase_And_Write+0xc0>
  }

  /*Check if there is an issue to program data*/
  if (MemoryProgramStatus == 0)
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <Erase_And_Write+0x128>)
 80006f4:	681b      	ldr	r3, [r3, #0]
  {
    /* Error detected. Switch on LED2*/
  }

  /* Infinite loop */
  while (1)
 80006f6:	bf00      	nop
 80006f8:	e7fd      	b.n	80006f6 <Erase_And_Write+0xf6>
 80006fa:	bf00      	nop
 80006fc:	f3af 8000 	nop.w
 8000700:	12345678 	.word	0x12345678
 8000704:	00000000 	.word	0x00000000
 8000708:	20000180 	.word	0x20000180
 800070c:	08010000 	.word	0x08010000
 8000710:	20000168 	.word	0x20000168
 8000714:	0807ffff 	.word	0x0807ffff
 8000718:	2000016c 	.word	0x2000016c
 800071c:	200001a0 	.word	0x200001a0
 8000720:	20000174 	.word	0x20000174
 8000724:	20000170 	.word	0x20000170
 8000728:	2000017c 	.word	0x2000017c
 800072c:	20000178 	.word	0x20000178
 8000730:	12345678 	.word	0x12345678

08000734 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a40      	ldr	r2, [pc, #256]	@ (8000844 <GetSector+0x110>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d206      	bcs.n	8000756 <GetSector+0x22>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800074e:	d302      	bcc.n	8000756 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	e06f      	b.n	8000836 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a3b      	ldr	r2, [pc, #236]	@ (8000848 <GetSector+0x114>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d806      	bhi.n	800076c <GetSector+0x38>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a38      	ldr	r2, [pc, #224]	@ (8000844 <GetSector+0x110>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d302      	bcc.n	800076c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000766:	2301      	movs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	e064      	b.n	8000836 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a37      	ldr	r2, [pc, #220]	@ (800084c <GetSector+0x118>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d206      	bcs.n	8000782 <GetSector+0x4e>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a34      	ldr	r2, [pc, #208]	@ (8000848 <GetSector+0x114>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d902      	bls.n	8000782 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 800077c:	2302      	movs	r3, #2
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	e059      	b.n	8000836 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a32      	ldr	r2, [pc, #200]	@ (8000850 <GetSector+0x11c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d806      	bhi.n	8000798 <GetSector+0x64>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a2f      	ldr	r2, [pc, #188]	@ (800084c <GetSector+0x118>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d302      	bcc.n	8000798 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000792:	2303      	movs	r3, #3
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	e04e      	b.n	8000836 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a2e      	ldr	r2, [pc, #184]	@ (8000854 <GetSector+0x120>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d806      	bhi.n	80007ae <GetSector+0x7a>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000850 <GetSector+0x11c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d902      	bls.n	80007ae <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	e043      	b.n	8000836 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a29      	ldr	r2, [pc, #164]	@ (8000858 <GetSector+0x124>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d806      	bhi.n	80007c4 <GetSector+0x90>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <GetSector+0x120>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d902      	bls.n	80007c4 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 80007be:	2305      	movs	r3, #5
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	e038      	b.n	8000836 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a25      	ldr	r2, [pc, #148]	@ (800085c <GetSector+0x128>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d806      	bhi.n	80007da <GetSector+0xa6>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a22      	ldr	r2, [pc, #136]	@ (8000858 <GetSector+0x124>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d902      	bls.n	80007da <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80007d4:	2306      	movs	r3, #6
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e02d      	b.n	8000836 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80007e0:	d206      	bcs.n	80007f0 <GetSector+0xbc>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a1d      	ldr	r2, [pc, #116]	@ (800085c <GetSector+0x128>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d902      	bls.n	80007f0 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 80007ea:	2307      	movs	r3, #7
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	e022      	b.n	8000836 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000860 <GetSector+0x12c>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d806      	bhi.n	8000806 <GetSector+0xd2>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80007fe:	d302      	bcc.n	8000806 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8000800:	2308      	movs	r3, #8
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	e017      	b.n	8000836 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <GetSector+0x130>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d806      	bhi.n	800081c <GetSector+0xe8>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a13      	ldr	r2, [pc, #76]	@ (8000860 <GetSector+0x12c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d902      	bls.n	800081c <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8000816:	2309      	movs	r3, #9
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	e00c      	b.n	8000836 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <GetSector+0x134>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d806      	bhi.n	8000832 <GetSector+0xfe>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a0f      	ldr	r2, [pc, #60]	@ (8000864 <GetSector+0x130>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d902      	bls.n	8000832 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 800082c:	230a      	movs	r3, #10
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	e001      	b.n	8000836 <GetSector+0x102>
    sector = FLASH_SECTOR_23;
  }
#else
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
  {
    sector = FLASH_SECTOR_11;
 8000832:	230b      	movs	r3, #11
 8000834:	60fb      	str	r3, [r7, #12]
  }
#endif /* DUAL_BANK */
  return sector;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	08008000 	.word	0x08008000
 8000848:	0800ffff 	.word	0x0800ffff
 800084c:	08018000 	.word	0x08018000
 8000850:	0801ffff 	.word	0x0801ffff
 8000854:	0803ffff 	.word	0x0803ffff
 8000858:	0807ffff 	.word	0x0807ffff
 800085c:	080bffff 	.word	0x080bffff
 8000860:	0813ffff 	.word	0x0813ffff
 8000864:	0817ffff 	.word	0x0817ffff
 8000868:	081bffff 	.word	0x081bffff

0800086c <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8000872:	f000 fd5d 	bl	8001330 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000876:	2301      	movs	r3, #1
 8000878:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800087e:	231f      	movs	r3, #31
 8000880:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000882:	2300      	movs	r3, #0
 8000884:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800088e:	2301      	movs	r3, #1
 8000890:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000892:	2300      	movs	r3, #0
 8000894:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000896:	2300      	movs	r3, #0
 8000898:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800089a:	2387      	movs	r3, #135	@ 0x87
 800089c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800089e:	2301      	movs	r3, #1
 80008a0:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008a2:	463b      	mov	r3, r7
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fd7b 	bl	80013a0 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008aa:	2004      	movs	r0, #4
 80008ac:	f000 fd58 	bl	8001360 <HAL_MPU_Enable>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <CPU_CACHE_Enable>:
* @brief  CPU L1-Cache enable.
* @param  None
* @retval None
*/
static void CPU_CACHE_Enable(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
 80008bc:	f7ff fe34 	bl	8000528 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 80008c0:	f7ff fe58 	bl	8000574 <SCB_EnableDCache>
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008cc:	f000 fbc9 	bl	8001062 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f80c 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f000 f8fc 	bl	8000ad0 <MX_GPIO_Init>
  MX_ETH_Init();
 80008d8:	f000 f84e 	bl	8000978 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008dc:	f000 f89a 	bl	8000a14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008e0:	f000 f8c8 	bl	8000a74 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  Erase_And_Write();
 80008e4:	f7ff fe8c 	bl	8000600 <Erase_And_Write>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <main+0x20>

080008ec <SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b092      	sub	sp, #72	@ 0x48
 80008f0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f2:	2301      	movs	r3, #1
 80008f4:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008fa:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000904:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000908:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800090a:	2308      	movs	r3, #8
 800090c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 800090e:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000918:	2309      	movs	r3, #9
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 800091c:	2307      	movs	r3, #7
 800091e:	633b      	str	r3, [r7, #48]	@ 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4618      	mov	r0, r3
 8000924:	f001 ff88 	bl	8002838 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x46>
  {
    while(1) {};
 800092e:	bf00      	nop
 8000930:	e7fd      	b.n	800092e <SystemClock_Config+0x42>
  }

  /* Activate the OverDrive to reach the 216 Mhz Frequency */
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000932:	f001 ff31 	bl	8002798 <HAL_PWREx_EnableOverDrive>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x54>
  {
    while(1) {};
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <SystemClock_Config+0x50>
  }


  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000940:	230f      	movs	r3, #15
 8000942:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	2302      	movs	r3, #2
 8000946:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800094c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000950:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000956:	647b      	str	r3, [r7, #68]	@ 0x44
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000958:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800095c:	2107      	movs	r1, #7
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fa18 	bl	8002d94 <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x82>
  {
    while(1) {};
 800096a:	bf00      	nop
 800096c:	e7fd      	b.n	800096a <SystemClock_Config+0x7e>
  }
}
 800096e:	bf00      	nop
 8000970:	3748      	adds	r7, #72	@ 0x48
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800097c:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <MX_ETH_Init+0x84>)
 800097e:	4a20      	ldr	r2, [pc, #128]	@ (8000a00 <MX_ETH_Init+0x88>)
 8000980:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <MX_ETH_Init+0x8c>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <MX_ETH_Init+0x8c>)
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800098e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <MX_ETH_Init+0x8c>)
 8000990:	22e1      	movs	r2, #225	@ 0xe1
 8000992:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <MX_ETH_Init+0x8c>)
 8000996:	2200      	movs	r2, #0
 8000998:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_ETH_Init+0x8c>)
 800099c:	2200      	movs	r2, #0
 800099e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009a0:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <MX_ETH_Init+0x8c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <MX_ETH_Init+0x84>)
 80009a8:	4a16      	ldr	r2, [pc, #88]	@ (8000a04 <MX_ETH_Init+0x8c>)
 80009aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_ETH_Init+0x84>)
 80009ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009b2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_ETH_Init+0x84>)
 80009b6:	4a14      	ldr	r2, [pc, #80]	@ (8000a08 <MX_ETH_Init+0x90>)
 80009b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <MX_ETH_Init+0x84>)
 80009bc:	4a13      	ldr	r2, [pc, #76]	@ (8000a0c <MX_ETH_Init+0x94>)
 80009be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_ETH_Init+0x84>)
 80009c2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80009c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009c8:	480c      	ldr	r0, [pc, #48]	@ (80009fc <MX_ETH_Init+0x84>)
 80009ca:	f000 fd29 	bl	8001420 <HAL_ETH_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009d4:	f000 f91e 	bl	8000c14 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009d8:	2238      	movs	r2, #56	@ 0x38
 80009da:	2100      	movs	r1, #0
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <MX_ETH_Init+0x98>)
 80009de:	f003 ffe4 	bl	80049aa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_ETH_Init+0x98>)
 80009e4:	2221      	movs	r2, #33	@ 0x21
 80009e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_ETH_Init+0x98>)
 80009ea:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80009ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <MX_ETH_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001ec 	.word	0x200001ec
 8000a00:	40028000 	.word	0x40028000
 8000a04:	20000804 	.word	0x20000804
 8000a08:	200000ac 	.word	0x200000ac
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	200001b4 	.word	0x200001b4

08000a14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a1a:	4a15      	ldr	r2, [pc, #84]	@ (8000a70 <MX_USART3_UART_Init+0x5c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a58:	f002 ffea 	bl	8003a30 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 f8d7 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000029c 	.word	0x2000029c
 8000a70:	40004800 	.word	0x40004800

08000a74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	2206      	movs	r2, #6
 8000a84:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a88:	2202      	movs	r2, #2
 8000a8a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	f001 fd33 	bl	8002522 <HAL_PCD_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ac2:	f000 f8a7 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000324 	.word	0x20000324

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	@ 0x30
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b47      	ldr	r3, [pc, #284]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a46      	ldr	r2, [pc, #280]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b44      	ldr	r3, [pc, #272]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	61bb      	str	r3, [r7, #24]
 8000afc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	4b41      	ldr	r3, [pc, #260]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a40      	ldr	r2, [pc, #256]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b3b      	ldr	r3, [pc, #236]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a3a      	ldr	r2, [pc, #232]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b38      	ldr	r3, [pc, #224]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b35      	ldr	r3, [pc, #212]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a34      	ldr	r2, [pc, #208]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a2e      	ldr	r2, [pc, #184]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5e:	4b29      	ldr	r3, [pc, #164]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a28      	ldr	r2, [pc, #160]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <MX_GPIO_Init+0x134>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b7c:	4822      	ldr	r0, [pc, #136]	@ (8000c08 <MX_GPIO_Init+0x138>)
 8000b7e:	f001 fcb7 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2140      	movs	r1, #64	@ 0x40
 8000b86:	4821      	ldr	r0, [pc, #132]	@ (8000c0c <MX_GPIO_Init+0x13c>)
 8000b88:	f001 fcb2 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481b      	ldr	r0, [pc, #108]	@ (8000c10 <MX_GPIO_Init+0x140>)
 8000ba4:	f001 faf8 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ba8:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <MX_GPIO_Init+0x138>)
 8000bc2:	f001 fae9 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bc6:	2340      	movs	r3, #64	@ 0x40
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480b      	ldr	r0, [pc, #44]	@ (8000c0c <MX_GPIO_Init+0x13c>)
 8000bde:	f001 fadb 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000be2:	2380      	movs	r3, #128	@ 0x80
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_GPIO_Init+0x13c>)
 8000bf6:	f001 facf 	bl	8002198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3730      	adds	r7, #48	@ 0x30
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40021800 	.word	0x40021800
 8000c10:	40020800 	.word	0x40020800

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <Error_Handler+0x8>

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	@ 0x38
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a4e      	ldr	r2, [pc, #312]	@ (8000dc0 <HAL_ETH_MspInit+0x158>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	f040 8096 	bne.w	8000db8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c90:	4a4c      	ldr	r2, [pc, #304]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000c92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c98:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ca0:	623b      	str	r3, [r7, #32]
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	4b47      	ldr	r3, [pc, #284]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	4a46      	ldr	r2, [pc, #280]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000caa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb0:	4b44      	ldr	r3, [pc, #272]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	4b41      	ldr	r3, [pc, #260]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	4a40      	ldr	r2, [pc, #256]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000cc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd8:	4a3a      	ldr	r2, [pc, #232]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce0:	4b38      	ldr	r3, [pc, #224]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b35      	ldr	r3, [pc, #212]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf0:	4a34      	ldr	r2, [pc, #208]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf8:	4b32      	ldr	r3, [pc, #200]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d08:	4a2e      	ldr	r2, [pc, #184]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d10:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1c:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	4a28      	ldr	r2, [pc, #160]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d28:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <HAL_ETH_MspInit+0x15c>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d34:	2332      	movs	r3, #50	@ 0x32
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d44:	230b      	movs	r3, #11
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481e      	ldr	r0, [pc, #120]	@ (8000dc8 <HAL_ETH_MspInit+0x160>)
 8000d50:	f001 fa22 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d54:	2386      	movs	r3, #134	@ 0x86
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d64:	230b      	movs	r3, #11
 8000d66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4817      	ldr	r0, [pc, #92]	@ (8000dcc <HAL_ETH_MspInit+0x164>)
 8000d70:	f001 fa12 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d86:	230b      	movs	r3, #11
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480f      	ldr	r0, [pc, #60]	@ (8000dd0 <HAL_ETH_MspInit+0x168>)
 8000d92:	f001 fa01 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d96:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da8:	230b      	movs	r3, #11
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <HAL_ETH_MspInit+0x16c>)
 8000db4:	f001 f9f0 	bl	8002198 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000db8:	bf00      	nop
 8000dba:	3738      	adds	r7, #56	@ 0x38
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40028000 	.word	0x40028000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020800 	.word	0x40020800
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40020400 	.word	0x40020400
 8000dd4:	40021800 	.word	0x40021800

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ae      	sub	sp, #184	@ 0xb8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2290      	movs	r2, #144	@ 0x90
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fdd6 	bl	80049aa <memset>
  if(huart->Instance==USART3)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a22      	ldr	r2, [pc, #136]	@ (8000e8c <HAL_UART_MspInit+0xb4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d13c      	bne.n	8000e82 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 f9e2 	bl	80031e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e22:	f7ff fef7 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	4a19      	ldr	r2, [pc, #100]	@ (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a13      	ldr	r2, [pc, #76]	@ (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_UART_MspInit+0xb8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e70:	2307      	movs	r3, #7
 8000e72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <HAL_UART_MspInit+0xbc>)
 8000e7e:	f001 f98b 	bl	8002198 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e82:	bf00      	nop
 8000e84:	37b8      	adds	r7, #184	@ 0xb8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40004800 	.word	0x40004800
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020c00 	.word	0x40020c00

08000e98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0ae      	sub	sp, #184	@ 0xb8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2290      	movs	r2, #144	@ 0x90
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fd76 	bl	80049aa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ec6:	d159      	bne.n	8000f7c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ec8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ecc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 f981 	bl	80031e0 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ee4:	f7ff fe96 	bl	8000c14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <HAL_PCD_MspInit+0xec>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eec:	4a25      	ldr	r2, [pc, #148]	@ (8000f84 <HAL_PCD_MspInit+0xec>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef4:	4b23      	ldr	r3, [pc, #140]	@ (8000f84 <HAL_PCD_MspInit+0xec>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f00:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4818      	ldr	r0, [pc, #96]	@ (8000f88 <HAL_PCD_MspInit+0xf0>)
 8000f28:	f001 f936 	bl	8002198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4810      	ldr	r0, [pc, #64]	@ (8000f88 <HAL_PCD_MspInit+0xf0>)
 8000f48:	f001 f926 	bl	8002198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <HAL_PCD_MspInit+0xec>)
 8000f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f50:	4a0c      	ldr	r2, [pc, #48]	@ (8000f84 <HAL_PCD_MspInit+0xec>)
 8000f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f56:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_PCD_MspInit+0xec>)
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <HAL_PCD_MspInit+0xec>)
 8000f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f68:	4a06      	ldr	r2, [pc, #24]	@ (8000f84 <HAL_PCD_MspInit+0xec>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <HAL_PCD_MspInit+0xec>)
 8000f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f7c:	bf00      	nop
 8000f7e:	37b8      	adds	r7, #184	@ 0xb8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <NMI_Handler+0x4>

08000f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f87b 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001014:	f7ff ffea 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800103e:	f003 fcbd 	bl	80049bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fc41 	bl	80008c8 <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001054:	08004a44 	.word	0x08004a44
  ldr r2, =_sbss
 8001058:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 800105c:	2000082c 	.word	0x2000082c

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>

08001062 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001066:	2003      	movs	r0, #3
 8001068:	f000 f92e 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106c:	2000      	movs	r0, #0
 800106e:	f000 f805 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001072:	f7ff fdd5 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f93b 	bl	8001316 <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f911 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	2000080c 	.word	0x2000080c

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000080c 	.word	0x2000080c

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	4313      	orrs	r3, r2
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	05fa0000 	.word	0x05fa0000

080011ac <__NVIC_GetPriorityGrouping>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_SetPriority>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff47 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff5c 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff8e 	bl	800121c <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffb0 	bl	8001284 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001334:	f3bf 8f5f 	dmb	sy
}
 8001338:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <HAL_MPU_Disable+0x28>)
 800133c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133e:	4a06      	ldr	r2, [pc, #24]	@ (8001358 <HAL_MPU_Disable+0x28>)
 8001340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001344:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001346:	4b05      	ldr	r3, [pc, #20]	@ (800135c <HAL_MPU_Disable+0x2c>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	e000ed90 	.word	0xe000ed90

08001360 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001368:	4a0b      	ldr	r2, [pc, #44]	@ (8001398 <HAL_MPU_Enable+0x38>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <HAL_MPU_Enable+0x3c>)
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001376:	4a09      	ldr	r2, [pc, #36]	@ (800139c <HAL_MPU_Enable+0x3c>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800137c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800137e:	f3bf 8f4f 	dsb	sy
}
 8001382:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001384:	f3bf 8f6f 	isb	sy
}
 8001388:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed90 	.word	0xe000ed90
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	785a      	ldrb	r2, [r3, #1]
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <HAL_MPU_ConfigRegion+0x7c>)
 80013ae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <HAL_MPU_ConfigRegion+0x7c>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	4a19      	ldr	r2, [pc, #100]	@ (800141c <HAL_MPU_ConfigRegion+0x7c>)
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013bc:	4a17      	ldr	r2, [pc, #92]	@ (800141c <HAL_MPU_ConfigRegion+0x7c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7adb      	ldrb	r3, [r3, #11]
 80013ce:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7a9b      	ldrb	r3, [r3, #10]
 80013d6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7b5b      	ldrb	r3, [r3, #13]
 80013de:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7b9b      	ldrb	r3, [r3, #14]
 80013e6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7bdb      	ldrb	r3, [r3, #15]
 80013ee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7a5b      	ldrb	r3, [r3, #9]
 80013f6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7a1b      	ldrb	r3, [r3, #8]
 80013fe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001400:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800140a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800140c:	6113      	str	r3, [r2, #16]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed90 	.word	0xe000ed90

08001420 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e086      	b.n	8001540 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001438:	2b00      	cmp	r3, #0
 800143a:	d106      	bne.n	800144a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2223      	movs	r2, #35	@ 0x23
 8001440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff fc0f 	bl	8000c68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	4b3f      	ldr	r3, [pc, #252]	@ (8001548 <HAL_ETH_Init+0x128>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a3e      	ldr	r2, [pc, #248]	@ (8001548 <HAL_ETH_Init+0x128>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b3c      	ldr	r3, [pc, #240]	@ (8001548 <HAL_ETH_Init+0x128>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001462:	4b3a      	ldr	r3, [pc, #232]	@ (800154c <HAL_ETH_Init+0x12c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4a39      	ldr	r2, [pc, #228]	@ (800154c <HAL_ETH_Init+0x12c>)
 8001468:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800146c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800146e:	4b37      	ldr	r3, [pc, #220]	@ (800154c <HAL_ETH_Init+0x12c>)
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	4935      	ldr	r1, [pc, #212]	@ (800154c <HAL_ETH_Init+0x12c>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800147c:	4b33      	ldr	r3, [pc, #204]	@ (800154c <HAL_ETH_Init+0x12c>)
 800147e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001496:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001498:	f7ff fe34 	bl	8001104 <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800149e:	e011      	b.n	80014c4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014a0:	f7ff fe30 	bl	8001104 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014ae:	d909      	bls.n	80014c4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2204      	movs	r2, #4
 80014b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	22e0      	movs	r2, #224	@ 0xe0
 80014bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e03d      	b.n	8001540 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1e4      	bne.n	80014a0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f97a 	bl	80017d0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 fa25 	bl	800192c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fa7b 	bl	80019de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	461a      	mov	r2, r3
 80014ee:	2100      	movs	r1, #0
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f9e3 	bl	80018bc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001504:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <HAL_ETH_Init+0x130>)
 8001514:	430b      	orrs	r3, r1
 8001516:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800152a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2210      	movs	r2, #16
 800153a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800
 800154c:	40013800 	.word	0x40013800
 8001550:	00020060 	.word	0x00020060

08001554 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4b53      	ldr	r3, [pc, #332]	@ (80016b8 <ETH_SetMACConfig+0x164>)
 800156a:	4013      	ands	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	7b9b      	ldrb	r3, [r3, #14]
 8001572:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	7c12      	ldrb	r2, [r2, #16]
 8001578:	2a00      	cmp	r2, #0
 800157a:	d102      	bne.n	8001582 <ETH_SetMACConfig+0x2e>
 800157c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001580:	e000      	b.n	8001584 <ETH_SetMACConfig+0x30>
 8001582:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001584:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	7c52      	ldrb	r2, [r2, #17]
 800158a:	2a00      	cmp	r2, #0
 800158c:	d102      	bne.n	8001594 <ETH_SetMACConfig+0x40>
 800158e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001592:	e000      	b.n	8001596 <ETH_SetMACConfig+0x42>
 8001594:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001596:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800159c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	7fdb      	ldrb	r3, [r3, #31]
 80015a2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80015a4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	7f92      	ldrb	r2, [r2, #30]
 80015b0:	2a00      	cmp	r2, #0
 80015b2:	d102      	bne.n	80015ba <ETH_SetMACConfig+0x66>
 80015b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015b8:	e000      	b.n	80015bc <ETH_SetMACConfig+0x68>
 80015ba:	2200      	movs	r2, #0
                        macconf->Speed |
 80015bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	7f1b      	ldrb	r3, [r3, #28]
 80015c2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015c4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	791b      	ldrb	r3, [r3, #4]
 80015d0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d102      	bne.n	80015e4 <ETH_SetMACConfig+0x90>
 80015de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e2:	e000      	b.n	80015e6 <ETH_SetMACConfig+0x92>
 80015e4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	7bdb      	ldrb	r3, [r3, #15]
 80015ec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015ee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80015fc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015fe:	4313      	orrs	r3, r2
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff fd80 	bl	800111c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001632:	4013      	ands	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800163a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001642:	2a00      	cmp	r2, #0
 8001644:	d101      	bne.n	800164a <ETH_SetMACConfig+0xf6>
 8001646:	2280      	movs	r2, #128	@ 0x80
 8001648:	e000      	b.n	800164c <ETH_SetMACConfig+0xf8>
 800164a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800164c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001652:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800165a:	2a01      	cmp	r2, #1
 800165c:	d101      	bne.n	8001662 <ETH_SetMACConfig+0x10e>
 800165e:	2208      	movs	r2, #8
 8001660:	e000      	b.n	8001664 <ETH_SetMACConfig+0x110>
 8001662:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001664:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800166c:	2a01      	cmp	r2, #1
 800166e:	d101      	bne.n	8001674 <ETH_SetMACConfig+0x120>
 8001670:	2204      	movs	r2, #4
 8001672:	e000      	b.n	8001676 <ETH_SetMACConfig+0x122>
 8001674:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001676:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800167e:	2a01      	cmp	r2, #1
 8001680:	d101      	bne.n	8001686 <ETH_SetMACConfig+0x132>
 8001682:	2202      	movs	r2, #2
 8001684:	e000      	b.n	8001688 <ETH_SetMACConfig+0x134>
 8001686:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001688:	4313      	orrs	r3, r2
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fd3b 	bl	800111c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	619a      	str	r2, [r3, #24]
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	fd20810f 	.word	0xfd20810f

080016bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <ETH_SetDMAConfig+0x110>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	7b1b      	ldrb	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <ETH_SetDMAConfig+0x2c>
 80016e2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016e6:	e000      	b.n	80016ea <ETH_SetDMAConfig+0x2e>
 80016e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	7b5b      	ldrb	r3, [r3, #13]
 80016ee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016f0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	7f52      	ldrb	r2, [r2, #29]
 80016f6:	2a00      	cmp	r2, #0
 80016f8:	d102      	bne.n	8001700 <ETH_SetDMAConfig+0x44>
 80016fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016fe:	e000      	b.n	8001702 <ETH_SetDMAConfig+0x46>
 8001700:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001702:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	7b9b      	ldrb	r3, [r3, #14]
 8001708:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800170a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001710:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	7f1b      	ldrb	r3, [r3, #28]
 8001716:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001718:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	7f9b      	ldrb	r3, [r3, #30]
 800171e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001720:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001726:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800172e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001730:	4313      	orrs	r3, r2
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001740:	461a      	mov	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff fce2 	bl	800111c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001760:	461a      	mov	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	791b      	ldrb	r3, [r3, #4]
 800176a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001770:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001776:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800177c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001784:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001786:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800178e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001794:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800179e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017a2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7ff fcb3 	bl	800111c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	f8de3f23 	.word	0xf8de3f23

080017d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0a6      	sub	sp, #152	@ 0x98
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017d8:	2301      	movs	r3, #1
 80017da:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017e4:	2300      	movs	r3, #0
 80017e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001812:	2300      	movs	r3, #0
 8001814:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800181c:	2300      	movs	r3, #0
 800181e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001838:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800183c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800183e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800184a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800184e:	4619      	mov	r1, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fe7f 	bl	8001554 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001856:	2301      	movs	r3, #1
 8001858:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800185a:	2301      	movs	r3, #1
 800185c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800185e:	2301      	movs	r3, #1
 8001860:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001864:	2301      	movs	r3, #1
 8001866:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800187c:	2301      	movs	r3, #1
 800187e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001882:	2301      	movs	r3, #1
 8001884:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001886:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800188a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800188c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001890:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001892:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001896:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001898:	2301      	movs	r3, #1
 800189a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4619      	mov	r1, r3
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff05 	bl	80016bc <ETH_SetDMAConfig>
}
 80018b2:	bf00      	nop
 80018b4:	3798      	adds	r7, #152	@ 0x98
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3305      	adds	r3, #5
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	3204      	adds	r2, #4
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <ETH_MACAddressConfig+0x68>)
 80018de:	4413      	add	r3, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3303      	adds	r3, #3
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	061a      	lsls	r2, r3, #24
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3302      	adds	r3, #2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	041b      	lsls	r3, r3, #16
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3301      	adds	r3, #1
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	4313      	orrs	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	7812      	ldrb	r2, [r2, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <ETH_MACAddressConfig+0x6c>)
 800190e:	4413      	add	r3, r2
 8001910:	461a      	mov	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	6013      	str	r3, [r2, #0]
}
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40028040 	.word	0x40028040
 8001928:	40028044 	.word	0x40028044

0800192c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	e03e      	b.n	80019b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2200      	movs	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	3206      	adds	r2, #6
 800196c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d80c      	bhi.n	800199c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68d9      	ldr	r1, [r3, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	461a      	mov	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	e004      	b.n	80019a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	461a      	mov	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d9bd      	bls.n	800193a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019d0:	611a      	str	r2, [r3, #16]
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019de:	b480      	push	{r7}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e048      	b.n	8001a7e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6919      	ldr	r1, [r3, #16]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a28:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	3212      	adds	r2, #18
 8001a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d80c      	bhi.n	8001a6e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6919      	ldr	r1, [r3, #16]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	461a      	mov	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	e004      	b.n	8001a78 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d9b3      	bls.n	80019ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aae:	60da      	str	r2, [r3, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ace:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <HAL_FLASH_Program+0xb0>)
 8001ad0:	7d1b      	ldrb	r3, [r3, #20]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_FLASH_Program+0x1e>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e043      	b.n	8001b62 <HAL_FLASH_Program+0xa6>
 8001ada:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <HAL_FLASH_Program+0xb0>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ae0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ae4:	f000 f894 	bl	8001c10 <FLASH_WaitForLastOperation>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d133      	bne.n	8001b5a <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d823      	bhi.n	8001b40 <HAL_FLASH_Program+0x84>
 8001af8:	a201      	add	r2, pc, #4	@ (adr r2, 8001b00 <HAL_FLASH_Program+0x44>)
 8001afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afe:	bf00      	nop
 8001b00:	08001b11 	.word	0x08001b11
 8001b04:	08001b1d 	.word	0x08001b1d
 8001b08:	08001b29 	.word	0x08001b29
 8001b0c:	08001b35 	.word	0x08001b35
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001b10:	783b      	ldrb	r3, [r7, #0]
 8001b12:	4619      	mov	r1, r3
 8001b14:	68b8      	ldr	r0, [r7, #8]
 8001b16:	f000 f93d 	bl	8001d94 <FLASH_Program_Byte>
        break;
 8001b1a:	e012      	b.n	8001b42 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001b1c:	883b      	ldrh	r3, [r7, #0]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	68b8      	ldr	r0, [r7, #8]
 8001b22:	f000 f911 	bl	8001d48 <FLASH_Program_HalfWord>
        break;
 8001b26:	e00c      	b.n	8001b42 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	68b8      	ldr	r0, [r7, #8]
 8001b2e:	f000 f8e5 	bl	8001cfc <FLASH_Program_Word>
        break;
 8001b32:	e006      	b.n	8001b42 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b38:	68b8      	ldr	r0, [r7, #8]
 8001b3a:	f000 f8a9 	bl	8001c90 <FLASH_Program_DoubleWord>
        break;
 8001b3e:	e000      	b.n	8001b42 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8001b40:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b42:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b46:	f000 f863 	bl	8001c10 <FLASH_WaitForLastOperation>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001b4e:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <HAL_FLASH_Program+0xb4>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <HAL_FLASH_Program+0xb4>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <HAL_FLASH_Program+0xb0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	751a      	strb	r2, [r3, #20]

  return status;
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000810 	.word	0x20000810
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_FLASH_Unlock+0x38>)
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da0b      	bge.n	8001b9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <HAL_FLASH_Unlock+0x38>)
 8001b88:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <HAL_FLASH_Unlock+0x3c>)
 8001b8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b8c:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <HAL_FLASH_Unlock+0x38>)
 8001b8e:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <HAL_FLASH_Unlock+0x40>)
 8001b90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_FLASH_Unlock+0x38>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da01      	bge.n	8001b9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40023c00 	.word	0x40023c00
 8001bb0:	45670123 	.word	0x45670123
 8001bb4:	cdef89ab 	.word	0xcdef89ab

08001bb8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_FLASH_Lock+0x1c>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <HAL_FLASH_Lock+0x1c>)
 8001bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bc6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001bdc:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <HAL_FLASH_OB_Unlock+0x2c>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_FLASH_OB_Unlock+0x2c>)
 8001bea:	4a07      	ldr	r2, [pc, #28]	@ (8001c08 <HAL_FLASH_OB_Unlock+0x30>)
 8001bec:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001bee:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_FLASH_OB_Unlock+0x2c>)
 8001bf0:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <HAL_FLASH_OB_Unlock+0x34>)
 8001bf2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e000      	b.n	8001bfa <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40023c00 	.word	0x40023c00
 8001c08:	08192a3b 	.word	0x08192a3b
 8001c0c:	4c5d6e7f 	.word	0x4c5d6e7f

08001c10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <FLASH_WaitForLastOperation+0x78>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c22:	f7ff fa6f 	bl	8001104 <HAL_GetTick>
 8001c26:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c28:	e010      	b.n	8001c4c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d00c      	beq.n	8001c4c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <FLASH_WaitForLastOperation+0x38>
 8001c38:	f7ff fa64 	bl	8001104 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d201      	bcs.n	8001c4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e019      	b.n	8001c80 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <FLASH_WaitForLastOperation+0x7c>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e8      	bne.n	8001c2a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <FLASH_WaitForLastOperation+0x7c>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c64:	f000 f8ba 	bl	8001ddc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e009      	b.n	8001c80 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c6c:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <FLASH_WaitForLastOperation+0x7c>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <FLASH_WaitForLastOperation+0x7c>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
  
}  
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000810 	.word	0x20000810
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001c9c:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <FLASH_Program_DoubleWord+0x68>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	4a15      	ldr	r2, [pc, #84]	@ (8001cf8 <FLASH_Program_DoubleWord+0x68>)
 8001ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ca6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <FLASH_Program_DoubleWord+0x68>)
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <FLASH_Program_DoubleWord+0x68>)
 8001cae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001cb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001cb4:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <FLASH_Program_DoubleWord+0x68>)
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf8 <FLASH_Program_DoubleWord+0x68>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001cc6:	f3bf 8f6f 	isb	sy
}
 8001cca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	000a      	movs	r2, r1
 8001cda:	2300      	movs	r3, #0
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	3104      	adds	r1, #4
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce4:	f3bf 8f4f 	dsb	sy
}
 8001ce8:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001d06:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <FLASH_Program_Word+0x48>)
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d44 <FLASH_Program_Word+0x48>)
 8001d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <FLASH_Program_Word+0x48>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	4a0b      	ldr	r2, [pc, #44]	@ (8001d44 <FLASH_Program_Word+0x48>)
 8001d18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <FLASH_Program_Word+0x48>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <FLASH_Program_Word+0x48>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d30:	f3bf 8f4f 	dsb	sy
}
 8001d34:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023c00 	.word	0x40023c00

08001d48 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <FLASH_Program_HalfWord+0x48>)
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <FLASH_Program_HalfWord+0x48>)
 8001d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <FLASH_Program_HalfWord+0x48>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	@ (8001d90 <FLASH_Program_HalfWord+0x48>)
 8001d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <FLASH_Program_HalfWord+0x48>)
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	4a07      	ldr	r2, [pc, #28]	@ (8001d90 <FLASH_Program_HalfWord+0x48>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7e:	f3bf 8f4f 	dsb	sy
}
 8001d82:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <FLASH_Program_Byte+0x44>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd8 <FLASH_Program_Byte+0x44>)
 8001da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001daa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <FLASH_Program_Byte+0x44>)
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <FLASH_Program_Byte+0x44>)
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <FLASH_Program_Byte+0x44>)
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <FLASH_Program_Byte+0x44>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	78fa      	ldrb	r2, [r7, #3]
 8001dc4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dc6:	f3bf 8f4f 	dsb	sy
}
 8001dca:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001de0:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <FLASH_SetErrorCode+0x8c>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001dec:	4b1f      	ldr	r3, [pc, #124]	@ (8001e6c <FLASH_SetErrorCode+0x90>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f043 0320 	orr.w	r3, r3, #32
 8001df4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e6c <FLASH_SetErrorCode+0x90>)
 8001df6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <FLASH_SetErrorCode+0x8c>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e04:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <FLASH_SetErrorCode+0x90>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f043 0310 	orr.w	r3, r3, #16
 8001e0c:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <FLASH_SetErrorCode+0x90>)
 8001e0e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001e10:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <FLASH_SetErrorCode+0x8c>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <FLASH_SetErrorCode+0x90>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f043 0308 	orr.w	r3, r3, #8
 8001e24:	4a11      	ldr	r2, [pc, #68]	@ (8001e6c <FLASH_SetErrorCode+0x90>)
 8001e26:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <FLASH_SetErrorCode+0x8c>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001e34:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <FLASH_SetErrorCode+0x90>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e6c <FLASH_SetErrorCode+0x90>)
 8001e3e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <FLASH_SetErrorCode+0x8c>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <FLASH_SetErrorCode+0x90>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <FLASH_SetErrorCode+0x90>)
 8001e56:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001e58:	4b03      	ldr	r3, [pc, #12]	@ (8001e68 <FLASH_SetErrorCode+0x8c>)
 8001e5a:	22f2      	movs	r2, #242	@ 0xf2
 8001e5c:	60da      	str	r2, [r3, #12]
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40023c00 	.word	0x40023c00
 8001e6c:	20000810 	.word	0x20000810

08001e70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e82:	4b30      	ldr	r3, [pc, #192]	@ (8001f44 <HAL_FLASHEx_Erase+0xd4>)
 8001e84:	7d1b      	ldrb	r3, [r3, #20]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_FLASHEx_Erase+0x1e>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e056      	b.n	8001f3c <HAL_FLASHEx_Erase+0xcc>
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f44 <HAL_FLASHEx_Erase+0xd4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e94:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e98:	f7ff feba 	bl	8001c10 <FLASH_WaitForLastOperation>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d146      	bne.n	8001f34 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d115      	bne.n	8001ee2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f000 f870 	bl	8001fa8 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ec8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ecc:	f7ff fea0 	bl	8001c10 <FLASH_WaitForLastOperation>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <HAL_FLASHEx_Erase+0xd8>)
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	491b      	ldr	r1, [pc, #108]	@ (8001f48 <HAL_FLASHEx_Erase+0xd8>)
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <HAL_FLASHEx_Erase+0xdc>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	610b      	str	r3, [r1, #16]
 8001ee0:	e028      	b.n	8001f34 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	e01c      	b.n	8001f24 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68b8      	ldr	r0, [r7, #8]
 8001ef4:	f000 f894 	bl	8002020 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ef8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001efc:	f7ff fe88 	bl	8001c10 <FLASH_WaitForLastOperation>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8001f04:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_FLASHEx_Erase+0xd8>)
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	4a0f      	ldr	r2, [pc, #60]	@ (8001f48 <HAL_FLASHEx_Erase+0xd8>)
 8001f0a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001f0e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	601a      	str	r2, [r3, #0]
          break;
 8001f1c:	e00a      	b.n	8001f34 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d3da      	bcc.n	8001eea <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f34:	4b03      	ldr	r3, [pc, #12]	@ (8001f44 <HAL_FLASHEx_Erase+0xd4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	751a      	strb	r2, [r3, #20]

  return status;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000810 	.word	0x20000810
 8001f48:	40023c00 	.word	0x40023c00
 8001f4c:	ffff7ffb 	.word	0xffff7ffb

08001f50 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	223f      	movs	r2, #63	@ 0x3f
 8001f5c:	601a      	str	r2, [r3, #0]
	                OPTIONBYTE_BOR | OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;

  /*Get WRP*/
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 8001f5e:	f000 f8b1 	bl	80020c4 <FLASH_OB_GetWRP>
 8001f62:	4602      	mov	r2, r0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001f68:	f000 f8cc 	bl	8002104 <FLASH_OB_GetRDP>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60da      	str	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001f74:	f000 f8b6 	bl	80020e4 <FLASH_OB_GetUser>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	615a      	str	r2, [r3, #20]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 8001f7e:	f000 f8e1 	bl	8002144 <FLASH_OB_GetBOR>
 8001f82:	4602      	mov	r2, r0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]
  
  /*Get Boot Address when Boot pin = 0 */
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 8001f88:	2010      	movs	r0, #16
 8001f8a:	f000 f8e9 	bl	8002160 <FLASH_OB_GetBootAddress>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
  
  /*Get Boot Address when Boot pin = 1 */
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 8001f94:	2020      	movs	r0, #32
 8001f96:	f000 f8e3 	bl	8002160 <FLASH_OB_GetBootAddress>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	61da      	str	r2, [r3, #28]
  pOBInit->PCROPSector = FLASH_OB_GetPCROP();
  
  /*Get PCROP_RDP Value */
  pOBInit->PCROPRdp = FLASH_OB_GetPCROPRDP();
#endif /* FLASH_OPTCR2_PCROP */
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	@ (800201c <FLASH_MassErase+0x74>)
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	4a18      	ldr	r2, [pc, #96]	@ (800201c <FLASH_MassErase+0x74>)
 8001fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fbe:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d107      	bne.n	8001fd6 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <FLASH_MassErase+0x74>)
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	4914      	ldr	r1, [pc, #80]	@ (800201c <FLASH_MassErase+0x74>)
 8001fcc:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	610b      	str	r3, [r1, #16]
 8001fd4:	e00f      	b.n	8001ff6 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d106      	bne.n	8001fea <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <FLASH_MassErase+0x74>)
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800201c <FLASH_MassErase+0x74>)
 8001fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fe6:	6113      	str	r3, [r2, #16]
 8001fe8:	e005      	b.n	8001ff6 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <FLASH_MassErase+0x74>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	4a0b      	ldr	r2, [pc, #44]	@ (800201c <FLASH_MassErase+0x74>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <FLASH_MassErase+0x74>)
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4a06      	ldr	r2, [pc, #24]	@ (800201c <FLASH_MassErase+0x74>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002006:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002008:	f3bf 8f4f 	dsb	sy
}
 800200c:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00

08002020 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e010      	b.n	800205e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d103      	bne.n	800204a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002042:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e009      	b.n	800205e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d103      	bne.n	8002058 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e002      	b.n	800205e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002058:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800205c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0b      	cmp	r3, #11
 8002062:	d902      	bls.n	800206a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800206a:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <FLASH_Erase_Sector+0xa0>)
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <FLASH_Erase_Sector+0xa0>)
 8002070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002074:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002076:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <FLASH_Erase_Sector+0xa0>)
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	4911      	ldr	r1, [pc, #68]	@ (80020c0 <FLASH_Erase_Sector+0xa0>)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002082:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <FLASH_Erase_Sector+0xa0>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	4a0e      	ldr	r2, [pc, #56]	@ (80020c0 <FLASH_Erase_Sector+0xa0>)
 8002088:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800208c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <FLASH_Erase_Sector+0xa0>)
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4313      	orrs	r3, r2
 8002098:	4a09      	ldr	r2, [pc, #36]	@ (80020c0 <FLASH_Erase_Sector+0xa0>)
 800209a:	f043 0302 	orr.w	r3, r3, #2
 800209e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80020a0:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <FLASH_Erase_Sector+0xa0>)
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	4a06      	ldr	r2, [pc, #24]	@ (80020c0 <FLASH_Erase_Sector+0xa0>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020aa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80020ac:	f3bf 8f4f 	dsb	sy
}
 80020b0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00

080020c4 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint32_t FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 80020c8:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <FLASH_OB_GetWRP+0x18>)
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <FLASH_OB_GetWRP+0x1c>)
 80020ce:	4013      	ands	r3, r2
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40023c00 	.word	0x40023c00
 80020e0:	0fff0000 	.word	0x0fff0000

080020e4 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint32_t FLASH User Option Bytes values: WWDG_SW(Bit4), IWDG_SW(Bit5), nRST_STOP(Bit6), 
  *         nRST_STDBY(Bit7), nDBOOT(Bit28), nDBANK(Bit29), IWDG_STDBY(Bit30) and IWDG_STOP(Bit31).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <FLASH_OB_GetUser+0x18>)
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <FLASH_OB_GetUser+0x1c>)
 80020ee:	4013      	ands	r3, r2
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023c00 	.word	0x40023c00
 8002100:	f00000f0 	.word	0xf00000f0

08002104 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800210a:	23aa      	movs	r3, #170	@ 0xaa
 800210c:	71fb      	strb	r3, [r7, #7]
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800210e:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <FLASH_OB_GetRDP+0x3c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2baa      	cmp	r3, #170	@ 0xaa
 8002116:	d102      	bne.n	800211e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002118:	23aa      	movs	r3, #170	@ 0xaa
 800211a:	71fb      	strb	r3, [r7, #7]
 800211c:	e009      	b.n	8002132 <FLASH_OB_GetRDP+0x2e>
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800211e:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <FLASH_OB_GetRDP+0x3c>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2bcc      	cmp	r3, #204	@ 0xcc
 8002126:	d102      	bne.n	800212e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002128:	23cc      	movs	r3, #204	@ 0xcc
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	e001      	b.n	8002132 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800212e:	2355      	movs	r3, #85	@ 0x55
 8002130:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002132:	79fb      	ldrb	r3, [r7, #7]
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40023c15 	.word	0x40023c15

08002144 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <FLASH_OB_GetBOR+0x18>)
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f003 030c 	and.w	r3, r3, #12
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023c00 	.word	0x40023c00

08002160 <FLASH_OB_GetBootAddress>:
  *            - OB_BOOTADDR_DTCM_RAM : Boot from DTCM RAM (0x20000000)                 
  *            - OB_BOOTADDR_SRAM1 : Boot from SRAM1 (0x20010000)                    
  *            - OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000) 
  */
static uint32_t FLASH_OB_GetBootAddress(uint32_t BootOption)
{  
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t Address = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b10      	cmp	r3, #16
 8002170:	d104      	bne.n	800217c <FLASH_OB_GetBootAddress+0x1c>
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 8002172:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <FLASH_OB_GetBootAddress+0x34>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	b29b      	uxth	r3, r3
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e004      	b.n	8002186 <FLASH_OB_GetBootAddress+0x26>
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <FLASH_OB_GetBootAddress+0x34>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	b29b      	uxth	r3, r3
 8002184:	60fb      	str	r3, [r7, #12]
	}

  return Address;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	@ 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e175      	b.n	80024a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8164 	bne.w	800249e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_GPIO_Init+0x56>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d130      	bne.n	8002250 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b03      	cmp	r3, #3
 800225a:	d017      	beq.n	800228c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80be 	beq.w	800249e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	4b66      	ldr	r3, [pc, #408]	@ (80024bc <HAL_GPIO_Init+0x324>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	4a65      	ldr	r2, [pc, #404]	@ (80024bc <HAL_GPIO_Init+0x324>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800232c:	6453      	str	r3, [r2, #68]	@ 0x44
 800232e:	4b63      	ldr	r3, [pc, #396]	@ (80024bc <HAL_GPIO_Init+0x324>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800233a:	4a61      	ldr	r2, [pc, #388]	@ (80024c0 <HAL_GPIO_Init+0x328>)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a58      	ldr	r2, [pc, #352]	@ (80024c4 <HAL_GPIO_Init+0x32c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d037      	beq.n	80023d6 <HAL_GPIO_Init+0x23e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a57      	ldr	r2, [pc, #348]	@ (80024c8 <HAL_GPIO_Init+0x330>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d031      	beq.n	80023d2 <HAL_GPIO_Init+0x23a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a56      	ldr	r2, [pc, #344]	@ (80024cc <HAL_GPIO_Init+0x334>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d02b      	beq.n	80023ce <HAL_GPIO_Init+0x236>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a55      	ldr	r2, [pc, #340]	@ (80024d0 <HAL_GPIO_Init+0x338>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d025      	beq.n	80023ca <HAL_GPIO_Init+0x232>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a54      	ldr	r2, [pc, #336]	@ (80024d4 <HAL_GPIO_Init+0x33c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01f      	beq.n	80023c6 <HAL_GPIO_Init+0x22e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a53      	ldr	r2, [pc, #332]	@ (80024d8 <HAL_GPIO_Init+0x340>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d019      	beq.n	80023c2 <HAL_GPIO_Init+0x22a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <HAL_GPIO_Init+0x344>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0x226>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a51      	ldr	r2, [pc, #324]	@ (80024e0 <HAL_GPIO_Init+0x348>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00d      	beq.n	80023ba <HAL_GPIO_Init+0x222>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a50      	ldr	r2, [pc, #320]	@ (80024e4 <HAL_GPIO_Init+0x34c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x21e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4f      	ldr	r2, [pc, #316]	@ (80024e8 <HAL_GPIO_Init+0x350>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_GPIO_Init+0x21a>
 80023ae:	2309      	movs	r3, #9
 80023b0:	e012      	b.n	80023d8 <HAL_GPIO_Init+0x240>
 80023b2:	230a      	movs	r3, #10
 80023b4:	e010      	b.n	80023d8 <HAL_GPIO_Init+0x240>
 80023b6:	2308      	movs	r3, #8
 80023b8:	e00e      	b.n	80023d8 <HAL_GPIO_Init+0x240>
 80023ba:	2307      	movs	r3, #7
 80023bc:	e00c      	b.n	80023d8 <HAL_GPIO_Init+0x240>
 80023be:	2306      	movs	r3, #6
 80023c0:	e00a      	b.n	80023d8 <HAL_GPIO_Init+0x240>
 80023c2:	2305      	movs	r3, #5
 80023c4:	e008      	b.n	80023d8 <HAL_GPIO_Init+0x240>
 80023c6:	2304      	movs	r3, #4
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x240>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x240>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x240>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x240>
 80023d6:	2300      	movs	r3, #0
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023e8:	4935      	ldr	r1, [pc, #212]	@ (80024c0 <HAL_GPIO_Init+0x328>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f6:	4b3d      	ldr	r3, [pc, #244]	@ (80024ec <HAL_GPIO_Init+0x354>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241a:	4a34      	ldr	r2, [pc, #208]	@ (80024ec <HAL_GPIO_Init+0x354>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002420:	4b32      	ldr	r3, [pc, #200]	@ (80024ec <HAL_GPIO_Init+0x354>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002444:	4a29      	ldr	r2, [pc, #164]	@ (80024ec <HAL_GPIO_Init+0x354>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800244a:	4b28      	ldr	r3, [pc, #160]	@ (80024ec <HAL_GPIO_Init+0x354>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246e:	4a1f      	ldr	r2, [pc, #124]	@ (80024ec <HAL_GPIO_Init+0x354>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002474:	4b1d      	ldr	r3, [pc, #116]	@ (80024ec <HAL_GPIO_Init+0x354>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002498:	4a14      	ldr	r2, [pc, #80]	@ (80024ec <HAL_GPIO_Init+0x354>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	f67f ae86 	bls.w	80021b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3724      	adds	r7, #36	@ 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020c00 	.word	0x40020c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40021400 	.word	0x40021400
 80024dc:	40021800 	.word	0x40021800
 80024e0:	40021c00 	.word	0x40021c00
 80024e4:	40022000 	.word	0x40022000
 80024e8:	40022400 	.word	0x40022400
 80024ec:	40013c00 	.word	0x40013c00

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800250c:	e003      	b.n	8002516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800250e:	887b      	ldrh	r3, [r7, #2]
 8002510:	041a      	lsls	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	619a      	str	r2, [r3, #24]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af02      	add	r7, sp, #8
 8002528:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e108      	b.n	8002746 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fca2 	bl	8000e98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2203      	movs	r2, #3
 8002558:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002562:	d102      	bne.n	800256a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f001 ff86 	bl	8004480 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7c1a      	ldrb	r2, [r3, #16]
 800257c:	f88d 2000 	strb.w	r2, [sp]
 8002580:	3304      	adds	r3, #4
 8002582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002584:	f001 ff22 	bl	80043cc <USB_CoreInit>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0d5      	b.n	8002746 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 ff7e 	bl	80044a2 <USB_SetCurrentMode>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0c6      	b.n	8002746 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	e04a      	b.n	8002654 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3315      	adds	r3, #21
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	3314      	adds	r3, #20
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	b298      	uxth	r0, r3
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	332e      	adds	r3, #46	@ 0x2e
 80025fa:	4602      	mov	r2, r0
 80025fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3318      	adds	r3, #24
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	331c      	adds	r3, #28
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	3320      	adds	r3, #32
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	3324      	adds	r3, #36	@ 0x24
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	3301      	adds	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	791b      	ldrb	r3, [r3, #4]
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3af      	bcc.n	80025be <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e044      	b.n	80026ee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	3301      	adds	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	791b      	ldrb	r3, [r3, #4]
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3b5      	bcc.n	8002664 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7c1a      	ldrb	r2, [r3, #16]
 8002700:	f88d 2000 	strb.w	r2, [sp]
 8002704:	3304      	adds	r3, #4
 8002706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002708:	f001 ff18 	bl	800453c <USB_DevInit>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e013      	b.n	8002746 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7b1b      	ldrb	r3, [r3, #12]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d102      	bne.n	800273a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f80b 	bl	8002750 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f002 f8d3 	bl	80048ea <USB_DevDisconnect>

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800277e:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_PCDEx_ActivateLPM+0x44>)
 8002780:	4313      	orrs	r3, r2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	10000003 	.word	0x10000003

08002798 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b23      	ldr	r3, [pc, #140]	@ (8002830 <HAL_PWREx_EnableOverDrive+0x98>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a22      	ldr	r2, [pc, #136]	@ (8002830 <HAL_PWREx_EnableOverDrive+0x98>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ae:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <HAL_PWREx_EnableOverDrive+0x98>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027c6:	f7fe fc9d 	bl	8001104 <HAL_GetTick>
 80027ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027cc:	e009      	b.n	80027e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027ce:	f7fe fc99 	bl	8001104 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027dc:	d901      	bls.n	80027e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e022      	b.n	8002828 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027e2:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ee:	d1ee      	bne.n	80027ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027f0:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027fc:	f7fe fc82 	bl	8001104 <HAL_GetTick>
 8002800:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002802:	e009      	b.n	8002818 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002804:	f7fe fc7e 	bl	8001104 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002812:	d901      	bls.n	8002818 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e007      	b.n	8002828 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_PWREx_EnableOverDrive+0x9c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002820:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002824:	d1ee      	bne.n	8002804 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40023800 	.word	0x40023800
 8002834:	40007000 	.word	0x40007000

08002838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e29b      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8087 	beq.w	800296a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800285c:	4b96      	ldr	r3, [pc, #600]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b04      	cmp	r3, #4
 8002866:	d00c      	beq.n	8002882 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002868:	4b93      	ldr	r3, [pc, #588]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d112      	bne.n	800289a <HAL_RCC_OscConfig+0x62>
 8002874:	4b90      	ldr	r3, [pc, #576]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800287c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002880:	d10b      	bne.n	800289a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002882:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d06c      	beq.n	8002968 <HAL_RCC_OscConfig+0x130>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d168      	bne.n	8002968 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e275      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x7a>
 80028a4:	4b84      	ldr	r3, [pc, #528]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a83      	ldr	r2, [pc, #524]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e02e      	b.n	8002910 <HAL_RCC_OscConfig+0xd8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x9c>
 80028ba:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7e      	ldr	r2, [pc, #504]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a7b      	ldr	r2, [pc, #492]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xd8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0xc0>
 80028de:	4b76      	ldr	r3, [pc, #472]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a75      	ldr	r2, [pc, #468]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b73      	ldr	r3, [pc, #460]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a72      	ldr	r2, [pc, #456]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xd8>
 80028f8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6e      	ldr	r2, [pc, #440]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800290e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fbf4 	bl	8001104 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe fbf0 	bl	8001104 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	@ 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e229      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b61      	ldr	r3, [pc, #388]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xe8>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fbe0 	bl	8001104 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe fbdc 	bl	8001104 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	@ 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e215      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	4b57      	ldr	r3, [pc, #348]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x110>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d069      	beq.n	8002a4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002976:	4b50      	ldr	r3, [pc, #320]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002982:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b08      	cmp	r3, #8
 800298c:	d11c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x190>
 800298e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d116      	bne.n	80029c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	4b47      	ldr	r3, [pc, #284]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_RCC_OscConfig+0x17a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e1e9      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	493d      	ldr	r1, [pc, #244]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	e040      	b.n	8002a4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d023      	beq.n	8002a18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d0:	4b39      	ldr	r3, [pc, #228]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a38      	ldr	r2, [pc, #224]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe fb92 	bl	8001104 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e4:	f7fe fb8e 	bl	8001104 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1c7      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b30      	ldr	r3, [pc, #192]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a02:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4929      	ldr	r1, [pc, #164]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
 8002a16:	e018      	b.n	8002a4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a18:	4b27      	ldr	r3, [pc, #156]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a26      	ldr	r2, [pc, #152]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fb6e 	bl	8001104 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fb6a 	bl	8001104 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e1a3      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d038      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d019      	beq.n	8002a92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5e:	4b16      	ldr	r3, [pc, #88]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a62:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fb4b 	bl	8001104 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a72:	f7fe fb47 	bl	8001104 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e180      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a84:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x23a>
 8002a90:	e01a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a96:	4a08      	ldr	r2, [pc, #32]	@ (8002ab8 <HAL_RCC_OscConfig+0x280>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fb31 	bl	8001104 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7fe fb2d 	bl	8001104 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d903      	bls.n	8002abc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e166      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
 8002ab8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abc:	4b92      	ldr	r3, [pc, #584]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80a4 	beq.w	8002c1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad6:	4b8c      	ldr	r3, [pc, #560]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10d      	bne.n	8002afe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	4b89      	ldr	r3, [pc, #548]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	4a88      	ldr	r2, [pc, #544]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aee:	4b86      	ldr	r3, [pc, #536]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afe:	4b83      	ldr	r3, [pc, #524]	@ (8002d0c <HAL_RCC_OscConfig+0x4d4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d118      	bne.n	8002b3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b0a:	4b80      	ldr	r3, [pc, #512]	@ (8002d0c <HAL_RCC_OscConfig+0x4d4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a7f      	ldr	r2, [pc, #508]	@ (8002d0c <HAL_RCC_OscConfig+0x4d4>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7fe faf5 	bl	8001104 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7fe faf1 	bl	8001104 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b64      	cmp	r3, #100	@ 0x64
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e12a      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b30:	4b76      	ldr	r3, [pc, #472]	@ (8002d0c <HAL_RCC_OscConfig+0x4d4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x31a>
 8002b44:	4b70      	ldr	r3, [pc, #448]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b48:	4a6f      	ldr	r2, [pc, #444]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b50:	e02d      	b.n	8002bae <HAL_RCC_OscConfig+0x376>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x33c>
 8002b5a:	4b6b      	ldr	r3, [pc, #428]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5e:	4a6a      	ldr	r2, [pc, #424]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b66:	4b68      	ldr	r3, [pc, #416]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	4a67      	ldr	r2, [pc, #412]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b72:	e01c      	b.n	8002bae <HAL_RCC_OscConfig+0x376>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	d10c      	bne.n	8002b96 <HAL_RCC_OscConfig+0x35e>
 8002b7c:	4b62      	ldr	r3, [pc, #392]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b80:	4a61      	ldr	r2, [pc, #388]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b82:	f043 0304 	orr.w	r3, r3, #4
 8002b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b88:	4b5f      	ldr	r3, [pc, #380]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8c:	4a5e      	ldr	r2, [pc, #376]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b94:	e00b      	b.n	8002bae <HAL_RCC_OscConfig+0x376>
 8002b96:	4b5c      	ldr	r3, [pc, #368]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba2:	4b59      	ldr	r3, [pc, #356]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba6:	4a58      	ldr	r2, [pc, #352]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002ba8:	f023 0304 	bic.w	r3, r3, #4
 8002bac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d015      	beq.n	8002be2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb6:	f7fe faa5 	bl	8001104 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe faa1 	bl	8001104 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e0d8      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ee      	beq.n	8002bbe <HAL_RCC_OscConfig+0x386>
 8002be0:	e014      	b.n	8002c0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be2:	f7fe fa8f 	bl	8001104 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7fe fa8b 	bl	8001104 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0c2      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c00:	4b41      	ldr	r3, [pc, #260]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1ee      	bne.n	8002bea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d105      	bne.n	8002c1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c12:	4b3d      	ldr	r3, [pc, #244]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a3c      	ldr	r2, [pc, #240]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002c18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80ae 	beq.w	8002d84 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c28:	4b37      	ldr	r3, [pc, #220]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d06d      	beq.n	8002d10 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d14b      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3c:	4b32      	ldr	r3, [pc, #200]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a31      	ldr	r2, [pc, #196]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002c42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fa5c 	bl	8001104 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fe fa58 	bl	8001104 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e091      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	4b29      	ldr	r3, [pc, #164]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	3b01      	subs	r3, #1
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c98:	071b      	lsls	r3, r3, #28
 8002c9a:	491b      	ldr	r1, [pc, #108]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b19      	ldr	r3, [pc, #100]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a18      	ldr	r2, [pc, #96]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe fa2a 	bl	8001104 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fe fa26 	bl	8001104 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e05f      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x47c>
 8002cd2:	e057      	b.n	8002d84 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002cda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fa10 	bl	8001104 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe fa0c 	bl	8001104 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e045      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfa:	4b03      	ldr	r3, [pc, #12]	@ (8002d08 <HAL_RCC_OscConfig+0x4d0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4b0>
 8002d06:	e03d      	b.n	8002d84 <HAL_RCC_OscConfig+0x54c>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d10:	4b1f      	ldr	r3, [pc, #124]	@ (8002d90 <HAL_RCC_OscConfig+0x558>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d030      	beq.n	8002d80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d129      	bne.n	8002d80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d122      	bne.n	8002d80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d119      	bne.n	8002d80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d10f      	bne.n	8002d80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800

08002d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0d0      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b6a      	ldr	r3, [pc, #424]	@ (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d910      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b67      	ldr	r3, [pc, #412]	@ (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 020f 	bic.w	r2, r3, #15
 8002dc2:	4965      	ldr	r1, [pc, #404]	@ (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b63      	ldr	r3, [pc, #396]	@ (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df4:	4b59      	ldr	r3, [pc, #356]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a58      	ldr	r2, [pc, #352]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002dfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e0c:	4b53      	ldr	r3, [pc, #332]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a52      	ldr	r2, [pc, #328]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b50      	ldr	r3, [pc, #320]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	494d      	ldr	r1, [pc, #308]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d040      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b47      	ldr	r3, [pc, #284]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d115      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b41      	ldr	r3, [pc, #260]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e073      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3d      	ldr	r3, [pc, #244]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b39      	ldr	r3, [pc, #228]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4936      	ldr	r1, [pc, #216]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fe f93c 	bl	8001104 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe f938 	bl	8001104 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e053      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b27      	ldr	r3, [pc, #156]	@ (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d210      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b24      	ldr	r3, [pc, #144]	@ (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 020f 	bic.w	r2, r3, #15
 8002ece:	4922      	ldr	r1, [pc, #136]	@ (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4916      	ldr	r1, [pc, #88]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f12:	4b12      	ldr	r3, [pc, #72]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f26:	f000 f821 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	@ (8002f60 <HAL_RCC_ClockConfig+0x1cc>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	@ (8002f64 <HAL_RCC_ClockConfig+0x1d0>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <HAL_RCC_ClockConfig+0x1d4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe f898 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023c00 	.word	0x40023c00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08004a1c 	.word	0x08004a1c
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f70:	b094      	sub	sp, #80	@ 0x50
 8002f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f78:	2300      	movs	r3, #0
 8002f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f84:	4b79      	ldr	r3, [pc, #484]	@ (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d00d      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x40>
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	f200 80e1 	bhi.w	8003158 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f9e:	e0db      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b73      	ldr	r3, [pc, #460]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fa4:	e0db      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa6:	4b73      	ldr	r3, [pc, #460]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002faa:	e0d8      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fac:	4b6f      	ldr	r3, [pc, #444]	@ (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	2200      	movs	r2, #0
 8002fca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fde:	4622      	mov	r2, r4
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	f04f 0000 	mov.w	r0, #0
 8002fe6:	f04f 0100 	mov.w	r1, #0
 8002fea:	0159      	lsls	r1, r3, #5
 8002fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff0:	0150      	lsls	r0, r2, #5
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	1a51      	subs	r1, r2, r1
 8002ffa:	6139      	str	r1, [r7, #16]
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003010:	4659      	mov	r1, fp
 8003012:	018b      	lsls	r3, r1, #6
 8003014:	4651      	mov	r1, sl
 8003016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800301a:	4651      	mov	r1, sl
 800301c:	018a      	lsls	r2, r1, #6
 800301e:	4651      	mov	r1, sl
 8003020:	ebb2 0801 	subs.w	r8, r2, r1
 8003024:	4659      	mov	r1, fp
 8003026:	eb63 0901 	sbc.w	r9, r3, r1
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800303a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800303e:	4690      	mov	r8, r2
 8003040:	4699      	mov	r9, r3
 8003042:	4623      	mov	r3, r4
 8003044:	eb18 0303 	adds.w	r3, r8, r3
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	462b      	mov	r3, r5
 800304c:	eb49 0303 	adc.w	r3, r9, r3
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800305e:	4629      	mov	r1, r5
 8003060:	024b      	lsls	r3, r1, #9
 8003062:	4621      	mov	r1, r4
 8003064:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003068:	4621      	mov	r1, r4
 800306a:	024a      	lsls	r2, r1, #9
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003072:	2200      	movs	r2, #0
 8003074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003076:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003078:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800307c:	f7fd f8dc 	bl	8000238 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4613      	mov	r3, r2
 8003086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003088:	e058      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b38      	ldr	r3, [pc, #224]	@ (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	2200      	movs	r2, #0
 8003092:	4618      	mov	r0, r3
 8003094:	4611      	mov	r1, r2
 8003096:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	2300      	movs	r3, #0
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030a4:	4642      	mov	r2, r8
 80030a6:	464b      	mov	r3, r9
 80030a8:	f04f 0000 	mov.w	r0, #0
 80030ac:	f04f 0100 	mov.w	r1, #0
 80030b0:	0159      	lsls	r1, r3, #5
 80030b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b6:	0150      	lsls	r0, r2, #5
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4641      	mov	r1, r8
 80030be:	ebb2 0a01 	subs.w	sl, r2, r1
 80030c2:	4649      	mov	r1, r9
 80030c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030dc:	ebb2 040a 	subs.w	r4, r2, sl
 80030e0:	eb63 050b 	sbc.w	r5, r3, fp
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	00eb      	lsls	r3, r5, #3
 80030ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f2:	00e2      	lsls	r2, r4, #3
 80030f4:	4614      	mov	r4, r2
 80030f6:	461d      	mov	r5, r3
 80030f8:	4643      	mov	r3, r8
 80030fa:	18e3      	adds	r3, r4, r3
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	464b      	mov	r3, r9
 8003100:	eb45 0303 	adc.w	r3, r5, r3
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003112:	4629      	mov	r1, r5
 8003114:	028b      	lsls	r3, r1, #10
 8003116:	4621      	mov	r1, r4
 8003118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800311c:	4621      	mov	r1, r4
 800311e:	028a      	lsls	r2, r1, #10
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003126:	2200      	movs	r2, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	61fa      	str	r2, [r7, #28]
 800312c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003130:	f7fd f882 	bl	8000238 <__aeabi_uldivmod>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4613      	mov	r3, r2
 800313a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	3301      	adds	r3, #1
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800314c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800314e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003156:	e002      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x204>)
 800315a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800315c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800315e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003160:	4618      	mov	r0, r3
 8003162:	3750      	adds	r7, #80	@ 0x50
 8003164:	46bd      	mov	sp, r7
 8003166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800
 8003170:	00f42400 	.word	0x00f42400
 8003174:	007a1200 	.word	0x007a1200

08003178 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b03      	ldr	r3, [pc, #12]	@ (800318c <HAL_RCC_GetHCLKFreq+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000000 	.word	0x20000000

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003194:	f7ff fff0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0a9b      	lsrs	r3, r3, #10
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4903      	ldr	r1, [pc, #12]	@ (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08004a2c 	.word	0x08004a2c

080031b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031bc:	f7ff ffdc 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0b5b      	lsrs	r3, r3, #13
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	@ (80031dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	08004a2c 	.word	0x08004a2c

080031e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d012      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003208:	4b69      	ldr	r3, [pc, #420]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a68      	ldr	r2, [pc, #416]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003212:	6093      	str	r3, [r2, #8]
 8003214:	4b66      	ldr	r3, [pc, #408]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800321c:	4964      	ldr	r1, [pc, #400]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800322a:	2301      	movs	r3, #1
 800322c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d017      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800323a:	4b5d      	ldr	r3, [pc, #372]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003240:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003248:	4959      	ldr	r1, [pc, #356]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003254:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003258:	d101      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800325a:	2301      	movs	r3, #1
 800325c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d017      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003276:	4b4e      	ldr	r3, [pc, #312]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800327c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	494a      	ldr	r1, [pc, #296]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003294:	d101      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003296:	2301      	movs	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032a2:	2301      	movs	r3, #1
 80032a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032b2:	2301      	movs	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 808b 	beq.w	80033da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032c4:	4b3a      	ldr	r3, [pc, #232]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	4a39      	ldr	r2, [pc, #228]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d0:	4b37      	ldr	r3, [pc, #220]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032dc:	4b35      	ldr	r3, [pc, #212]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a34      	ldr	r2, [pc, #208]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e8:	f7fd ff0c 	bl	8001104 <HAL_GetTick>
 80032ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f0:	f7fd ff08 	bl	8001104 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	@ 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e38f      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003302:	4b2c      	ldr	r3, [pc, #176]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800330e:	4b28      	ldr	r3, [pc, #160]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003316:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d035      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	429a      	cmp	r2, r3
 800332a:	d02e      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800332c:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003334:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003336:	4b1e      	ldr	r3, [pc, #120]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	4a1d      	ldr	r2, [pc, #116]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003340:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003342:	4b1b      	ldr	r3, [pc, #108]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	4a1a      	ldr	r2, [pc, #104]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800334c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800334e:	4a18      	ldr	r2, [pc, #96]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003354:	4b16      	ldr	r3, [pc, #88]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d114      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd fed0 	bl	8001104 <HAL_GetTick>
 8003364:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fd fecc 	bl	8001104 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e351      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337e:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0ee      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003396:	d111      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003398:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033a4:	4b04      	ldr	r3, [pc, #16]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033a6:	400b      	ands	r3, r1
 80033a8:	4901      	ldr	r1, [pc, #4]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40007000 	.word	0x40007000
 80033b8:	0ffffcff 	.word	0x0ffffcff
 80033bc:	4bac      	ldr	r3, [pc, #688]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4aab      	ldr	r2, [pc, #684]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80033c6:	6093      	str	r3, [r2, #8]
 80033c8:	4ba9      	ldr	r3, [pc, #676]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d4:	49a6      	ldr	r1, [pc, #664]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d010      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033e6:	4ba2      	ldr	r3, [pc, #648]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033ec:	4aa0      	ldr	r2, [pc, #640]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033f6:	4b9e      	ldr	r3, [pc, #632]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	499b      	ldr	r1, [pc, #620]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003414:	4b96      	ldr	r3, [pc, #600]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003422:	4993      	ldr	r1, [pc, #588]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003436:	4b8e      	ldr	r3, [pc, #568]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003444:	498a      	ldr	r1, [pc, #552]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003458:	4b85      	ldr	r3, [pc, #532]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003466:	4982      	ldr	r1, [pc, #520]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800347a:	4b7d      	ldr	r3, [pc, #500]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003480:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	4979      	ldr	r1, [pc, #484]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800349c:	4b74      	ldr	r3, [pc, #464]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a2:	f023 0203 	bic.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034aa:	4971      	ldr	r1, [pc, #452]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034be:	4b6c      	ldr	r3, [pc, #432]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c4:	f023 020c 	bic.w	r2, r3, #12
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034cc:	4968      	ldr	r1, [pc, #416]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034e0:	4b63      	ldr	r3, [pc, #396]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ee:	4960      	ldr	r1, [pc, #384]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003502:	4b5b      	ldr	r3, [pc, #364]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003508:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003510:	4957      	ldr	r1, [pc, #348]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003524:	4b52      	ldr	r3, [pc, #328]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	494f      	ldr	r1, [pc, #316]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003546:	4b4a      	ldr	r3, [pc, #296]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003554:	4946      	ldr	r1, [pc, #280]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003568:	4b41      	ldr	r3, [pc, #260]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003576:	493e      	ldr	r1, [pc, #248]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800358a:	4b39      	ldr	r3, [pc, #228]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003590:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003598:	4935      	ldr	r1, [pc, #212]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035ac:	4b30      	ldr	r3, [pc, #192]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035ba:	492d      	ldr	r1, [pc, #180]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d011      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035ce:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035dc:	4924      	ldr	r1, [pc, #144]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ec:	d101      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035fe:	2301      	movs	r3, #1
 8003600:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800360e:	4b18      	ldr	r3, [pc, #96]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003614:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361c:	4914      	ldr	r1, [pc, #80]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003636:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003640:	490b      	ldr	r1, [pc, #44]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00f      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003654:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003664:	4902      	ldr	r1, [pc, #8]	@ (8003670 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800366c:	e002      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00b      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003680:	4b8a      	ldr	r3, [pc, #552]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003686:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003690:	4986      	ldr	r1, [pc, #536]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036a4:	4b81      	ldr	r3, [pc, #516]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036aa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036b4:	497d      	ldr	r1, [pc, #500]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d006      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80d6 	beq.w	800387c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036d0:	4b76      	ldr	r3, [pc, #472]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a75      	ldr	r2, [pc, #468]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036dc:	f7fd fd12 	bl	8001104 <HAL_GetTick>
 80036e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036e4:	f7fd fd0e 	bl	8001104 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	@ 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e195      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036f6:	4b6d      	ldr	r3, [pc, #436]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d021      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11d      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003716:	4b65      	ldr	r3, [pc, #404]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003724:	4b61      	ldr	r3, [pc, #388]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800372a:	0e1b      	lsrs	r3, r3, #24
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	019a      	lsls	r2, r3, #6
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	431a      	orrs	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	061b      	lsls	r3, r3, #24
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	071b      	lsls	r3, r3, #28
 800374a:	4958      	ldr	r1, [pc, #352]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003770:	2b00      	cmp	r3, #0
 8003772:	d02e      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800377c:	d129      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800377e:	4b4b      	ldr	r3, [pc, #300]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800378c:	4b47      	ldr	r3, [pc, #284]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003792:	0f1b      	lsrs	r3, r3, #28
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	019a      	lsls	r2, r3, #6
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	061b      	lsls	r3, r3, #24
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	071b      	lsls	r3, r3, #28
 80037b2:	493e      	ldr	r1, [pc, #248]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037ba:	4b3c      	ldr	r3, [pc, #240]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037c0:	f023 021f 	bic.w	r2, r3, #31
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	3b01      	subs	r3, #1
 80037ca:	4938      	ldr	r1, [pc, #224]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01d      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037de:	4b33      	ldr	r3, [pc, #204]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037e4:	0e1b      	lsrs	r3, r3, #24
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037ec:	4b2f      	ldr	r3, [pc, #188]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f2:	0f1b      	lsrs	r3, r3, #28
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	019a      	lsls	r2, r3, #6
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	431a      	orrs	r2, r3
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	061b      	lsls	r3, r3, #24
 800380c:	431a      	orrs	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	071b      	lsls	r3, r3, #28
 8003812:	4926      	ldr	r1, [pc, #152]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d011      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	019a      	lsls	r2, r3, #6
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	041b      	lsls	r3, r3, #16
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	061b      	lsls	r3, r3, #24
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	071b      	lsls	r3, r3, #28
 8003842:	491a      	ldr	r1, [pc, #104]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800384a:	4b18      	ldr	r3, [pc, #96]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a17      	ldr	r2, [pc, #92]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003850:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003856:	f7fd fc55 	bl	8001104 <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800385e:	f7fd fc51 	bl	8001104 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b64      	cmp	r3, #100	@ 0x64
 800386a:	d901      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e0d8      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003870:	4b0e      	ldr	r3, [pc, #56]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b01      	cmp	r3, #1
 8003880:	f040 80ce 	bne.w	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003884:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a08      	ldr	r2, [pc, #32]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800388e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003890:	f7fd fc38 	bl	8001104 <HAL_GetTick>
 8003894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003896:	e00b      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003898:	f7fd fc34 	bl	8001104 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d904      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0bb      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80038aa:	bf00      	nop
 80038ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038b0:	4b5e      	ldr	r3, [pc, #376]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038bc:	d0ec      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d02e      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d12a      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038e6:	4b51      	ldr	r3, [pc, #324]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038f4:	4b4d      	ldr	r3, [pc, #308]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	0f1b      	lsrs	r3, r3, #28
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	019a      	lsls	r2, r3, #6
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	061b      	lsls	r3, r3, #24
 8003914:	431a      	orrs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	071b      	lsls	r3, r3, #28
 800391a:	4944      	ldr	r1, [pc, #272]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003922:	4b42      	ldr	r3, [pc, #264]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003928:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	3b01      	subs	r3, #1
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	493d      	ldr	r1, [pc, #244]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d022      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800394c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003950:	d11d      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003952:	4b36      	ldr	r3, [pc, #216]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003958:	0e1b      	lsrs	r3, r3, #24
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003960:	4b32      	ldr	r3, [pc, #200]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	0f1b      	lsrs	r3, r3, #28
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	019a      	lsls	r2, r3, #6
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	061b      	lsls	r3, r3, #24
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	071b      	lsls	r3, r3, #28
 8003986:	4929      	ldr	r1, [pc, #164]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d028      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800399a:	4b24      	ldr	r3, [pc, #144]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a0:	0e1b      	lsrs	r3, r3, #24
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039a8:	4b20      	ldr	r3, [pc, #128]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ae:	0c1b      	lsrs	r3, r3, #16
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	019a      	lsls	r2, r3, #6
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	041b      	lsls	r3, r3, #16
 80039c0:	431a      	orrs	r2, r3
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	071b      	lsls	r3, r3, #28
 80039ce:	4917      	ldr	r1, [pc, #92]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039d6:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	4911      	ldr	r1, [pc, #68]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039ec:	4b0f      	ldr	r3, [pc, #60]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0e      	ldr	r2, [pc, #56]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f8:	f7fd fb84 	bl	8001104 <HAL_GetTick>
 80039fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a00:	f7fd fb80 	bl	8001104 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	@ 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e007      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a1e:	d1ef      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800

08003a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e040      	b.n	8003ac4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd f9c0 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	@ 0x24
 8003a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa8c 	bl	8003f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f825 	bl	8003acc <UART_SetConfig>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e01b      	b.n	8003ac4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fb0b 	bl	80040d8 <UART_CheckIdleState>
 8003ac2:	4603      	mov	r3, r0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4ba6      	ldr	r3, [pc, #664]	@ (8003d90 <UART_SetConfig+0x2c4>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	6979      	ldr	r1, [r7, #20]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a94      	ldr	r2, [pc, #592]	@ (8003d94 <UART_SetConfig+0x2c8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d120      	bne.n	8003b8a <UART_SetConfig+0xbe>
 8003b48:	4b93      	ldr	r3, [pc, #588]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d816      	bhi.n	8003b84 <UART_SetConfig+0xb8>
 8003b56:	a201      	add	r2, pc, #4	@ (adr r2, 8003b5c <UART_SetConfig+0x90>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b79 	.word	0x08003b79
 8003b64:	08003b73 	.word	0x08003b73
 8003b68:	08003b7f 	.word	0x08003b7f
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e150      	b.n	8003e14 <UART_SetConfig+0x348>
 8003b72:	2302      	movs	r3, #2
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e14d      	b.n	8003e14 <UART_SetConfig+0x348>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e14a      	b.n	8003e14 <UART_SetConfig+0x348>
 8003b7e:	2308      	movs	r3, #8
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e147      	b.n	8003e14 <UART_SetConfig+0x348>
 8003b84:	2310      	movs	r3, #16
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e144      	b.n	8003e14 <UART_SetConfig+0x348>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a83      	ldr	r2, [pc, #524]	@ (8003d9c <UART_SetConfig+0x2d0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d132      	bne.n	8003bfa <UART_SetConfig+0x12e>
 8003b94:	4b80      	ldr	r3, [pc, #512]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	d828      	bhi.n	8003bf4 <UART_SetConfig+0x128>
 8003ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <UART_SetConfig+0xdc>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bdd 	.word	0x08003bdd
 8003bac:	08003bf5 	.word	0x08003bf5
 8003bb0:	08003bf5 	.word	0x08003bf5
 8003bb4:	08003bf5 	.word	0x08003bf5
 8003bb8:	08003be9 	.word	0x08003be9
 8003bbc:	08003bf5 	.word	0x08003bf5
 8003bc0:	08003bf5 	.word	0x08003bf5
 8003bc4:	08003bf5 	.word	0x08003bf5
 8003bc8:	08003be3 	.word	0x08003be3
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003bf5 	.word	0x08003bf5
 8003bd8:	08003bef 	.word	0x08003bef
 8003bdc:	2300      	movs	r3, #0
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e118      	b.n	8003e14 <UART_SetConfig+0x348>
 8003be2:	2302      	movs	r3, #2
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e115      	b.n	8003e14 <UART_SetConfig+0x348>
 8003be8:	2304      	movs	r3, #4
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e112      	b.n	8003e14 <UART_SetConfig+0x348>
 8003bee:	2308      	movs	r3, #8
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e10f      	b.n	8003e14 <UART_SetConfig+0x348>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e10c      	b.n	8003e14 <UART_SetConfig+0x348>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a68      	ldr	r2, [pc, #416]	@ (8003da0 <UART_SetConfig+0x2d4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d120      	bne.n	8003c46 <UART_SetConfig+0x17a>
 8003c04:	4b64      	ldr	r3, [pc, #400]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c0e:	2b30      	cmp	r3, #48	@ 0x30
 8003c10:	d013      	beq.n	8003c3a <UART_SetConfig+0x16e>
 8003c12:	2b30      	cmp	r3, #48	@ 0x30
 8003c14:	d814      	bhi.n	8003c40 <UART_SetConfig+0x174>
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d009      	beq.n	8003c2e <UART_SetConfig+0x162>
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d810      	bhi.n	8003c40 <UART_SetConfig+0x174>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <UART_SetConfig+0x15c>
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d006      	beq.n	8003c34 <UART_SetConfig+0x168>
 8003c26:	e00b      	b.n	8003c40 <UART_SetConfig+0x174>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e0f2      	b.n	8003e14 <UART_SetConfig+0x348>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e0ef      	b.n	8003e14 <UART_SetConfig+0x348>
 8003c34:	2304      	movs	r3, #4
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e0ec      	b.n	8003e14 <UART_SetConfig+0x348>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e0e9      	b.n	8003e14 <UART_SetConfig+0x348>
 8003c40:	2310      	movs	r3, #16
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e0e6      	b.n	8003e14 <UART_SetConfig+0x348>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a56      	ldr	r2, [pc, #344]	@ (8003da4 <UART_SetConfig+0x2d8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d120      	bne.n	8003c92 <UART_SetConfig+0x1c6>
 8003c50:	4b51      	ldr	r3, [pc, #324]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c5c:	d013      	beq.n	8003c86 <UART_SetConfig+0x1ba>
 8003c5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c60:	d814      	bhi.n	8003c8c <UART_SetConfig+0x1c0>
 8003c62:	2b80      	cmp	r3, #128	@ 0x80
 8003c64:	d009      	beq.n	8003c7a <UART_SetConfig+0x1ae>
 8003c66:	2b80      	cmp	r3, #128	@ 0x80
 8003c68:	d810      	bhi.n	8003c8c <UART_SetConfig+0x1c0>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <UART_SetConfig+0x1a8>
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	d006      	beq.n	8003c80 <UART_SetConfig+0x1b4>
 8003c72:	e00b      	b.n	8003c8c <UART_SetConfig+0x1c0>
 8003c74:	2300      	movs	r3, #0
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e0cc      	b.n	8003e14 <UART_SetConfig+0x348>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e0c9      	b.n	8003e14 <UART_SetConfig+0x348>
 8003c80:	2304      	movs	r3, #4
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e0c6      	b.n	8003e14 <UART_SetConfig+0x348>
 8003c86:	2308      	movs	r3, #8
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e0c3      	b.n	8003e14 <UART_SetConfig+0x348>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e0c0      	b.n	8003e14 <UART_SetConfig+0x348>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a44      	ldr	r2, [pc, #272]	@ (8003da8 <UART_SetConfig+0x2dc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d125      	bne.n	8003ce8 <UART_SetConfig+0x21c>
 8003c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003caa:	d017      	beq.n	8003cdc <UART_SetConfig+0x210>
 8003cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb0:	d817      	bhi.n	8003ce2 <UART_SetConfig+0x216>
 8003cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb6:	d00b      	beq.n	8003cd0 <UART_SetConfig+0x204>
 8003cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cbc:	d811      	bhi.n	8003ce2 <UART_SetConfig+0x216>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <UART_SetConfig+0x1fe>
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc6:	d006      	beq.n	8003cd6 <UART_SetConfig+0x20a>
 8003cc8:	e00b      	b.n	8003ce2 <UART_SetConfig+0x216>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e0a1      	b.n	8003e14 <UART_SetConfig+0x348>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e09e      	b.n	8003e14 <UART_SetConfig+0x348>
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e09b      	b.n	8003e14 <UART_SetConfig+0x348>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e098      	b.n	8003e14 <UART_SetConfig+0x348>
 8003ce2:	2310      	movs	r3, #16
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e095      	b.n	8003e14 <UART_SetConfig+0x348>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2f      	ldr	r2, [pc, #188]	@ (8003dac <UART_SetConfig+0x2e0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d125      	bne.n	8003d3e <UART_SetConfig+0x272>
 8003cf2:	4b29      	ldr	r3, [pc, #164]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003cfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d00:	d017      	beq.n	8003d32 <UART_SetConfig+0x266>
 8003d02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d06:	d817      	bhi.n	8003d38 <UART_SetConfig+0x26c>
 8003d08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d0c:	d00b      	beq.n	8003d26 <UART_SetConfig+0x25a>
 8003d0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d12:	d811      	bhi.n	8003d38 <UART_SetConfig+0x26c>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <UART_SetConfig+0x254>
 8003d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d1c:	d006      	beq.n	8003d2c <UART_SetConfig+0x260>
 8003d1e:	e00b      	b.n	8003d38 <UART_SetConfig+0x26c>
 8003d20:	2301      	movs	r3, #1
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e076      	b.n	8003e14 <UART_SetConfig+0x348>
 8003d26:	2302      	movs	r3, #2
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e073      	b.n	8003e14 <UART_SetConfig+0x348>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e070      	b.n	8003e14 <UART_SetConfig+0x348>
 8003d32:	2308      	movs	r3, #8
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e06d      	b.n	8003e14 <UART_SetConfig+0x348>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e06a      	b.n	8003e14 <UART_SetConfig+0x348>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1b      	ldr	r2, [pc, #108]	@ (8003db0 <UART_SetConfig+0x2e4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d138      	bne.n	8003dba <UART_SetConfig+0x2ee>
 8003d48:	4b13      	ldr	r3, [pc, #76]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d56:	d017      	beq.n	8003d88 <UART_SetConfig+0x2bc>
 8003d58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d5c:	d82a      	bhi.n	8003db4 <UART_SetConfig+0x2e8>
 8003d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d62:	d00b      	beq.n	8003d7c <UART_SetConfig+0x2b0>
 8003d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d68:	d824      	bhi.n	8003db4 <UART_SetConfig+0x2e8>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <UART_SetConfig+0x2aa>
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d72:	d006      	beq.n	8003d82 <UART_SetConfig+0x2b6>
 8003d74:	e01e      	b.n	8003db4 <UART_SetConfig+0x2e8>
 8003d76:	2300      	movs	r3, #0
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e04b      	b.n	8003e14 <UART_SetConfig+0x348>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e048      	b.n	8003e14 <UART_SetConfig+0x348>
 8003d82:	2304      	movs	r3, #4
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e045      	b.n	8003e14 <UART_SetConfig+0x348>
 8003d88:	2308      	movs	r3, #8
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e042      	b.n	8003e14 <UART_SetConfig+0x348>
 8003d8e:	bf00      	nop
 8003d90:	efff69f3 	.word	0xefff69f3
 8003d94:	40011000 	.word	0x40011000
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40004400 	.word	0x40004400
 8003da0:	40004800 	.word	0x40004800
 8003da4:	40004c00 	.word	0x40004c00
 8003da8:	40005000 	.word	0x40005000
 8003dac:	40011400 	.word	0x40011400
 8003db0:	40007800 	.word	0x40007800
 8003db4:	2310      	movs	r3, #16
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	e02c      	b.n	8003e14 <UART_SetConfig+0x348>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a72      	ldr	r2, [pc, #456]	@ (8003f88 <UART_SetConfig+0x4bc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d125      	bne.n	8003e10 <UART_SetConfig+0x344>
 8003dc4:	4b71      	ldr	r3, [pc, #452]	@ (8003f8c <UART_SetConfig+0x4c0>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003dce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003dd2:	d017      	beq.n	8003e04 <UART_SetConfig+0x338>
 8003dd4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003dd8:	d817      	bhi.n	8003e0a <UART_SetConfig+0x33e>
 8003dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dde:	d00b      	beq.n	8003df8 <UART_SetConfig+0x32c>
 8003de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de4:	d811      	bhi.n	8003e0a <UART_SetConfig+0x33e>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <UART_SetConfig+0x326>
 8003dea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dee:	d006      	beq.n	8003dfe <UART_SetConfig+0x332>
 8003df0:	e00b      	b.n	8003e0a <UART_SetConfig+0x33e>
 8003df2:	2300      	movs	r3, #0
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e00d      	b.n	8003e14 <UART_SetConfig+0x348>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e00a      	b.n	8003e14 <UART_SetConfig+0x348>
 8003dfe:	2304      	movs	r3, #4
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e007      	b.n	8003e14 <UART_SetConfig+0x348>
 8003e04:	2308      	movs	r3, #8
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e004      	b.n	8003e14 <UART_SetConfig+0x348>
 8003e0a:	2310      	movs	r3, #16
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e001      	b.n	8003e14 <UART_SetConfig+0x348>
 8003e10:	2310      	movs	r3, #16
 8003e12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e1c:	d15b      	bne.n	8003ed6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e1e:	7ffb      	ldrb	r3, [r7, #31]
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d828      	bhi.n	8003e76 <UART_SetConfig+0x3aa>
 8003e24:	a201      	add	r2, pc, #4	@ (adr r2, 8003e2c <UART_SetConfig+0x360>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e77 	.word	0x08003e77
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e77 	.word	0x08003e77
 8003e44:	08003e77 	.word	0x08003e77
 8003e48:	08003e77 	.word	0x08003e77
 8003e4c:	08003e6f 	.word	0x08003e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e50:	f7ff f99e 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8003e54:	61b8      	str	r0, [r7, #24]
        break;
 8003e56:	e013      	b.n	8003e80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7ff f9ae 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 8003e5c:	61b8      	str	r0, [r7, #24]
        break;
 8003e5e:	e00f      	b.n	8003e80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e60:	4b4b      	ldr	r3, [pc, #300]	@ (8003f90 <UART_SetConfig+0x4c4>)
 8003e62:	61bb      	str	r3, [r7, #24]
        break;
 8003e64:	e00c      	b.n	8003e80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e66:	f7ff f881 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8003e6a:	61b8      	str	r0, [r7, #24]
        break;
 8003e6c:	e008      	b.n	8003e80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e72:	61bb      	str	r3, [r7, #24]
        break;
 8003e74:	e004      	b.n	8003e80 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d074      	beq.n	8003f70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	005a      	lsls	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	d916      	bls.n	8003ed0 <UART_SetConfig+0x404>
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea8:	d212      	bcs.n	8003ed0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f023 030f 	bic.w	r3, r3, #15
 8003eb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	89fb      	ldrh	r3, [r7, #14]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	89fa      	ldrh	r2, [r7, #14]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	e04f      	b.n	8003f70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	77bb      	strb	r3, [r7, #30]
 8003ed4:	e04c      	b.n	8003f70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ed6:	7ffb      	ldrb	r3, [r7, #31]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d828      	bhi.n	8003f2e <UART_SetConfig+0x462>
 8003edc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee4 <UART_SetConfig+0x418>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f09 	.word	0x08003f09
 8003ee8:	08003f11 	.word	0x08003f11
 8003eec:	08003f19 	.word	0x08003f19
 8003ef0:	08003f2f 	.word	0x08003f2f
 8003ef4:	08003f1f 	.word	0x08003f1f
 8003ef8:	08003f2f 	.word	0x08003f2f
 8003efc:	08003f2f 	.word	0x08003f2f
 8003f00:	08003f2f 	.word	0x08003f2f
 8003f04:	08003f27 	.word	0x08003f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f08:	f7ff f942 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8003f0c:	61b8      	str	r0, [r7, #24]
        break;
 8003f0e:	e013      	b.n	8003f38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f10:	f7ff f952 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 8003f14:	61b8      	str	r0, [r7, #24]
        break;
 8003f16:	e00f      	b.n	8003f38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f18:	4b1d      	ldr	r3, [pc, #116]	@ (8003f90 <UART_SetConfig+0x4c4>)
 8003f1a:	61bb      	str	r3, [r7, #24]
        break;
 8003f1c:	e00c      	b.n	8003f38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1e:	f7ff f825 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8003f22:	61b8      	str	r0, [r7, #24]
        break;
 8003f24:	e008      	b.n	8003f38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2a:	61bb      	str	r3, [r7, #24]
        break;
 8003f2c:	e004      	b.n	8003f38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	77bb      	strb	r3, [r7, #30]
        break;
 8003f36:	bf00      	nop
    }

    if (pclk != 0U)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d018      	beq.n	8003f70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	085a      	lsrs	r2, r3, #1
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	441a      	add	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b0f      	cmp	r3, #15
 8003f56:	d909      	bls.n	8003f6c <UART_SetConfig+0x4a0>
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f5e:	d205      	bcs.n	8003f6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	e001      	b.n	8003f70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40007c00 	.word	0x40007c00
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	00f42400 	.word	0x00f42400

08003f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01a      	beq.n	80040aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004092:	d10a      	bne.n	80040aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b098      	sub	sp, #96	@ 0x60
 80040dc:	af02      	add	r7, sp, #8
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040e8:	f7fd f80c 	bl	8001104 <HAL_GetTick>
 80040ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d12e      	bne.n	800415a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004104:	2200      	movs	r2, #0
 8004106:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f88c 	bl	8004228 <UART_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d021      	beq.n	800415a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800412a:	653b      	str	r3, [r7, #80]	@ 0x50
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004134:	647b      	str	r3, [r7, #68]	@ 0x44
 8004136:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800413a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e6      	bne.n	8004116 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e062      	b.n	8004220 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d149      	bne.n	80041fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004170:	2200      	movs	r2, #0
 8004172:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f856 	bl	8004228 <UART_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d03c      	beq.n	80041fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	623b      	str	r3, [r7, #32]
   return(result);
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e6      	bne.n	8004182 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041d4:	61fa      	str	r2, [r7, #28]
 80041d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	69b9      	ldr	r1, [r7, #24]
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	617b      	str	r3, [r7, #20]
   return(result);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e5      	bne.n	80041b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e011      	b.n	8004220 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3758      	adds	r7, #88	@ 0x58
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004238:	e04f      	b.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d04b      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fc ff5f 	bl	8001104 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <UART_WaitOnFlagUntilTimeout+0x30>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e04e      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d037      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b80      	cmp	r3, #128	@ 0x80
 800426e:	d034      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b40      	cmp	r3, #64	@ 0x40
 8004274:	d031      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d110      	bne.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2208      	movs	r2, #8
 800428a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f838 	bl	8004302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2208      	movs	r2, #8
 8004296:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e029      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b4:	d111      	bne.n	80042da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f81e 	bl	8004302 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e00f      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d0a0      	beq.n	800423a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004302:	b480      	push	{r7}
 8004304:	b095      	sub	sp, #84	@ 0x54
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800431e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004328:	643b      	str	r3, [r7, #64]	@ 0x40
 800432a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800432e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3308      	adds	r3, #8
 8004342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	61fb      	str	r3, [r7, #28]
   return(result);
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800435c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800435e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004374:	2b01      	cmp	r3, #1
 8004376:	d118      	bne.n	80043aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	60bb      	str	r3, [r7, #8]
   return(result);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f023 0310 	bic.w	r3, r3, #16
 800438c:	647b      	str	r3, [r7, #68]	@ 0x44
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6979      	ldr	r1, [r7, #20]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	613b      	str	r3, [r7, #16]
   return(result);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e6      	bne.n	8004378 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043be:	bf00      	nop
 80043c0:	3754      	adds	r7, #84	@ 0x54
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043cc:	b084      	sub	sp, #16
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	f107 001c 	add.w	r0, r7, #28
 80043da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d121      	bne.n	800442a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	4b21      	ldr	r3, [pc, #132]	@ (800447c <USB_CoreInit+0xb0>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800440a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800440e:	2b01      	cmp	r3, #1
 8004410:	d105      	bne.n	800441e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa92 	bl	8004948 <USB_CoreReset>
 8004424:	4603      	mov	r3, r0
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	e010      	b.n	800444c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fa86 	bl	8004948 <USB_CoreReset>
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800444c:	7fbb      	ldrb	r3, [r7, #30]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10b      	bne.n	800446a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f043 0206 	orr.w	r2, r3, #6
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f043 0220 	orr.w	r2, r3, #32
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004476:	b004      	add	sp, #16
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	ffbdffbf 	.word	0xffbdffbf

08004480 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f023 0201 	bic.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	460b      	mov	r3, r1
 80044ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d115      	bne.n	80044f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80044d0:	200a      	movs	r0, #10
 80044d2:	f7fc fe23 	bl	800111c <HAL_Delay>
      ms += 10U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	330a      	adds	r3, #10
 80044da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fa25 	bl	800492c <USB_GetMode>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d01e      	beq.n	8004526 <USB_SetCurrentMode+0x84>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80044ec:	d9f0      	bls.n	80044d0 <USB_SetCurrentMode+0x2e>
 80044ee:	e01a      	b.n	8004526 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d115      	bne.n	8004522 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004502:	200a      	movs	r0, #10
 8004504:	f7fc fe0a 	bl	800111c <HAL_Delay>
      ms += 10U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	330a      	adds	r3, #10
 800450c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa0c 	bl	800492c <USB_GetMode>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <USB_SetCurrentMode+0x84>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2bc7      	cmp	r3, #199	@ 0xc7
 800451e:	d9f0      	bls.n	8004502 <USB_SetCurrentMode+0x60>
 8004520:	e001      	b.n	8004526 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e005      	b.n	8004532 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2bc8      	cmp	r3, #200	@ 0xc8
 800452a:	d101      	bne.n	8004530 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800453c:	b084      	sub	sp, #16
 800453e:	b580      	push	{r7, lr}
 8004540:	b086      	sub	sp, #24
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800454a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	e009      	b.n	8004570 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	3340      	adds	r3, #64	@ 0x40
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	2200      	movs	r2, #0
 8004568:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	3301      	adds	r3, #1
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b0e      	cmp	r3, #14
 8004574:	d9f2      	bls.n	800455c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004576:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11c      	bne.n	80045b8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800458c:	f043 0302 	orr.w	r3, r3, #2
 8004590:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004596:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e005      	b.n	80045c4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80045ca:	461a      	mov	r2, r3
 80045cc:	2300      	movs	r3, #0
 80045ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10d      	bne.n	80045f4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045e0:	2100      	movs	r1, #0
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f968 	bl	80048b8 <USB_SetDevSpeed>
 80045e8:	e008      	b.n	80045fc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045ea:	2101      	movs	r1, #1
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f963 	bl	80048b8 <USB_SetDevSpeed>
 80045f2:	e003      	b.n	80045fc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045f4:	2103      	movs	r1, #3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f95e 	bl	80048b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045fc:	2110      	movs	r1, #16
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8fa 	bl	80047f8 <USB_FlushTxFifo>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f924 	bl	800485c <USB_FlushRxFifo>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004624:	461a      	mov	r2, r3
 8004626:	2300      	movs	r3, #0
 8004628:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004630:	461a      	mov	r2, r3
 8004632:	2300      	movs	r3, #0
 8004634:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800463c:	461a      	mov	r2, r3
 800463e:	2300      	movs	r3, #0
 8004640:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	e043      	b.n	80046d0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800465a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800465e:	d118      	bne.n	8004692 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004672:	461a      	mov	r2, r3
 8004674:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e013      	b.n	80046a4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004688:	461a      	mov	r2, r3
 800468a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	e008      	b.n	80046a4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800469e:	461a      	mov	r2, r3
 80046a0:	2300      	movs	r3, #0
 80046a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c2:	461a      	mov	r2, r3
 80046c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	3301      	adds	r3, #1
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046d4:	461a      	mov	r2, r3
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4293      	cmp	r3, r2
 80046da:	d3b5      	bcc.n	8004648 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	e043      	b.n	800476a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046f8:	d118      	bne.n	800472c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470c:	461a      	mov	r2, r3
 800470e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e013      	b.n	800473e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004722:	461a      	mov	r2, r3
 8004724:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e008      	b.n	800473e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004738:	461a      	mov	r2, r3
 800473a:	2300      	movs	r3, #0
 800473c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	2300      	movs	r3, #0
 800474e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800475c:	461a      	mov	r2, r3
 800475e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004762:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	3301      	adds	r3, #1
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800476e:	461a      	mov	r2, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4293      	cmp	r3, r2
 8004774:	d3b5      	bcc.n	80046e2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004788:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004796:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004798:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800479c:	2b00      	cmp	r3, #0
 800479e:	d105      	bne.n	80047ac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f043 0210 	orr.w	r2, r3, #16
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	4b0f      	ldr	r3, [pc, #60]	@ (80047f0 <USB_DevInit+0x2b4>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f043 0208 	orr.w	r2, r3, #8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d105      	bne.n	80047e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <USB_DevInit+0x2b8>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047ec:	b004      	add	sp, #16
 80047ee:	4770      	bx	lr
 80047f0:	803c3800 	.word	0x803c3800
 80047f4:	40000004 	.word	0x40000004

080047f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3301      	adds	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004812:	d901      	bls.n	8004818 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e01b      	b.n	8004850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	daf2      	bge.n	8004806 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	019b      	lsls	r3, r3, #6
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3301      	adds	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800483c:	d901      	bls.n	8004842 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e006      	b.n	8004850 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b20      	cmp	r3, #32
 800484c:	d0f0      	beq.n	8004830 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3301      	adds	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004874:	d901      	bls.n	800487a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e018      	b.n	80048ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	daf2      	bge.n	8004868 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2210      	movs	r2, #16
 800488a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004898:	d901      	bls.n	800489e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e006      	b.n	80048ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b10      	cmp	r3, #16
 80048a8:	d0f0      	beq.n	800488c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048d8:	4313      	orrs	r3, r2
 80048da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004904:	f023 0303 	bic.w	r3, r3, #3
 8004908:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f003 0301 	and.w	r3, r3, #1
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3301      	adds	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004960:	d901      	bls.n	8004966 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e01b      	b.n	800499e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	daf2      	bge.n	8004954 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3301      	adds	r3, #1
 8004982:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800498a:	d901      	bls.n	8004990 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e006      	b.n	800499e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b01      	cmp	r3, #1
 800499a:	d0f0      	beq.n	800497e <USB_CoreReset+0x36>

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <memset>:
 80049aa:	4402      	add	r2, r0
 80049ac:	4603      	mov	r3, r0
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d100      	bne.n	80049b4 <memset+0xa>
 80049b2:	4770      	bx	lr
 80049b4:	f803 1b01 	strb.w	r1, [r3], #1
 80049b8:	e7f9      	b.n	80049ae <memset+0x4>
	...

080049bc <__libc_init_array>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	4d0d      	ldr	r5, [pc, #52]	@ (80049f4 <__libc_init_array+0x38>)
 80049c0:	4c0d      	ldr	r4, [pc, #52]	@ (80049f8 <__libc_init_array+0x3c>)
 80049c2:	1b64      	subs	r4, r4, r5
 80049c4:	10a4      	asrs	r4, r4, #2
 80049c6:	2600      	movs	r6, #0
 80049c8:	42a6      	cmp	r6, r4
 80049ca:	d109      	bne.n	80049e0 <__libc_init_array+0x24>
 80049cc:	4d0b      	ldr	r5, [pc, #44]	@ (80049fc <__libc_init_array+0x40>)
 80049ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004a00 <__libc_init_array+0x44>)
 80049d0:	f000 f818 	bl	8004a04 <_init>
 80049d4:	1b64      	subs	r4, r4, r5
 80049d6:	10a4      	asrs	r4, r4, #2
 80049d8:	2600      	movs	r6, #0
 80049da:	42a6      	cmp	r6, r4
 80049dc:	d105      	bne.n	80049ea <__libc_init_array+0x2e>
 80049de:	bd70      	pop	{r4, r5, r6, pc}
 80049e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e4:	4798      	blx	r3
 80049e6:	3601      	adds	r6, #1
 80049e8:	e7ee      	b.n	80049c8 <__libc_init_array+0xc>
 80049ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ee:	4798      	blx	r3
 80049f0:	3601      	adds	r6, #1
 80049f2:	e7f2      	b.n	80049da <__libc_init_array+0x1e>
 80049f4:	08004a3c 	.word	0x08004a3c
 80049f8:	08004a3c 	.word	0x08004a3c
 80049fc:	08004a3c 	.word	0x08004a3c
 8004a00:	08004a40 	.word	0x08004a40

08004a04 <_init>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	bf00      	nop
 8004a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0a:	bc08      	pop	{r3}
 8004a0c:	469e      	mov	lr, r3
 8004a0e:	4770      	bx	lr

08004a10 <_fini>:
 8004a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a12:	bf00      	nop
 8004a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a16:	bc08      	pop	{r3}
 8004a18:	469e      	mov	lr, r3
 8004a1a:	4770      	bx	lr
